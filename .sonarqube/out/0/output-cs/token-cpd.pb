ôı
,E:\GitHub\inguz-InguzDSP\InguzDSP\Program.cs
	namespace 	
InguzDSP
 
{ 
static 

class 
Program 
{ 
static 
char 
slash 
= 
Path  
.  !"
DirectorySeparatorChar! 7
;7 8
static 
bool 
_debug 
= 
false "
;" #
static 
string 
_userID 
; 
static 
string 
_pluginFolder #
;# $
static 
string 
_dataFolder !
;! "
static 
string 
_settingsFolder %
;% &
static 
string 
_tempFolder !
;! "
static   
string   
_configFile   !
;  ! "
static"" 
string"" 
_siggen"" 
="" 
null""  $
;""$ %
static## 
ChannelFlag## 
_siggenUseEQ## '
=##( )
ChannelFlag##* 5
.##5 6
NONE##6 :
;##: ;
static$$ 
int$$ 

_sigparam1$$ 
=$$ 
$num$$  !
;$$! "
static%% 
int%% 

_sigparam2%% 
=%% 
$num%%  !
;%%! "
static&& 
int&& 

_sigparam3&& 
=&& 
$num&&  !
;&&! "
static(( 
string(( 

_sigparamA((  
=((! "
$str((# %
;((% &
static)) 
string)) 

_sigparamB))  
=))! "
$str))# %
;))% &
static++ 
string++ 
_impulsePath++ "
=++# $
null++% )
;++) *
static,, 
string,, 
_inPath,, 
=,, 
null,,  $
;,,$ %
static-- 
string-- 
_outPath-- 
=--  
null--! %
;--% &
static.. 
Stream.. 
	_inStream.. 
=..  !
null.." &
;..& '
static00 
bool00 
_tail00 
=00 
true00  
;00  !
static11 
bool11 
_slow11 
=11 
false11 !
;11! "
static44 
List44 
<44 
double44 
>44 
_impulseVolumes44 +
=44, -
new44. 1
List442 6
<446 7
double447 =
>44= >
(44> ?
)44? @
;44@ A
static77 
bool77 

_bigEndian77 
=77  
false77! &
;77& '
static88 
uint88 
_inputSampleRate88 $
=88% &
$num88' (
;88( )
static99 
bool99 
_isRawIn99 
=99 
true99 #
;99# $
static:: 

WaveFormat:: 
_rawtype:: "
=::# $

WaveFormat::% /
.::/ 0
PCM::0 3
;::3 4
static;; 
ushort;; 
_rawbits;; 
=;;  
$num;;! #
;;;# $
static<< 
ushort<< 
_rawchan<< 
=<<  
$num<<! "
;<<" #
static== 
bool== 

_isBFormat== 
===  
false==! &
;==& '
static>> 
bool>> 
_inputSPDIF>> 
=>>  !
false>>" '
;>>' (
static?? 
bool?? 
	_isBypass?? 
=?? 
false??  %
;??% &
staticAA 
TimeSpanAA 

_startTimeAA "
=AA# $
TimeSpanAA% -
.AA- .
ZeroAA. 2
;AA2 3
staticDD 
doubleDD 
_gainDD 
=DD 
$numDD 
;DD  
staticEE 

DitherTypeEE 
_ditherEE !
=EE" #

DitherTypeEE$ .
.EE. /
SHAPEDEE/ 5
;EE5 6
staticGG 
intGG 
_partitionsGG 
=GG  
$numGG! "
;GG" #
staticHH 
intHH 
_eqBandsHH 
;HH 
staticII 
FilterProfileII 
	_eqValuesII &
=II' (
newII) ,
FilterProfileII- :
(II: ;
)II; <
;II< =
staticJJ 
doubleJJ 
_eqLoudnessJJ !
;JJ! "
staticKK 
doubleKK 
_eqFlatnessKK !
;KK! "
staticLL 
stringLL 
_matrixFilterLL #
=LL$ %
nullLL& *
;LL* +
staticMM 
stringMM 
_bformatFilterMM $
=MM% &
nullMM' +
;MM+ ,
staticOO 
intOO 
_depthOO 
;OO 
staticPP 
doublePP 
_balancePP 
;PP 
staticQQ 
intQQ 
_skewQQ 
;QQ 
staticTT 
stringTT 
_soxExeTT 
=TT 
$strTT  %
;TT% &
staticUU 
stringUU 
_soxFmtUU 
=UU 
$strUU  8
;UU8 9
staticZZ 
stringZZ 
	_aftenExeZZ 
=ZZ  !
$strZZ" )
;ZZ) *
static[[ 
string[[ 
	_aftenFmt[[ 
=[[  !
$str[[" @
;[[@ A
static\\ 
bool\\ 
_aftenNeeded\\  
=\\! "
false\\# (
;\\( )
static__ 
string__ 
	_ambiType__ 
=__  !
null__" &
;__& '
staticbb 
doublebb 
_ambiCardioidbb #
=bb$ %
$numbb& )
;bb) *
staticee 
doubleee 
_ambiMicAngleee #
=ee$ %
$numee& (
;ee( )
statichh 
doublehh 
_ambiRotateXhh "
=hh# $
$numhh% &
;hh& '
staticii 
doubleii 
_ambiRotateYii "
=ii# $
$numii% &
;ii& '
staticjj 
doublejj 
_ambiRotateZjj "
=jj# $
$numjj% &
;jj& '
staticmm 
stringmm 
_ambiMatrixFilemm %
=mm& '
nullmm( ,
;mm, -
staticpp 
doublepp 
_ambiDistancepp #
=pp$ %
$numpp& )
;pp) *
staticqq 
doubleqq 
_ambiShelfFreqqq $
=qq% &
$numqq' *
;qq* +
statictt 
booltt 
	_isRawOuttt 
=tt 
truett  $
;tt$ %
staticuu 
ushortuu 
_outBitsuu 
=uu  
$numuu! "
;uu" #
staticvv 
uintvv 
_outRatevv 
=vv 
$numvv  
;vv  !
staticww 
ushortww 
_outChannelsww "
=ww# $
$numww% &
;ww& '
staticxx 

WaveFormatxx 

_outFormatxx $
=xx% &

WaveFormatxx' 1
.xx1 2
PCMxx2 5
;xx5 6
staticzz 

IConvolverzz 
_MatrixConvolverzz *
;zz* +
static{{ 

IConvolver{{ 
_MainConvolver{{ (
;{{( )
static|| 

IConvolver|| 
_EQConvolver|| &
;||& '
static}} 
Shuffler}} 
_widthShuffler}} &
;}}& '
static~~ 
Skewer~~ 
_depthSkewer~~ "
;~~" #
static 
Skewer 
_skewSkewer !
;! "
static
ÄÄ 

WaveWriter
ÄÄ 
_writer
ÄÄ !
;
ÄÄ! "
static
ÅÅ 
int
ÅÅ 
_maxImpulseLength
ÅÅ $
=
ÅÅ% &
$num
ÅÅ' ,
;
ÅÅ, -
static
ÉÉ 
XmlDocument
ÉÉ 
_configDocument
ÉÉ *
=
ÉÉ+ ,
new
ÉÉ- 0
XmlDocument
ÉÉ1 <
(
ÉÉ< =
)
ÉÉ= >
;
ÉÉ> ?
static
ÖÖ 
Object
ÖÖ 
_lockReadConfig
ÖÖ %
=
ÖÖ& '
new
ÖÖ( +
Object
ÖÖ, 2
(
ÖÖ2 3
)
ÖÖ3 4
;
ÖÖ4 5
static
ââ 

TextWriter
ââ 
stdout
ââ  
{
ää 	
get
ãã 
{
åå 
return
çç 
System
çç 
.
çç 
Console
çç %
.
çç% &
Out
çç& )
;
çç) *
}
éé 
}
èè 	
static
ëë 
void
ëë 
DisplayUsage
ëë  
(
ëë  !
string
ëë! '
badArg
ëë( .
)
ëë. /
{
íí 	
if
ìì 
(
ìì 
badArg
ìì 
!=
ìì 
null
ìì 
)
ìì 
{
îî 
stdout
ïï 
.
ïï 
	WriteLine
ïï  
(
ïï  !
$str
ïï! D
,
ïïD E
badArg
ïïF L
)
ïïL M
;
ïïM N
}
ññ 
stdout
óó 
.
óó 
	WriteLine
óó 
(
óó 
$str
óó l
)
óól m
;
óóm n
}
òò 	
static
õõ 
void
õõ 
DebugMessage
õõ  
(
õõ  !
string
õõ! '
DebugMessage
õõ( 4
)
õõ4 5
{
úú 	
if
ùù 
(
ùù 
_debug
ùù 
)
ùù 
{
ûû 
Trace
üü 
.
üü 
	WriteLine
üü 
(
üü  
DebugMessage
üü  ,
)
üü, -
;
üü- .
}
†† 
}
°° 	
static
ßß 
void
ßß 
Main
ßß 
(
ßß 
string
ßß 
[
ßß  
]
ßß  !
args
ßß" &
)
ßß& '
{
®® 	
try
©© 
{
™™ 
string
¨¨ 
[
¨¨ 
]
¨¨ 
cargs
¨¨ 
=
¨¨  
Environment
¨¨! ,
.
¨¨, - 
GetCommandLineArgs
¨¨- ?
(
¨¨? @
)
¨¨@ A
;
¨¨A B
_pluginFolder
≠≠ 
=
≠≠ 
System
≠≠  &
.
≠≠& '

Reflection
≠≠' 1
.
≠≠1 2
Assembly
≠≠2 :
.
≠≠: ;"
GetExecutingAssembly
≠≠; O
(
≠≠O P
)
≠≠P Q
.
≠≠Q R
Location
≠≠R Z
;
≠≠Z [
_pluginFolder
ÆÆ 
=
ÆÆ 
Path
ÆÆ  $
.
ÆÆ$ %
GetDirectoryName
ÆÆ% 5
(
ÆÆ5 6
cargs
ÆÆ6 ;
[
ÆÆ; <
$num
ÆÆ< =
]
ÆÆ= >
)
ÆÆ> ?
;
ÆÆ? @
string
≤≤ 
appData
≤≤ 
=
≤≤  
Environment
≤≤! ,
.
≤≤, -
GetFolderPath
≤≤- :
(
≤≤: ;
Environment
≤≤; F
.
≤≤F G
SpecialFolder
≤≤G T
.
≤≤T U#
CommonApplicationData
≤≤U j
)
≤≤j k
;
≤≤k l
_dataFolder
≥≥ 
=
≥≥ 
Path
≥≥ "
.
≥≥" #
GetFullPath
≥≥# .
(
≥≥. /
Path
≥≥/ 3
.
≥≥3 4
Combine
≥≥4 ;
(
≥≥; <
appData
≥≥< C
,
≥≥C D
$str
≥≥E N
+
≥≥O P
slash
≥≥Q V
)
≥≥V W
)
≥≥W X
;
≥≥X Y
_settingsFolder
¥¥ 
=
¥¥  !
Path
¥¥" &
.
¥¥& '
GetFullPath
¥¥' 2
(
¥¥2 3
Path
¥¥3 7
.
¥¥7 8
Combine
¥¥8 ?
(
¥¥? @
appData
¥¥@ G
,
¥¥G H
$str
¥¥I R
+
¥¥S T
slash
¥¥U Z
+
¥¥[ \
$str
¥¥] g
+
¥¥h i
slash
¥¥j o
)
¥¥o p
)
¥¥p q
;
¥¥q r
_tempFolder
µµ 
=
µµ 
Path
µµ "
.
µµ" #
GetFullPath
µµ# .
(
µµ. /
Path
µµ/ 3
.
µµ3 4
Combine
µµ4 ;
(
µµ; <
appData
µµ< C
,
µµC D
$str
µµE N
+
µµO P
slash
µµQ V
+
µµW X
$str
µµY _
+
µµ` a
slash
µµb g
)
µµg h
)
µµh i
;
µµi j
Trace
∂∂ 
.
∂∂ 
FilePath
∂∂ 
=
∂∂  
Path
∂∂! %
.
∂∂% &
Combine
∂∂& -
(
∂∂- .
_dataFolder
∂∂. 9
,
∂∂9 :
$str
∂∂; D
)
∂∂D E
;
∂∂E F
Trace
∏∏ 
.
∏∏ 
	WriteLine
∏∏ 
(
∏∏  
$str
∏∏  4
,
∏∏4 5
DSPUtil
∏∏6 =
.
∏∏= >
DSPUtil
∏∏> E
.
∏∏E F
GetVersionInfo
∏∏F T
(
∏∏T U
)
∏∏U V
,
∏∏V W
String
∏∏X ^
.
∏∏^ _
Join
∏∏_ c
(
∏∏c d
$str
∏∏d g
,
∏∏g h
args
∏∏i m
)
∏∏m n
)
∏∏n o
;
∏∏o p
bool
ππ 
ok
ππ 
=
ππ 
LoadConfig1
ππ %
(
ππ% &
)
ππ& '
;
ππ' (
ushort
∫∫ 
n
∫∫ 
;
∫∫ 
for
ªª 
(
ªª 
int
ªª 
j
ªª 
=
ªª 
$num
ªª 
;
ªª 
ok
ªª  "
&&
ªª# %
j
ªª& '
<
ªª( )
args
ªª* .
.
ªª. /
Length
ªª/ 5
;
ªª5 6
j
ªª7 8
++
ªª8 :
)
ªª: ;
{
ºº 
string
ΩΩ 
arg
ΩΩ 
=
ΩΩ  
args
ΩΩ! %
[
ΩΩ% &
j
ΩΩ& '
]
ΩΩ' (
;
ΩΩ( )
try
¿¿ 
{
¡¡ 
switch
¬¬ 
(
¬¬  
args
¬¬  $
[
¬¬$ %
j
¬¬% &
]
¬¬& '
.
¬¬' (
ToUpperInvariant
¬¬( 8
(
¬¬8 9
)
¬¬9 :
)
¬¬: ;
{
√√ 
case
ƒƒ  
$str
ƒƒ! &
:
ƒƒ& '
_userID
∆∆  '
=
∆∆( )
args
∆∆* .
[
∆∆. /
++
∆∆/ 1
j
∆∆1 2
]
∆∆2 3
;
∆∆3 4
break
««  %
;
««% &
case
……  
$str
……! '
:
……' (
_isRawIn
ÀÀ  (
=
ÀÀ) *
false
ÀÀ+ 0
;
ÀÀ0 1
break
ÃÃ  %
;
ÃÃ% &
case
ŒŒ  
$str
ŒŒ! '
:
ŒŒ' (

_isBFormat
——  *
=
——+ ,
true
——- 1
;
——1 2
_isRawIn
““  (
=
““) *
false
““+ 0
;
““0 1
break
””  %
;
””% &
case
’’  
$str
’’! (
:
’’( )
	_isRawOut
◊◊  )
=
◊◊* +
false
◊◊, 1
;
◊◊1 2
break
ÿÿ  %
;
ÿÿ% &
case
⁄⁄  
$str
⁄⁄! &
:
⁄⁄& '

_bigEndian
‹‹  *
=
‹‹+ ,
true
‹‹- 1
;
‹‹1 2
break
››  %
;
››% &
case
ﬂﬂ  
$str
ﬂﬂ! )
:
ﬂﬂ) *
_inPath
‡‡  '
=
‡‡( )
args
‡‡* .
[
‡‡. /
++
‡‡/ 1
j
‡‡1 2
]
‡‡2 3
;
‡‡3 4
break
··  %
;
··% &
case
„„  
$str
„„! *
:
„„* +
_outPath
ÂÂ  (
=
ÂÂ) *
args
ÂÂ+ /
[
ÂÂ/ 0
++
ÂÂ0 2
j
ÂÂ2 3
]
ÂÂ3 4
;
ÂÂ4 5
break
ÊÊ  %
;
ÊÊ% &
case
ËË  
$str
ËË! %
:
ËË% &
n
ÍÍ  !
=
ÍÍ" #
ushort
ÍÍ$ *
.
ÍÍ* +
Parse
ÍÍ+ 0
(
ÍÍ0 1
args
ÍÍ1 5
[
ÍÍ5 6
++
ÍÍ6 8
j
ÍÍ8 9
]
ÍÍ9 :
,
ÍÍ: ;
CultureInfo
ÍÍ< G
.
ÍÍG H
InvariantCulture
ÍÍH X
)
ÍÍX Y
;
ÍÍY Z
if
ÎÎ  "
(
ÎÎ# $
n
ÎÎ$ %
>
ÎÎ& '
$num
ÎÎ( )
)
ÎÎ) *
_outBits
ÎÎ+ 3
=
ÎÎ4 5
n
ÎÎ6 7
;
ÎÎ7 8
break
ÏÏ  %
;
ÏÏ% &
case
ÓÓ  
$str
ÓÓ! %
:
ÓÓ% &
uint
  $
m
% &
=
' (
uint
) -
.
- .
Parse
. 3
(
3 4
args
4 8
[
8 9
++
9 ;
j
; <
]
< =
,
= >
CultureInfo
? J
.
J K
InvariantCulture
K [
)
[ \
;
\ ]
if
ÒÒ  "
(
ÒÒ# $
m
ÒÒ$ %
>
ÒÒ& '
$num
ÒÒ( )
)
ÒÒ) *
_inputSampleRate
ÒÒ+ ;
=
ÒÒ< =
m
ÒÒ> ?
;
ÒÒ? @
break
ÚÚ  %
;
ÚÚ% &
case
ÙÙ  
$str
ÙÙ! (
:
ÙÙ( )
string
˜˜  &
ts
˜˜' )
=
˜˜* +
args
˜˜, 0
[
˜˜0 1
++
˜˜1 3
j
˜˜3 4
]
˜˜4 5
;
˜˜5 6
String
˚˚  &
[
˚˚& '
]
˚˚' (
myseparator
˚˚) 4
=
˚˚5 6
{
˚˚7 8
$str
˚˚9 <
,
˚˚< =
$str
˚˚> A
}
˚˚B C
;
˚˚C D
Int32
¸¸  %
count
¸¸& +
=
¸¸, -
$num
¸¸. /
;
¸¸/ 0
string
˝˝  &
[
˝˝& '
]
˝˝' (
tsa
˝˝) ,
=
˝˝- .
ts
˝˝/ 1
.
˝˝1 2
Split
˝˝2 7
(
˝˝7 8
myseparator
˝˝8 C
,
˝˝C D
count
˝˝E J
,
˝˝J K 
StringSplitOptions
˝˝L ^
.
˝˝^ _ 
RemoveEmptyEntries
˝˝_ q
)
˝˝q r
;
˝˝r s
if
ˇˇ  "
(
ˇˇ# $
tsa
ˇˇ$ '
.
ˇˇ' (
Length
ˇˇ( .
==
ˇˇ/ 1
$num
ˇˇ2 3
)
ˇˇ3 4
{
ÄÄ  !
double
ÅÅ$ *
tix
ÅÅ+ .
=
ÅÅ/ 0
(
ÅÅ1 2
double
ÅÅ2 8
)
ÅÅ8 9
(
ÅÅ9 :
int
ÅÅ: =
.
ÅÅ= >
Parse
ÅÅ> C
(
ÅÅC D
tsa
ÅÅD G
[
ÅÅG H
$num
ÅÅH I
]
ÅÅI J
)
ÅÅJ K
*
ÅÅL M
$num
ÅÅN P
)
ÅÅP Q
;
ÅÅQ R
tix
ÇÇ$ '
+=
ÇÇ( *
(
ÇÇ+ ,
double
ÇÇ, 2
)
ÇÇ2 3
(
ÇÇ3 4
int
ÇÇ4 7
.
ÇÇ7 8
Parse
ÇÇ8 =
(
ÇÇ= >
tsa
ÇÇ> A
[
ÇÇA B
$num
ÇÇB C
]
ÇÇC D
)
ÇÇD E
)
ÇÇE F
;
ÇÇF G
tix
ÉÉ$ '
+=
ÉÉ( *
double
ÉÉ+ 1
.
ÉÉ1 2
Parse
ÉÉ2 7
(
ÉÉ7 8
$str
ÉÉ8 <
+
ÉÉ= >
tsa
ÉÉ? B
[
ÉÉB C
$num
ÉÉC D
]
ÉÉD E
,
ÉÉE F
CultureInfo
ÉÉG R
.
ÉÉR S
InvariantCulture
ÉÉS c
)
ÉÉc d
;
ÉÉd e

_startTime
ÑÑ$ .
=
ÑÑ/ 0
new
ÑÑ1 4
TimeSpan
ÑÑ5 =
(
ÑÑ= >
(
ÑÑ> ?
long
ÑÑ? C
)
ÑÑC D
(
ÑÑD E
tix
ÑÑE H
*
ÑÑI J
$num
ÑÑK S
)
ÑÑS T
)
ÑÑT U
;
ÑÑU V
}
ÖÖ  !
else
ÜÜ  $
{
áá  !

_startTime
ää$ .
=
ää/ 0
TimeSpan
ää1 9
.
ää9 :
Parse
ää: ?
(
ää? @
args
ää@ D
[
ääD E
++
ääE G
j
ääG H
]
ääH I
)
ääI J
;
ääJ K
}
ãã  !
break
åå  %
;
åå% &
case
éé  
$str
éé! )
:
éé) *
Trace
èè  %
.
èè% &

UseConsole
èè& 0
=
èè1 2
true
èè3 7
;
èè7 8
_debug
êê  &
=
êê' (
true
êê) -
;
êê- .
break
ëë  %
;
ëë% &
case
ìì  
$str
ìì! $
:
ìì$ %
break
ïï  %
;
ïï% &
case
óó  
$str
óó! $
:
óó$ %
string
ôô  &
infile
ôô' -
=
ôô. /
args
ôô0 4
[
ôô4 5
++
ôô5 7
j
ôô7 8
]
ôô8 9
;
ôô9 :
	_inStream
öö  )
=
öö* +
File
öö, 0
.
öö0 1
OpenRead
öö1 9
(
öö9 :
infile
öö: @
)
öö@ A
;
ööA B
break
õõ  %
;
õõ% &
default
ùù #
:
ùù# $
Trace
ûû  %
.
ûû% &
	WriteLine
ûû& /
(
ûû/ 0
$str
ûû0 M
,
ûûM N
arg
ûûO R
)
ûûR S
;
ûûS T
DisplayUsage
üü  ,
(
üü, -
arg
üü- 0
)
üü0 1
;
üü1 2
ok
††  "
=
††# $
false
††% *
;
††* +
break
°°  %
;
°°% &
}
¢¢ 
}
££ 
catch
§§ 
(
§§ 
	Exception
§§ $
)
§§$ %
{
§§& '
}
§§H I
}
•• 
if
¶¶ 
(
¶¶ 
ok
¶¶ 
&&
¶¶ 
_userID
¶¶ !
==
¶¶" $
null
¶¶% )
)
¶¶) *
{
ßß 
Trace
®® 
.
®® 
	WriteLine
®® #
(
®®# $
$str
®®$ <
)
®®< =
;
®®= >
DisplayUsage
©©  
(
©©  !
null
©©! %
)
©©% &
;
©©& '
ok
™™ 
=
™™ 
false
™™ 
;
™™ 
}
´´ 
Trace
¨¨ 
.
¨¨ 
Prefix
¨¨ 
=
¨¨ 
_userID
¨¨ &
+
¨¨' (
$str
¨¨) ,
;
¨¨, -
if
ÆÆ 
(
ÆÆ 
ok
ÆÆ 
)
ÆÆ 
{
ØØ 
InguzDSP
∞∞ 
(
∞∞ 
ok
∞∞ 
)
∞∞  
;
∞∞  !
}
±± 
}
≤≤ 
catch
≥≥ 
(
≥≥ 
	Exception
≥≥ 
e
≥≥ 
)
≥≥ 
{
¥¥ 
Show
µµ 
(
µµ 
$str
µµ &
,
µµ& '
e
µµ( )
.
µµ) *
Message
µµ* 1
,
µµ1 2
$num
µµ3 4
)
µµ4 5
;
µµ5 6
Trace
∂∂ 
.
∂∂ 
	WriteLine
∂∂ 
(
∂∂  
e
∂∂  !
.
∂∂! "
Message
∂∂" )
+
∂∂* +
$str
∂∂, 0
+
∂∂1 2
e
∂∂3 4
.
∂∂4 5
GetHashCode
∂∂5 @
(
∂∂@ A
)
∂∂A B
+
∂∂C D
$str
∂∂E H
)
∂∂H I
;
∂∂I J
Trace
∑∑ 
.
∑∑ 
	WriteLine
∑∑ 
(
∑∑  
e
∑∑  !
.
∑∑! "

StackTrace
∑∑" ,
)
∑∑, -
;
∑∑- .
}
∏∏ 
finally
ππ 
{
∫∫ 
stdout
ªª 
.
ªª 
Flush
ªª 
(
ªª 
)
ªª 
;
ªª 
}
ºº 
}
ΩΩ 	
static
¡¡ 
void
¡¡ 
InguzDSP
¡¡ 
(
¡¡ 
bool
¡¡ !
doRun
¡¡" '
)
¡¡' (
{
¬¬ 	
DateTime
√√ 

dtStartRun
√√ 
=
√√  !
DateTime
√√" *
.
√√* +
Now
√√+ .
;
√√. /
string
ƒƒ 
sigdesc
ƒƒ 
=
ƒƒ 
null
ƒƒ !
;
ƒƒ! "
if
«« 
(
«« 
_slow
«« 
)
«« 
{
»» 
_MatrixConvolver
……  
=
……! "
new
……# &
SlowConvolver
……' 4
(
……4 5
)
……5 6
;
……6 7
_MainConvolver
   
=
    
new
  ! $
SlowConvolver
  % 2
(
  2 3
)
  3 4
;
  4 5
_EQConvolver
ÀÀ 
=
ÀÀ 
new
ÀÀ "
SlowConvolver
ÀÀ# 0
(
ÀÀ0 1
)
ÀÀ1 2
;
ÀÀ2 3
}
ÃÃ 
else
ÕÕ 
{
ŒŒ 
_MatrixConvolver
œœ  
=
œœ! "
new
œœ# &
FastConvolver
œœ' 4
(
œœ4 5
)
œœ5 6
;
œœ6 7
_MainConvolver
–– 
=
––  
new
––! $
FastConvolver
––% 2
(
––2 3
)
––3 4
;
––4 5
_EQConvolver
—— 
=
—— 
new
—— "
FastConvolver
——# 0
(
——0 1
)
——1 2
;
——2 3
}
““ 
_widthShuffler
’’ 
=
’’ 
new
’’  
Shuffler
’’! )
(
’’) *
)
’’* +
;
’’+ ,
_depthSkewer
ÿÿ 
=
ÿÿ 
new
ÿÿ 
Skewer
ÿÿ %
(
ÿÿ% &
true
ÿÿ& *
)
ÿÿ* +
;
ÿÿ+ ,
_skewSkewer
ŸŸ 
=
ŸŸ 
new
ŸŸ 
Skewer
ŸŸ $
(
ŸŸ$ %
true
ŸŸ% )
)
ŸŸ) *
;
ŸŸ* +
if
‹‹ 
(
‹‹ 
_outPath
‹‹ 
==
‹‹ 
null
‹‹  
)
‹‹  !
{
›› 
_writer
ﬁﬁ 
=
ﬁﬁ 
new
ﬁﬁ 

WaveWriter
ﬁﬁ (
(
ﬁﬁ( )
)
ﬁﬁ) *
;
ﬁﬁ* +
}
ﬂﬂ 
else
‡‡ 
{
·· 
_writer
‚‚ 
=
‚‚ 
new
‚‚ 

WaveWriter
‚‚ (
(
‚‚( )
_outPath
‚‚) 1
)
‚‚1 2
;
‚‚2 3
}
„„ 
_writer
‰‰ 
.
‰‰ 
NumChannels
‰‰ 
=
‰‰  !
_outChannels
‰‰" .
;
‰‰. /
if
ÂÂ 
(
ÂÂ 
_debug
ÂÂ 
)
ÂÂ 
{
ÊÊ 
TimeSpan
ÁÁ 
ts
ÁÁ 
=
ÁÁ 
DateTime
ÁÁ &
.
ÁÁ& '
Now
ÁÁ' *
.
ÁÁ* +
Subtract
ÁÁ+ 3
(
ÁÁ3 4

dtStartRun
ÁÁ4 >
)
ÁÁ> ?
;
ÁÁ? @
Trace
ËË 
.
ËË 
	WriteLine
ËË 
(
ËË  
$str
ËË  (
+
ËË) *
ts
ËË+ -
.
ËË- .
TotalMilliseconds
ËË. ?
)
ËË? @
;
ËË@ A
}
ÈÈ 
LoadConfig2
ÏÏ 
(
ÏÏ 
)
ÏÏ 
;
ÏÏ 
CleanUp
ÔÔ 
(
ÔÔ 
)
ÔÔ 
;
ÔÔ 
_MainConvolver
ÛÛ 
.
ÛÛ 

partitions
ÛÛ %
=
ÛÛ& '
_partitions
ÛÛ( 3
;
ÛÛ3 4
if
ÙÙ 
(
ÙÙ 
_tail
ÙÙ 
&&
ÙÙ 
!
ÙÙ 
IsSigGenNonEQ
ÙÙ '
(
ÙÙ' (
)
ÙÙ( )
)
ÙÙ) *
{
ıı 
_MainConvolver
ˆˆ 
.
ˆˆ 
PersistPath
ˆˆ *
=
ˆˆ+ ,
_tempFolder
ˆˆ- 8
;
ˆˆ8 9
_MainConvolver
˜˜ 
.
˜˜ 
PersistTail
˜˜ *
=
˜˜+ ,
_userID
˜˜- 4
;
˜˜4 5
}
¯¯ 
_EQConvolver
˚˚ 
.
˚˚ 

partitions
˚˚ #
=
˚˚$ %
_partitions
˚˚& 1
;
˚˚1 2
if
¸¸ 
(
¸¸ 
_tail
¸¸ 
&&
¸¸ 
!
¸¸ 
IsSigGenNonEQ
¸¸ '
(
¸¸' (
)
¸¸( )
)
¸¸) *
{
˝˝ 
_EQConvolver
˛˛ 
.
˛˛ 
PersistPath
˛˛ (
=
˛˛) *
_tempFolder
˛˛+ 6
;
˛˛6 7
_EQConvolver
ˇˇ 
.
ˇˇ 
PersistTail
ˇˇ (
=
ˇˇ) *
_userID
ˇˇ+ 2
+
ˇˇ3 4
$str
ˇˇ5 :
;
ˇˇ: ;
}
ÄÄ 

WaveReader
ÖÖ 
inputReader
ÖÖ "
=
ÖÖ# $
null
ÖÖ% )
;
ÖÖ) *
bool
ÜÜ 
ok
ÜÜ 
=
ÜÜ 
false
ÜÜ 
;
ÜÜ 
try
áá 
{
àà 
if
ââ 
(
ââ 
	_inStream
ââ 
!=
ââ  
null
ââ! %
)
ââ% &
{
ää 
inputReader
ãã 
=
ãã  !
new
ãã" %

WaveReader
ãã& 0
(
ãã0 1
	_inStream
ãã1 :
)
ãã: ;
;
ãã; <
}
åå 
else
çç 
if
çç 
(
çç 
_isRawIn
çç !
)
çç! "
{
éé 
inputReader
èè 
=
èè  !
new
èè" %

WaveReader
èè& 0
(
èè0 1
_inPath
èè1 8
,
èè8 9
_rawtype
èè: B
,
èèB C
_rawbits
èèD L
,
èèL M
_rawchan
èèN V
,
èèV W

_startTime
èèX b
)
èèb c
;
èèc d
}
êê 
else
ëë 
{
íí 
inputReader
ìì 
=
ìì  !
new
ìì" %

WaveReader
ìì& 0
(
ìì0 1
_inPath
ìì1 8
,
ìì8 9

_startTime
ìì: D
)
ììD E
;
ììE F
}
îî 
inputReader
ïï 
.
ïï 
	BigEndian
ïï %
=
ïï& '

_bigEndian
ïï( 2
;
ïï2 3
ok
ññ 
=
ññ 
true
ññ 
;
ññ 
}
óó 
catch
òò 
(
òò 
	Exception
òò 
e
òò 
)
òò 
{
ôô 
Trace
öö 
.
öö 
	WriteLine
öö 
(
öö  
$str
öö  2
+
öö3 4
e
öö5 6
.
öö6 7
Message
öö7 >
)
öö> ?
;
öö? @
}
úú 
if
ûû 
(
ûû 
ok
ûû 
)
ûû 
{
üü 
if
†† 
(
†† 
inputReader
†† 
.
††  
IsSPDIF
††  '
)
††' (
{
°° 
_inputSPDIF
££ 
=
££  !
true
££" &
;
££& '
	_isBypass
§§ 
=
§§ 
true
§§  $
;
§§$ %
}
•• 
if
¶¶ 
(
¶¶ 
	_isBypass
¶¶ 
)
¶¶ 
{
ßß 
_gain
©© 
=
©© 
$num
©© 
;
©© 
_dither
™™ 
=
™™ 

DitherType
™™ (
.
™™( )
NONE
™™) -
;
™™- .
}
´´ 
uint
≠≠ 
sr
≠≠ 
=
≠≠ 
_inputSampleRate
≠≠ *
;
≠≠* +
if
ÆÆ 
(
ÆÆ 
sr
ÆÆ 
==
ÆÆ 
$num
ÆÆ 
)
ÆÆ 
{
ØØ 
sr
∞∞ 
=
∞∞ 
inputReader
∞∞ $
.
∞∞$ %

SampleRate
∞∞% /
;
∞∞/ 0
}
±± 
if
≤≤ 
(
≤≤ 
sr
≤≤ 
==
≤≤ 
$num
≤≤ 
)
≤≤ 
{
≥≥ 
sr
¥¥ 
=
¥¥ 
$num
¥¥ 
;
¥¥ 
}
µµ 
_inputSampleRate
∂∂  
=
∂∂! "
sr
∂∂# %
;
∂∂% &
if
∏∏ 
(
∏∏ 
WaveFormatEx
∏∏  
.
∏∏  !+
AMBISONIC_B_FORMAT_IEEE_FLOAT
∏∏! >
.
∏∏> ?
Equals
∏∏? E
(
∏∏E F
inputReader
∏∏F Q
.
∏∏Q R
FormatEx
∏∏R Z
)
∏∏Z [
||
∏∏\ ^
WaveFormatEx
ππ  
.
ππ  !$
AMBISONIC_B_FORMAT_PCM
ππ! 7
.
ππ7 8
Equals
ππ8 >
(
ππ> ?
inputReader
ππ? J
.
ππJ K
FormatEx
ππK S
)
ππS T
)
ππT U
{
∫∫ 

_isBFormat
ªª 
=
ªª  
true
ªª! %
;
ªª% &
}
ºº 
}
ææ 
	ISoundObj
¿¿ 
source
¿¿ 
=
¿¿ 
inputReader
¿¿ *
;
¿¿* +
if
¬¬ 
(
¬¬ 
IsSigGen
¬¬ 
(
¬¬ 
)
¬¬ 
)
¬¬ 
{
√√ 

_isBFormat
≈≈ 
=
≈≈ 
false
≈≈ "
;
≈≈" #
source
∆∆ 
=
∆∆  
GetSignalGenerator
∆∆ +
(
∆∆+ ,
-
∆∆, -
$num
∆∆- /
,
∆∆/ 0
out
∆∆1 4
sigdesc
∆∆5 <
)
∆∆< =
;
∆∆= >
Show
«« 
(
«« 
$str
«« "
,
««" #
sigdesc
««$ +
,
««+ ,
$num
««- /
)
««/ 0
;
««0 1
}
»» 
if
   
(
   
IsSigGenNonEQ
   
(
   
)
   
||
    "
	_isBypass
  # ,
)
  , -
{
ÀÀ 
_writer
ÕÕ 
.
ÕÕ 
Input
ÕÕ 
=
ÕÕ 
source
ÕÕ  &
;
ÕÕ& '
}
ŒŒ 
else
œœ 
{
–– 
if
—— 
(
—— 
ok
—— 
)
—— 
{
““ 
LoadImpulse
’’ 
(
’’  
)
’’  !
;
’’! "
}
ÿÿ 
if
⁄⁄ 
(
⁄⁄ 
ok
⁄⁄ 
&&
⁄⁄ 

_isBFormat
⁄⁄ $
)
⁄⁄$ %
{
€€ 
source
‹‹ 
=
‹‹ 
DecodeBFormat
‹‹ *
(
‹‹* +
source
‹‹+ 1
)
‹‹1 2
;
‹‹2 3
}
›› 
if
ﬂﬂ 
(
ﬂﬂ 
ok
ﬂﬂ 
)
ﬂﬂ 
{
‡‡ 
	ISoundObj
·· 
nextSrc
·· %
;
··% &
_widthShuffler
ËË "
.
ËË" #
Input
ËË# (
=
ËË) *
source
ËË+ 1
;
ËË1 2
nextSrc
ÈÈ 
=
ÈÈ 
_widthShuffler
ÈÈ ,
;
ÈÈ, -
if
ÏÏ 
(
ÏÏ 
_matrixFilter
ÏÏ %
!=
ÏÏ& (
null
ÏÏ) -
)
ÏÏ- .
{
ÌÌ 
LoadMatrixFilter
ÓÓ (
(
ÓÓ( )
)
ÓÓ) *
;
ÓÓ* +
_MatrixConvolver
ÔÔ (
.
ÔÔ( )
Input
ÔÔ) .
=
ÔÔ/ 0

TwoChannel
ÔÔ1 ;
(
ÔÔ; <
nextSrc
ÔÔ< C
)
ÔÔC D
;
ÔÔD E
nextSrc
 
=
  !
_MatrixConvolver
" 2
as
3 5
	ISoundObj
6 ?
;
? @
}
ÒÒ 
Shuffler
˚˚ 
shMSLR
˚˚ #
=
˚˚$ %
new
˚˚& )
Shuffler
˚˚* 2
(
˚˚2 3
)
˚˚3 4
;
˚˚4 5
shMSLR
¸¸ 
.
¸¸ 
Input
¸¸  
=
¸¸! "
nextSrc
¸¸# *
;
¸¸* +
_MainConvolver
ÄÄ "
.
ÄÄ" #
Input
ÄÄ# (
=
ÄÄ) *

TwoChannel
ÄÄ+ 5
(
ÄÄ5 6
shMSLR
ÄÄ6 <
)
ÄÄ< =
;
ÄÄ= >
nextSrc
ÅÅ 
=
ÅÅ 
_MainConvolver
ÅÅ ,
;
ÅÅ, -
if
ÉÉ 
(
ÉÉ 
_skew
ÉÉ 
!=
ÉÉ  
$num
ÉÉ! "
)
ÉÉ" #
{
ÑÑ 
_skewSkewer
ÜÜ #
.
ÜÜ# $
Input
ÜÜ$ )
=
ÜÜ* +
nextSrc
ÜÜ, 3
;
ÜÜ3 4
nextSrc
áá 
=
áá  !
_skewSkewer
áá" -
;
áá- .
}
àà 
if
ãã 
(
ãã 

IsSigGenEQ
ãã "
(
ãã" #
)
ãã# $
)
ãã$ %
{
åå 
ChannelSplicer
çç &
splice
çç' -
=
çç. /
new
çç0 3
ChannelSplicer
çç4 B
(
ççB C
)
ççC D
;
ççD E
if
éé 
(
éé 
IsSigGenEQL
éé '
(
éé' (
)
éé( )
)
éé) *
{
èè 
splice
êê "
.
êê" #
Add
êê# &
(
êê& '
new
êê' *
SingleChannel
êê+ 8
(
êê8 9
nextSrc
êê9 @
,
êê@ A
$num
êêB C
)
êêC D
)
êêD E
;
êêE F
}
ëë 
else
íí 
{
ìì 
splice
îî "
.
îî" #
Add
îî# &
(
îî& '
new
îî' *
SingleChannel
îî+ 8
(
îî8 9
source
îî9 ?
,
îî? @
$num
îîA B
)
îîB C
)
îîC D
;
îîD E
}
ïï 
if
ññ 
(
ññ 
IsSigGenEQR
ññ '
(
ññ' (
)
ññ( )
)
ññ) *
{
óó 
splice
òò "
.
òò" #
Add
òò# &
(
òò& '
new
òò' *
SingleChannel
òò+ 8
(
òò8 9
nextSrc
òò9 @
,
òò@ A
$num
òòB C
)
òòC D
)
òòD E
;
òòE F
}
ôô 
else
öö 
{
õõ 
splice
úú "
.
úú" #
Add
úú# &
(
úú& '
new
úú' *
SingleChannel
úú+ 8
(
úú8 9
source
úú9 ?
,
úú? @
$num
úúA B
)
úúB C
)
úúC D
;
úúD E
}
ùù 
nextSrc
ûû 
=
ûû  !
splice
ûû" (
;
ûû( )
}
üü 
if
¢¢ 
(
¢¢ 
_aftenNeeded
¢¢ $
&&
¢¢% '
!
¢¢( )
	_isBypass
¢¢) 2
)
¢¢2 3
{
££ 
nextSrc
§§ 
=
§§  !
AftenProcess
§§" .
(
§§. /
nextSrc
§§/ 6
)
§§6 7
;
§§7 8

_outFormat
•• "
=
••# $

WaveFormat
••% /
.
••/ 0
PCM
••0 3
;
••3 4
_outBits
¶¶  
=
¶¶! "
$num
¶¶# %
;
¶¶% &
_dither
ßß 
=
ßß  !

DitherType
ßß" ,
.
ßß, -
NONE
ßß- 1
;
ßß1 2
}
®® 
_writer
´´ 
.
´´ 
Input
´´ !
=
´´" #
nextSrc
´´$ +
;
´´+ ,
}
¨¨ 
}
≠≠ 
if
ÆÆ 
(
ÆÆ 
ok
ÆÆ 
)
ÆÆ 
{
ØØ 
_writer
¥¥ 
.
¥¥ 
Dither
¥¥ 
=
¥¥  
	_isBypass
¥¥! *
?
¥¥+ ,

DitherType
¥¥- 7
.
¥¥7 8
NONE
¥¥8 <
:
¥¥= >
_dither
¥¥? F
;
¥¥F G
_writer
µµ 
.
µµ 
Raw
µµ 
=
µµ 
	_isRawOut
µµ '
;
µµ' (
_writer
∂∂ 
.
∂∂ 
Format
∂∂ 
=
∂∂  
(
∂∂! "

_outFormat
∂∂" ,
==
∂∂- /

WaveFormat
∂∂0 :
.
∂∂: ;
ANY
∂∂; >
)
∂∂> ?
?
∂∂@ A
inputReader
∂∂B M
.
∂∂M N
Format
∂∂N T
:
∂∂U V

_outFormat
∂∂W a
;
∂∂a b
_writer
∑∑ 
.
∑∑ 
BitsPerSample
∑∑ %
=
∑∑& '
(
∑∑( )
_outBits
∑∑) 1
==
∑∑2 4
$num
∑∑5 6
||
∑∑7 9
	_isBypass
∑∑: C
)
∑∑C D
?
∑∑E F
inputReader
∑∑G R
.
∑∑R S
BitsPerSample
∑∑S `
:
∑∑a b
_outBits
∑∑c k
;
∑∑k l
_writer
∏∏ 
.
∏∏ 

SampleRate
∏∏ "
=
∏∏# $
(
∏∏% &
_outRate
∏∏& .
==
∏∏/ 1
$num
∏∏2 3
||
∏∏4 6
	_isBypass
∏∏7 @
)
∏∏@ A
?
∏∏B C
_inputSampleRate
∏∏D T
:
∏∏U V
_outRate
∏∏W _
;
∏∏_ `
SetWriterGain
ππ 
(
ππ 
)
ππ 
;
ππ  
if
∫∫ 
(
∫∫ 
IsSigGen
∫∫ 
(
∫∫ 
)
∫∫ 
)
∫∫ 
{
ªª 
Trace
ºº 
.
ºº 
	WriteLine
ºº #
(
ºº# $
$str
ºº$ P
,
ººP Q
sigdesc
ººR Y
,
ººY Z
_writer
ºº[ b
.
ººb c
BitsPerSample
ººc p
,
ººp q
_writer
ººr y
.
ººy z

SampleRateººz Ñ
,ººÑ Ö
_writerººÜ ç
.ººç é
Formatººé î
,ººî ï
_writerººñ ù
.ººù û
Ditherººû §
)ºº§ •
;ºº• ¶
}
ΩΩ 
string
ææ 
amb1
ææ 
=
ææ 
$str
ææ  
;
ææ  !
string
øø 
amb2
øø 
=
øø 
$str
øø  
;
øø  !
if
¿¿ 
(
¿¿ 

_isBFormat
¿¿ 
)
¿¿ 
{
¡¡ 
amb1
¬¬ 
=
¬¬ 
$str
¬¬ &
;
¬¬& '
amb2
√√ 
=
√√ 
	_ambiType
√√ $
+
√√% &
$str
√√' *
;
√√* +
}
ƒƒ 
string
≈≈ 
big
≈≈ 
=
≈≈ 
inputReader
≈≈ (
.
≈≈( )
	BigEndian
≈≈) 2
?
≈≈3 4
$str
≈≈5 D
:
≈≈E F
$str
≈≈G I
;
≈≈I J
if
∆∆ 
(
∆∆ 
_inputSPDIF
∆∆ 
)
∆∆  
{
«« 
Trace
»» 
.
»» 
	WriteLine
»» #
(
»»# $
$str
»»$ N
)
»»N O
;
»»O P
}
…… 
else
   
if
   
(
   
	_isBypass
   "
)
  " #
{
ÀÀ 
Trace
ÃÃ 
.
ÃÃ 
	WriteLine
ÃÃ #
(
ÃÃ# $
$str
ÃÃ$ M
)
ÃÃM N
;
ÃÃN O
}
ÕÕ 
Trace
ŒŒ 
.
ŒŒ 
	WriteLine
ŒŒ 
(
ŒŒ  
$str
ŒŒ  W
,
ŒŒW X
inputReader
ŒŒY d
.
ŒŒd e
BitsPerSample
ŒŒe r
,
ŒŒr s
_inputSampleRateŒŒt Ñ
,ŒŒÑ Ö
amb1ŒŒÜ ä
,ŒŒä ã
inputReaderŒŒå ó
.ŒŒó ò
FormatŒŒò û
,ŒŒû ü
bigŒŒ† £
,ŒŒ£ §
_writerŒŒ• ¨
.ŒŒ¨ ≠
BitsPerSampleŒŒ≠ ∫
,ŒŒ∫ ª
_writerŒŒº √
.ŒŒ√ ƒ

SampleRateŒŒƒ Œ
,ŒŒŒ œ
amb2ŒŒ– ‘
,ŒŒ‘ ’
_writerŒŒ÷ ›
.ŒŒ› ﬁ
FormatŒŒﬁ ‰
,ŒŒ‰ Â
_writerŒŒÊ Ì
.ŒŒÌ Ó
DitherŒŒÓ Ù
,ŒŒÙ ı
_gainŒŒˆ ˚
)ŒŒ˚ ¸
;ŒŒ¸ ˝
TimeSpan
–– 
elapsedInit
–– $
=
––% &
System
––' -
.
––- .
DateTime
––. 6
.
––6 7
Now
––7 :
.
––: ;
Subtract
––; C
(
––C D

dtStartRun
––D N
)
––N O
;
––O P
int
—— 
n
—— 
=
—— 
_writer
—— 
.
——  
Run
——  #
(
——# $
)
——$ %
;
——% &
TimeSpan
”” 
elapsedTotal
”” %
=
””& '
System
””( .
.
””. /
DateTime
””/ 7
.
””7 8
Now
””8 ;
.
””; <
Subtract
””< D
(
””D E

dtStartRun
””E O
)
””O P
;
””P Q
double
‘‘ 
realtime
‘‘ 
=
‘‘  !
n
‘‘" #
/
‘‘$ %
(
‘‘& '
double
‘‘' -
)
‘‘- .
_writer
‘‘. 5
.
‘‘5 6

SampleRate
‘‘6 @
;
‘‘@ A
double
’’ 
runtime
’’ 
=
’’  
elapsedTotal
’’! -
.
’’- .
TotalMilliseconds
’’. ?
/
’’@ A
$num
’’B F
;
’’F G
Trace
÷÷ 
.
÷÷ 
	WriteLine
÷÷ 
(
÷÷  
$str
÷÷  _
,
÷÷_ `
n
÷÷a b
,
÷÷b c
elapsedTotal
÷÷d p
.
÷÷p q 
TotalMilliseconds÷÷q Ç
,÷÷Ç É
elapsedInit÷÷Ñ è
.÷÷è ê!
TotalMilliseconds÷÷ê °
,÷÷° ¢
Math÷÷£ ß
.÷÷ß ®
Round÷÷® ≠
(÷÷≠ Æ
realtime÷÷Æ ∂
/÷÷∑ ∏
runtime÷÷π ¿
,÷÷¿ ¡
$num÷÷¬ √
)÷÷√ ƒ
,÷÷ƒ ≈
Math÷÷∆  
.÷÷  À
Round÷÷À –
(÷÷– —
_writer÷÷— ÿ
.÷÷ÿ Ÿ
dbfsPeak÷÷Ÿ ·
,÷÷· ‚
$num÷÷„ ‰
)÷÷‰ Â
)÷÷Â Ê
;÷÷Ê Á!
StopConfigListening
ÿÿ #
(
ÿÿ# $
)
ÿÿ$ %
;
ÿÿ% &
_writer
⁄⁄ 
.
⁄⁄ 
Close
⁄⁄ 
(
⁄⁄ 
)
⁄⁄ 
;
⁄⁄  
}
€€ 
}
‹‹ 	
static
ﬁﬁ 
string
ﬁﬁ 
	CleanPath
ﬁﬁ 
(
ﬁﬁ  
string
ﬁﬁ  &
basePath
ﬁﬁ' /
,
ﬁﬁ/ 0
string
ﬁﬁ1 7
fullPath
ﬁﬁ8 @
)
ﬁﬁ@ A
{
ﬂﬂ 	
if
‡‡ 
(
‡‡ 
fullPath
‡‡ 
==
‡‡ 
null
‡‡  
)
‡‡  !
return
‡‡" (
$str
‡‡) 1
;
‡‡1 2
return
·· 
fullPath
·· 
.
·· 
Replace
·· #
(
··# $
basePath
··$ ,
,
··, -
$str
··. 0
)
··0 1
;
··1 2
}
‚‚ 	
static
‰‰ 
	ISoundObj
‰‰ 

TwoChannel
‰‰ #
(
‰‰# $
	ISoundObj
‰‰$ -
src
‰‰. 1
)
‰‰1 2
{
ÂÂ 	
if
ÊÊ 
(
ÊÊ 
src
ÊÊ 
.
ÊÊ 
NumChannels
ÊÊ 
==
ÊÊ  "
$num
ÊÊ# $
)
ÊÊ$ %
{
ÁÁ 
return
ËË 
src
ËË 
;
ËË 
}
ÈÈ 
else
ÍÍ 
if
ÍÍ 
(
ÍÍ 
src
ÍÍ 
.
ÍÍ 
NumChannels
ÍÍ $
==
ÍÍ% '
$num
ÍÍ( )
)
ÍÍ) *
{
ÎÎ 
ChannelSplicer
ÏÏ 
splicer
ÏÏ &
=
ÏÏ' (
new
ÏÏ) ,
ChannelSplicer
ÏÏ- ;
(
ÏÏ; <
)
ÏÏ< =
;
ÏÏ= >
splicer
ÌÌ 
.
ÌÌ 
Add
ÌÌ 
(
ÌÌ 
src
ÌÌ 
)
ÌÌ  
;
ÌÌ  !
splicer
ÓÓ 
.
ÓÓ 
Add
ÓÓ 
(
ÓÓ 
src
ÓÓ 
)
ÓÓ  
;
ÓÓ  !
return
ÔÔ 
splicer
ÔÔ 
;
ÔÔ 
}
 
else
ÒÒ 
{
ÚÚ 
ChannelSplicer
ÛÛ 
splicer
ÛÛ &
=
ÛÛ' (
new
ÛÛ) ,
ChannelSplicer
ÛÛ- ;
(
ÛÛ; <
)
ÛÛ< =
;
ÛÛ= >
splicer
ÙÙ 
.
ÙÙ 
Add
ÙÙ 
(
ÙÙ 
new
ÙÙ 
SingleChannel
ÙÙ  -
(
ÙÙ- .
src
ÙÙ. 1
,
ÙÙ1 2
$num
ÙÙ3 4
)
ÙÙ4 5
)
ÙÙ5 6
;
ÙÙ6 7
splicer
ıı 
.
ıı 
Add
ıı 
(
ıı 
new
ıı 
SingleChannel
ıı  -
(
ıı- .
src
ıı. 1
,
ıı1 2
$num
ıı3 4
)
ıı4 5
)
ıı5 6
;
ıı6 7
return
ˆˆ 
splicer
ˆˆ 
;
ˆˆ 
}
˜˜ 
}
¯¯ 	
static
¸¸ 
bool
¸¸ 
IsSigGen
¸¸ 
(
¸¸ 
)
¸¸ 
{
˝˝ 	
return
˛˛ 
(
˛˛ 
_siggen
˛˛ 
!=
˛˛ 
null
˛˛ #
)
˛˛# $
;
˛˛$ %
}
ˇˇ 	
static
ÄÄ 
bool
ÄÄ 

IsSigGenEQ
ÄÄ 
(
ÄÄ 
)
ÄÄ  
{
ÅÅ 	
return
ÇÇ 
(
ÇÇ 
_siggen
ÇÇ 
!=
ÇÇ 
null
ÇÇ #
)
ÇÇ# $
&&
ÇÇ% '
_siggenUseEQ
ÇÇ( 4
!=
ÇÇ5 7
ChannelFlag
ÇÇ8 C
.
ÇÇC D
NONE
ÇÇD H
;
ÇÇH I
}
ÉÉ 	
static
ÑÑ 
bool
ÑÑ 
IsSigGenEQL
ÑÑ 
(
ÑÑ  
)
ÑÑ  !
{
ÖÖ 	
return
ÜÜ 
(
ÜÜ 
_siggen
ÜÜ 
!=
ÜÜ 
null
ÜÜ #
)
ÜÜ# $
&&
ÜÜ% '
(
ÜÜ( )
(
ÜÜ) *
_siggenUseEQ
ÜÜ* 6
&
ÜÜ7 8
ChannelFlag
ÜÜ9 D
.
ÜÜD E
LEFT
ÜÜE I
)
ÜÜI J
==
ÜÜK M
ChannelFlag
ÜÜN Y
.
ÜÜY Z
LEFT
ÜÜZ ^
)
ÜÜ^ _
;
ÜÜ_ `
}
áá 	
static
àà 
bool
àà 
IsSigGenEQR
àà 
(
àà  
)
àà  !
{
ââ 	
return
ää 
(
ää 
_siggen
ää 
!=
ää 
null
ää #
)
ää# $
&&
ää% '
(
ää( )
(
ää) *
_siggenUseEQ
ää* 6
&
ää7 8
ChannelFlag
ää9 D
.
ääD E
RIGHT
ääE J
)
ääJ K
==
ääL N
ChannelFlag
ääO Z
.
ääZ [
RIGHT
ää[ `
)
ää` a
;
ääa b
}
ãã 	
static
åå 
bool
åå 
IsSigGenEQBoth
åå "
(
åå" #
)
åå# $
{
çç 	
return
éé 
(
éé 
_siggen
éé 
!=
éé 
null
éé #
)
éé# $
&&
éé% '
(
éé( )
(
éé) *
_siggenUseEQ
éé* 6
&
éé7 8
ChannelFlag
éé9 D
.
ééD E
BOTH
ééE I
)
ééI J
==
ééK M
ChannelFlag
ééN Y
.
ééY Z
BOTH
ééZ ^
)
éé^ _
;
éé_ `
}
èè 	
static
êê 
bool
êê 
IsSigGenNonEQ
êê !
(
êê! "
)
êê" #
{
ëë 	
return
íí 
(
íí 
_siggen
íí 
!=
íí 
null
íí #
)
íí# $
&&
íí% '
_siggenUseEQ
íí( 4
==
íí5 7
ChannelFlag
íí8 C
.
ííC D
NONE
ííD H
;
ííH I
}
ìì 	
static
îî 
bool
îî 
IsSigGenNonEQL
îî "
(
îî" #
)
îî# $
{
ïï 	
return
ññ 
(
ññ 
_siggen
ññ 
!=
ññ 
null
ññ #
)
ññ# $
&&
ññ% '
(
ññ( )
(
ññ) *
_siggenUseEQ
ññ* 6
&
ññ7 8
ChannelFlag
ññ9 D
.
ññD E
LEFT
ññE I
)
ññI J
!=
ññK M
ChannelFlag
ññN Y
.
ññY Z
LEFT
ññZ ^
)
ññ^ _
;
ññ_ `
}
óó 	
static
òò 
bool
òò 
IsSigGenNonEQR
òò "
(
òò" #
)
òò# $
{
ôô 	
return
öö 
(
öö 
_siggen
öö 
!=
öö 
null
öö #
)
öö# $
&&
öö% '
(
öö( )
(
öö) *
_siggenUseEQ
öö* 6
&
öö7 8
ChannelFlag
öö9 D
.
ööD E
RIGHT
ööE J
)
ööJ K
!=
ööL N
ChannelFlag
ööO Z
.
ööZ [
RIGHT
öö[ `
)
öö` a
;
ööa b
}
õõ 	
static
ûû 
	ISoundObj
ûû  
GetSignalGenerator
ûû +
(
ûû+ ,
double
ûû, 2
dBfs
ûû3 7
,
ûû7 8
out
ûû9 <
string
ûû= C
desc
ûûD H
)
ûûH I
{
üü 	
double
†† 
gain
†† 
=
†† 
MathUtil
†† "
.
††" #
gain
††# '
(
††' (
dBfs
††( ,
)
††, -
;
††- .
	ISoundObj
°° 
signalGenerator
°° %
=
°°& '
null
°°( ,
;
°°, -
string
££ 
description
££ 
=
££  
$str
££! *
;
££* +
if
•• 
(
•• 

IsSigGenEQ
•• 
(
•• 
)
•• 
)
•• 
{
¶¶ 
if
ßß 
(
ßß 
IsSigGenEQBoth
ßß "
(
ßß" #
)
ßß# $
)
ßß$ %
{
®® 
description
©© 
=
©©  !
description
©©" -
+
©©. /
$str
©©0 F
;
©©F G
}
™™ 
else
´´ 
if
´´ 
(
´´ 
IsSigGenEQL
´´ $
(
´´$ %
)
´´% &
)
´´& '
{
¨¨ 
description
≠≠ 
=
≠≠  !
description
≠≠" -
+
≠≠. /
$str
≠≠0 V
;
≠≠V W
}
ÆÆ 
else
ØØ 
if
ØØ 
(
ØØ 
IsSigGenEQR
ØØ $
(
ØØ$ %
)
ØØ% &
)
ØØ& '
{
∞∞ 
description
±± 
=
±±  !
description
±±" -
+
±±. /
$str
±±0 W
;
±±W X
}
≤≤ 
else
≥≥ 
{
¥¥ 
description
µµ 
=
µµ  !
description
µµ" -
+
µµ. /
$str
µµ0 F
;
µµF G
}
∂∂ 
}
∑∑ 
desc
∏∏ 
=
∏∏ 
description
∏∏ 
;
∏∏ 
return
ππ 
signalGenerator
ππ "
;
ππ" #
}
∫∫ 	
static
¬¬ 
FileSystemWatcher
¬¬  
_configWatcher
¬¬! /
;
¬¬/ 0
static
√√ 
readonly
√√ 
Object
√√ 
_lock
√√ $
=
√√% &
new
√√' *
Object
√√+ 1
(
√√1 2
)
√√2 3
;
√√3 4
static
ƒƒ 
Thread
ƒƒ !
_configReaderThread
ƒƒ )
;
ƒƒ) *
static
≈≈ 
ManualResetEvent
≈≈  
_configReaderEvent
≈≈  2
=
≈≈3 4
new
≈≈5 8
ManualResetEvent
≈≈9 I
(
≈≈I J
false
≈≈J O
)
≈≈O P
;
≈≈P Q
static
∆∆ 
bool
∆∆ 
_stopNow
∆∆ 
=
∆∆ 
false
∆∆ $
;
∆∆$ %
static
»» 
void
»» "
StartConfigListening
»» (
(
»»( )
)
»») *
{
…… 	
System
ÀÀ 
.
ÀÀ 
IO
ÀÀ 
.
ÀÀ 
FileInfo
ÀÀ 
f
ÀÀ  
=
ÀÀ! "
new
ÀÀ# &
FileInfo
ÀÀ' /
(
ÀÀ/ 0
_configFile
ÀÀ0 ;
)
ÀÀ; <
;
ÀÀ< =
_configWatcher
ÃÃ 
=
ÃÃ 
new
ÃÃ  
FileSystemWatcher
ÃÃ! 2
(
ÃÃ2 3
f
ÃÃ3 4
.
ÃÃ4 5
DirectoryName
ÃÃ5 B
,
ÃÃB C
$str
ÃÃD U
)
ÃÃU V
;
ÃÃV W
_configWatcher
ÕÕ 
.
ÕÕ 
Changed
ÕÕ "
+=
ÕÕ# %
new
ÕÕ& )$
FileSystemEventHandler
ÕÕ* @
(
ÕÕ@ A$
OnConfigurationChanged
ÕÕA W
)
ÕÕW X
;
ÕÕX Y
_configWatcher
ŒŒ 
.
ŒŒ !
EnableRaisingEvents
ŒŒ .
=
ŒŒ/ 0
true
ŒŒ1 5
;
ŒŒ5 6
}
–– 	
static
““ 
void
““ !
StopConfigListening
““ '
(
““' (
)
““( )
{
”” 	
if
‘‘ 
(
‘‘ 
_configWatcher
‘‘ 
!=
‘‘ !
null
‘‘" &
)
‘‘& '
{
’’ 
_configWatcher
÷÷ 
.
÷÷ !
EnableRaisingEvents
÷÷ 2
=
÷÷3 4
false
÷÷5 :
;
÷÷: ;
lock
ÿÿ 
(
ÿÿ 
_lock
ÿÿ 
)
ÿÿ 
{
ŸŸ 
if
⁄⁄ 
(
⁄⁄ !
_configReaderThread
⁄⁄ +
!=
⁄⁄, .
null
⁄⁄/ 3
)
⁄⁄3 4
{
€€ 
_stopNow
‹‹  
=
‹‹! "
true
‹‹# '
;
‹‹' (!
_configReaderThread
›› +
=
››, -
null
››. 2
;
››2 3
}
ﬁﬁ 
}
ﬂﬂ 
}
‡‡ 
}
·· 	
static
„„ 
void
„„ $
OnConfigurationChanged
„„ *
(
„„* +
object
„„+ 1
source
„„2 8
,
„„8 9!
FileSystemEventArgs
„„: M
e
„„N O
)
„„O P
{
‰‰ 	
if
ÈÈ 
(
ÈÈ 
_debug
ÈÈ 
)
ÈÈ 
{
ÍÍ 
Trace
ÎÎ 
.
ÎÎ 
	WriteLine
ÎÎ 
(
ÎÎ  
$str
ÎÎ  /
,
ÎÎ/ 0
e
ÎÎ1 2
.
ÎÎ2 3

ChangeType
ÎÎ3 =
,
ÎÎ= >
	CleanPath
ÎÎ? H
(
ÎÎH I
_settingsFolder
ÎÎI X
,
ÎÎX Y
e
ÎÎZ [
.
ÎÎ[ \
FullPath
ÎÎ\ d
)
ÎÎd e
)
ÎÎe f
;
ÎÎf g
}
ÏÏ 
lock
ÌÌ 
(
ÌÌ 
_lock
ÌÌ 
)
ÌÌ 
{
ÓÓ 
if
ÔÔ 
(
ÔÔ !
_configReaderThread
ÔÔ '
==
ÔÔ( *
null
ÔÔ+ /
)
ÔÔ/ 0
{
 !
_configReaderThread
ÚÚ '
=
ÚÚ( )
new
ÚÚ* -
Thread
ÚÚ. 4
(
ÚÚ4 5 
ConfigReaderThread
ÚÚ5 G
)
ÚÚG H
;
ÚÚH I!
_configReaderThread
ÛÛ '
.
ÛÛ' (
Start
ÛÛ( -
(
ÛÛ- .
)
ÛÛ. /
;
ÛÛ/ 0
}
ÙÙ 
else
ıı 
{
ˆˆ  
_configReaderEvent
¯¯ &
.
¯¯& '
Set
¯¯' *
(
¯¯* +
)
¯¯+ ,
;
¯¯, -
}
˘˘ 
}
˙˙ 
}
˚˚ 	
static
˝˝ 
void
˝˝  
ConfigReaderThread
˝˝ &
(
˝˝& '
)
˝˝' (
{
˛˛ 	
while
ˇˇ 
(
ˇˇ 
!
ˇˇ 
_stopNow
ˇˇ 
)
ˇˇ 
{
ÄÄ 
bool
ÅÅ 
ok
ÅÅ 
=
ÅÅ 
false
ÅÅ 
;
ÅÅ  
try
ÇÇ 
{
ÉÉ 
Thread
ÖÖ 
.
ÖÖ 
Sleep
ÖÖ  
(
ÖÖ  !
$num
ÖÖ! $
)
ÖÖ$ %
;
ÖÖ% &
DebugMessage
ÜÜ  
(
ÜÜ  !
$str
ÜÜ! 8
)
ÜÜ8 9
;
ÜÜ9 : 
_configReaderEvent
áá &
.
áá& '
Reset
áá' ,
(
áá, -
)
áá- .
;
áá. /
TryReadConfig
àà !
(
àà! "
false
àà" '
)
àà' (
;
àà( )
ok
ââ 
=
ââ 
true
ââ 
;
ââ 
}
ää 
catch
ãã 
(
ãã 
	Exception
ãã  
e
ãã! "
)
ãã" #
{
åå 
DebugMessage
çç  
(
çç  !
$str
çç! 7
+
çç8 9
e
çç: ;
.
çç; <
Message
çç< C
)
ççC D
;
ççD E
}
éé 
if
èè 
(
èè 
!
èè 
_stopNow
èè 
)
èè 
{
êê 
try
ëë 
{
íí 
if
ìì 
(
ìì 
ok
ìì 
)
ìì 
{
îî  
_configReaderEvent
ññ .
.
ññ. /
WaitOne
ññ/ 6
(
ññ6 7
)
ññ7 8
;
ññ8 9
}
óó 
else
òò 
{
ôô  
_configReaderEvent
õõ .
.
õõ. /
WaitOne
õõ/ 6
(
õõ6 7
$num
õõ7 :
,
õõ: ;
false
õõ< A
)
õõA B
;
õõB C
}
úú 
}
ùù 
catch
ûû 
(
ûû 
	Exception
ûû $
e
ûû% &
)
ûû& '
{
üü 
DebugMessage
†† $
(
††$ %
$str
††% <
+
††= >
e
††? @
.
††@ A
Message
††A H
)
††H I
;
††I J
}
¢¢ 
}
££ 
}
§§ 
}
•• 	
static
©© 
bool
©© 
LoadConfig1
©© 
(
©©  
)
©©  !
{
™™ 	
System
±± 
.
±± 
Configuration
±±  
.
±±  !
AppSettingsReader
±±! 2
rdr
±±3 6
;
±±6 7
try
≤≤ 
{
≥≥ 
rdr
¥¥ 
=
¥¥ 
new
¥¥ 
System
¥¥  
.
¥¥  !
Configuration
¥¥! .
.
¥¥. /
AppSettingsReader
¥¥/ @
(
¥¥@ A
)
¥¥A B
;
¥¥B C
}
µµ 
catch
∂∂ 
(
∂∂ 
	Exception
∂∂ 
e
∂∂ 
)
∂∂ 
{
∑∑ 
Trace
∏∏ 
.
∏∏ 
	WriteLine
∏∏ 
(
∏∏  
$str
∏∏  8
,
∏∏8 9
e
∏∏: ;
.
∏∏; <
Message
∏∏< C
)
∏∏C D
;
∏∏D E
return
ππ 
true
ππ 
;
ππ 
}
∫∫ 
string
ΩΩ 
	mySetting
ΩΩ 
=
ΩΩ 
$str
ΩΩ %
;
ΩΩ% &
try
ææ 
{
øø 
_gain
øø 
=
øø 
(
øø 
double
øø 
)
øø 
rdr
øø !
.
øø! "
GetValue
øø" *
(
øø* +
	mySetting
øø+ 4
,
øø4 5
typeof
øø6 <
(
øø< =
double
øø= C
)
øøC D
)
øøD E
;
øøE F
}
øøG H
catch
¿¿ 
(
¿¿ 
	Exception
¿¿ 
)
¿¿ 
{
¡¡ 
Trace
¡¡ 
.
¡¡ 
	WriteLine
¡¡ 
(
¡¡ 
$str
¡¡ 2
+
¡¡3 4
	mySetting
¡¡5 >
)
¡¡> ?
;
¡¡? @
}
¡¡A B
try
¬¬ 
{
√√ 
	mySetting
ƒƒ 
=
ƒƒ 
$str
ƒƒ #
;
ƒƒ# $
_debug
≈≈ 
|=
≈≈ 
(
≈≈ 
bool
≈≈ 
)
≈≈  
rdr
≈≈  #
.
≈≈# $
GetValue
≈≈$ ,
(
≈≈, -
	mySetting
≈≈- 6
,
≈≈6 7
typeof
≈≈8 >
(
≈≈> ?
bool
≈≈? C
)
≈≈C D
)
≈≈D E
;
≈≈E F
}
∆∆ 
catch
«« 
(
«« 
	Exception
«« 
)
«« 
{
»» 
Trace
»» 
.
»» 
	WriteLine
»» 
(
»» 
$str
»» 2
+
»»3 4
	mySetting
»»5 >
)
»»> ?
;
»»? @
}
»»A B
try
…… 
{
   
	mySetting
ÀÀ 
=
ÀÀ 
$str
ÀÀ #
;
ÀÀ# $
_inPath
ÃÃ 
=
ÃÃ 
(
ÃÃ 
string
ÃÃ !
)
ÃÃ! "
rdr
ÃÃ" %
.
ÃÃ% &
GetValue
ÃÃ& .
(
ÃÃ. /
	mySetting
ÃÃ/ 8
,
ÃÃ8 9
typeof
ÃÃ: @
(
ÃÃ@ A
string
ÃÃA G
)
ÃÃG H
)
ÃÃH I
;
ÃÃI J
}
ÕÕ 
catch
ŒŒ 
(
ŒŒ 
	Exception
ŒŒ 
)
ŒŒ 
{
œœ 
Trace
œœ 
.
œœ 
	WriteLine
œœ 
(
œœ 
$str
œœ 2
+
œœ3 4
	mySetting
œœ5 >
)
œœ> ?
;
œœ? @
}
œœA B
try
–– 
{
—— 
	mySetting
““ 
=
““ 
$str
““ #
;
““# $
_isRawIn
”” 
=
”” 
(
”” 
bool
””  
)
””  !
rdr
””! $
.
””$ %
GetValue
””% -
(
””- .
	mySetting
””. 7
,
””7 8
typeof
””9 ?
(
””? @
bool
””@ D
)
””D E
)
””E F
;
””F G
}
‘‘ 
catch
’’ 
(
’’ 
	Exception
’’ 
)
’’ 
{
÷÷ 
Trace
÷÷ 
.
÷÷ 
	WriteLine
÷÷ 
(
÷÷ 
$str
÷÷ 2
+
÷÷3 4
	mySetting
÷÷5 >
)
÷÷> ?
;
÷÷? @
}
÷÷A B
try
◊◊ 
{
ÿÿ 
	mySetting
ŸŸ 
=
ŸŸ 
$str
ŸŸ %
;
ŸŸ% &
_rawtype
⁄⁄ 
=
⁄⁄ 
(
⁄⁄ 

WaveFormat
⁄⁄ &
)
⁄⁄& '
rdr
⁄⁄' *
.
⁄⁄* +
GetValue
⁄⁄+ 3
(
⁄⁄3 4
	mySetting
⁄⁄4 =
,
⁄⁄= >
typeof
⁄⁄? E
(
⁄⁄E F
int
⁄⁄F I
)
⁄⁄I J
)
⁄⁄J K
;
⁄⁄K L
}
€€ 
catch
‹‹ 
(
‹‹ 
	Exception
‹‹ 
)
‹‹ 
{
›› 
Trace
›› 
.
›› 
	WriteLine
›› 
(
›› 
$str
›› 2
+
››3 4
	mySetting
››5 >
)
››> ?
;
››? @
}
››A B
try
ﬁﬁ 
{
ﬂﬂ 
	mySetting
‡‡ 
=
‡‡ 
$str
‡‡ %
;
‡‡% &
_rawbits
·· 
=
·· 
(
·· 
ushort
·· "
)
··" #
rdr
··# &
.
··& '
GetValue
··' /
(
··/ 0
	mySetting
··0 9
,
··9 :
typeof
··; A
(
··A B
ushort
··B H
)
··H I
)
··I J
;
··J K
}
‚‚ 
catch
„„ 
(
„„ 
	Exception
„„ 
)
„„ 
{
‰‰ 
Trace
‰‰ 
.
‰‰ 
	WriteLine
‰‰ 
(
‰‰ 
$str
‰‰ 2
+
‰‰3 4
	mySetting
‰‰5 >
)
‰‰> ?
;
‰‰? @
}
‰‰A B
try
ÂÂ 
{
ÊÊ 
	mySetting
ÁÁ 
=
ÁÁ 
$str
ÁÁ %
;
ÁÁ% &
_rawchan
ËË 
=
ËË 
(
ËË 
ushort
ËË "
)
ËË" #
rdr
ËË# &
.
ËË& '
GetValue
ËË' /
(
ËË/ 0
	mySetting
ËË0 9
,
ËË9 :
typeof
ËË; A
(
ËËA B
ushort
ËËB H
)
ËËH I
)
ËËI J
;
ËËJ K
}
ÈÈ 
catch
ÍÍ 
(
ÍÍ 
	Exception
ÍÍ 
)
ÍÍ 
{
ÎÎ 
Trace
ÎÎ 
.
ÎÎ 
	WriteLine
ÎÎ 
(
ÎÎ 
$str
ÎÎ 2
+
ÎÎ3 4
	mySetting
ÎÎ5 >
)
ÎÎ> ?
;
ÎÎ? @
}
ÎÎA B
try
ÏÏ 
{
ÌÌ 
	mySetting
ÓÓ 
=
ÓÓ 
$str
ÓÓ $
;
ÓÓ$ %
_outPath
ÔÔ 
=
ÔÔ 
(
ÔÔ 
string
ÔÔ "
)
ÔÔ" #
rdr
ÔÔ# &
.
ÔÔ& '
GetValue
ÔÔ' /
(
ÔÔ/ 0
	mySetting
ÔÔ0 9
,
ÔÔ9 :
typeof
ÔÔ; A
(
ÔÔA B
string
ÔÔB H
)
ÔÔH I
)
ÔÔI J
;
ÔÔJ K
}
 
catch
ÒÒ 
(
ÒÒ 
	Exception
ÒÒ 
)
ÒÒ 
{
ÚÚ 
Trace
ÚÚ 
.
ÚÚ 
	WriteLine
ÚÚ 
(
ÚÚ 
$str
ÚÚ 2
+
ÚÚ3 4
	mySetting
ÚÚ5 >
)
ÚÚ> ?
;
ÚÚ? @
}
ÚÚA B
try
ÛÛ 
{
ÙÙ 
	mySetting
ıı 
=
ıı 
$str
ıı %
;
ıı% &
_outBits
ˆˆ 
=
ˆˆ 
(
ˆˆ 
ushort
ˆˆ "
)
ˆˆ" #
rdr
ˆˆ# &
.
ˆˆ& '
GetValue
ˆˆ' /
(
ˆˆ/ 0
	mySetting
ˆˆ0 9
,
ˆˆ9 :
typeof
ˆˆ; A
(
ˆˆA B
ushort
ˆˆB H
)
ˆˆH I
)
ˆˆI J
;
ˆˆJ K
}
˜˜ 
catch
¯¯ 
(
¯¯ 
	Exception
¯¯ 
)
¯¯ 
{
˘˘ 
Trace
˘˘ 
.
˘˘ 
	WriteLine
˘˘ 
(
˘˘ 
$str
˘˘ 2
+
˘˘3 4
	mySetting
˘˘5 >
)
˘˘> ?
;
˘˘? @
}
˘˘A B
try
˙˙ 
{
˚˚ 
	mySetting
¸¸ 
=
¸¸ 
$str
¸¸ $
;
¸¸$ %
_dither
˝˝ 
=
˝˝ 
(
˝˝ 

DitherType
˝˝ %
)
˝˝% &
rdr
˝˝& )
.
˝˝) *
GetValue
˝˝* 2
(
˝˝2 3
	mySetting
˝˝3 <
,
˝˝< =
typeof
˝˝> D
(
˝˝D E
int
˝˝E H
)
˝˝H I
)
˝˝I J
;
˝˝J K
}
˛˛ 
catch
ˇˇ 
(
ˇˇ 
	Exception
ˇˇ 
)
ˇˇ 
{
ÄÄ 
Trace
ÄÄ 
.
ÄÄ 
	WriteLine
ÄÄ 
(
ÄÄ 
$str
ÄÄ 2
+
ÄÄ3 4
	mySetting
ÄÄ5 >
)
ÄÄ> ?
;
ÄÄ? @
}
ÄÄA B
try
ÅÅ 
{
ÇÇ 
	mySetting
ÉÉ 
=
ÉÉ 
$str
ÉÉ $
;
ÉÉ$ %
	_isRawOut
ÑÑ 
=
ÑÑ 
(
ÑÑ 
bool
ÑÑ !
)
ÑÑ! "
rdr
ÑÑ" %
.
ÑÑ% &
GetValue
ÑÑ& .
(
ÑÑ. /
	mySetting
ÑÑ/ 8
,
ÑÑ8 9
typeof
ÑÑ: @
(
ÑÑ@ A
bool
ÑÑA E
)
ÑÑE F
)
ÑÑF G
;
ÑÑG H
}
ÖÖ 
catch
ÜÜ 
(
ÜÜ 
	Exception
ÜÜ 
)
ÜÜ 
{
áá 
Trace
áá 
.
áá 
	WriteLine
áá 
(
áá 
$str
áá 2
+
áá3 4
	mySetting
áá5 >
)
áá> ?
;
áá? @
}
ááA B
try
àà 
{
ââ 
	mySetting
ää 
=
ää 
$str
ää (
;
ää( )
_partitions
ãã 
=
ãã 
(
ãã 
int
ãã "
)
ãã" #
rdr
ãã# &
.
ãã& '
GetValue
ãã' /
(
ãã/ 0
	mySetting
ãã0 9
,
ãã9 :
typeof
ãã; A
(
ããA B
int
ããB E
)
ããE F
)
ããF G
;
ããG H
}
åå 
catch
çç 
(
çç 
	Exception
çç 
)
çç 
{
éé 
Trace
éé 
.
éé 
	WriteLine
éé 
(
éé 
$str
éé 2
+
éé3 4
	mySetting
éé5 >
)
éé> ?
;
éé? @
}
ééA B
try
èè 
{
êê 
	mySetting
ëë 
=
ëë 
$str
ëë (
;
ëë( )
_maxImpulseLength
íí !
=
íí" #
(
íí$ %
int
íí% (
)
íí( )
rdr
íí) ,
.
íí, -
GetValue
íí- 5
(
íí5 6
	mySetting
íí6 ?
,
íí? @
typeof
ííA G
(
ííG H
int
ííH K
)
ííK L
)
ííL M
;
ííM N
}
ìì 
catch
îî 
(
îî 
	Exception
îî 
)
îî 
{
ïï 
Trace
ïï 
.
ïï 
	WriteLine
ïï 
(
ïï 
$str
ïï 2
+
ïï3 4
	mySetting
ïï5 >
)
ïï> ?
;
ïï? @
}
ïïA B
try
ññ 
{
óó 
	mySetting
òò 
=
òò 
$str
òò "
;
òò" #
_tail
ôô 
=
ôô 
(
ôô 
bool
ôô 
)
ôô 
rdr
ôô !
.
ôô! "
GetValue
ôô" *
(
ôô* +
	mySetting
ôô+ 4
,
ôô4 5
typeof
ôô6 <
(
ôô< =
bool
ôô= A
)
ôôA B
)
ôôB C
;
ôôC D
}
öö 
catch
õõ 
(
õõ 
	Exception
õõ 
)
õõ 
{
úú 
Trace
úú 
.
úú 
	WriteLine
úú 
(
úú 
$str
úú 2
+
úú3 4
	mySetting
úú5 >
)
úú> ?
;
úú? @
}
úúA B
try
ùù 
{
ûû 
	mySetting
üü 
=
üü 
$str
üü "
;
üü" #
_slow
†† 
=
†† 
(
†† 
bool
†† 
)
†† 
rdr
†† !
.
††! "
GetValue
††" *
(
††* +
	mySetting
††+ 4
,
††4 5
typeof
††6 <
(
††< =
bool
††= A
)
††A B
)
††B C
;
††C D
}
°° 
catch
¢¢ 
(
¢¢ 
	Exception
¢¢ 
)
¢¢ 
{
££ 
Trace
££ 
.
££ 
	WriteLine
££ 
(
££ 
$str
££ 2
+
££3 4
	mySetting
££5 >
)
££> ?
;
££? @
}
££A B
try
§§ 
{
•• 
	mySetting
ßß 
=
ßß 
$str
ßß $
;
ßß$ %
_soxExe
®® 
=
®® 
(
®® 
string
®® !
)
®®! "
rdr
®®" %
.
®®% &
GetValue
®®& .
(
®®. /
	mySetting
®®/ 8
,
®®8 9
typeof
®®: @
(
®®@ A
string
®®A G
)
®®G H
)
®®H I
;
®®I J
}
©© 
catch
™™ 
(
™™ 
	Exception
™™ 
)
™™ 
{
´´ 
Trace
´´ 
.
´´ 
	WriteLine
´´ 
(
´´ 
$str
´´ 2
+
´´3 4
	mySetting
´´5 >
)
´´> ?
;
´´? @
}
´´A B
try
¨¨ 
{
≠≠ 
	mySetting
ÆÆ 
=
ÆÆ 
$str
ÆÆ $
;
ÆÆ$ %
_soxFmt
ØØ 
=
ØØ 
(
ØØ 
string
ØØ !
)
ØØ! "
rdr
ØØ" %
.
ØØ% &
GetValue
ØØ& .
(
ØØ. /
	mySetting
ØØ/ 8
,
ØØ8 9
typeof
ØØ: @
(
ØØ@ A
string
ØØA G
)
ØØG H
)
ØØH I
;
ØØI J
}
∞∞ 
catch
±± 
(
±± 
	Exception
±± 
)
±± 
{
≤≤ 
Trace
≤≤ 
.
≤≤ 
	WriteLine
≤≤ 
(
≤≤ 
$str
≤≤ 2
+
≤≤3 4
	mySetting
≤≤5 >
)
≤≤> ?
;
≤≤? @
}
≤≤A B
try
≥≥ 
{
¥¥ 
	mySetting
µµ 
=
µµ 
$str
µµ &
;
µµ& '
	_aftenExe
∂∂ 
=
∂∂ 
(
∂∂ 
string
∂∂ #
)
∂∂# $
rdr
∂∂$ '
.
∂∂' (
GetValue
∂∂( 0
(
∂∂0 1
	mySetting
∂∂1 :
,
∂∂: ;
typeof
∂∂< B
(
∂∂B C
string
∂∂C I
)
∂∂I J
)
∂∂J K
;
∂∂K L
}
∑∑ 
catch
∏∏ 
(
∏∏ 
	Exception
∏∏ 
)
∏∏ 
{
ππ 
Trace
ππ 
.
ππ 
	WriteLine
ππ 
(
ππ 
$str
ππ 2
+
ππ3 4
	mySetting
ππ5 >
)
ππ> ?
;
ππ? @
}
ππA B
try
∫∫ 
{
ªª 
	mySetting
ºº 
=
ºº 
$str
ºº &
;
ºº& '
	_aftenFmt
ΩΩ 
=
ΩΩ 
(
ΩΩ 
string
ΩΩ #
)
ΩΩ# $
rdr
ΩΩ$ '
.
ΩΩ' (
GetValue
ΩΩ( 0
(
ΩΩ0 1
	mySetting
ΩΩ1 :
,
ΩΩ: ;
typeof
ΩΩ< B
(
ΩΩB C
string
ΩΩC I
)
ΩΩI J
)
ΩΩJ K
;
ΩΩK L
}
ææ 
catch
øø 
(
øø 
	Exception
øø 
)
øø 
{
¿¿ 
Trace
¿¿ 
.
¿¿ 
	WriteLine
¿¿ 
(
¿¿ 
$str
¿¿ 2
+
¿¿3 4
	mySetting
¿¿5 >
)
¿¿> ?
;
¿¿? @
}
¿¿A B
try
¡¡ 
{
¬¬ 
	mySetting
ƒƒ 
=
ƒƒ 
$str
ƒƒ *
;
ƒƒ* +
_ambiDistance
≈≈ 
=
≈≈ 
(
≈≈  !
double
≈≈! '
)
≈≈' (
rdr
≈≈( +
.
≈≈+ ,
GetValue
≈≈, 4
(
≈≈4 5
	mySetting
≈≈5 >
,
≈≈> ?
typeof
≈≈@ F
(
≈≈F G
double
≈≈G M
)
≈≈M N
)
≈≈N O
;
≈≈O P
}
∆∆ 
catch
«« 
(
«« 
	Exception
«« 
)
«« 
{
»» 
Trace
»» 
.
»» 
	WriteLine
»» 
(
»» 
$str
»» 2
+
»»3 4
	mySetting
»»5 >
)
»»> ?
;
»»? @
}
»»A B
try
…… 
{
   
	mySetting
ÀÀ 
=
ÀÀ 
$str
ÀÀ +
;
ÀÀ+ ,
_ambiShelfFreq
ÃÃ 
=
ÃÃ  
(
ÃÃ! "
double
ÃÃ" (
)
ÃÃ( )
rdr
ÃÃ) ,
.
ÃÃ, -
GetValue
ÃÃ- 5
(
ÃÃ5 6
	mySetting
ÃÃ6 ?
,
ÃÃ? @
typeof
ÃÃA G
(
ÃÃG H
double
ÃÃH N
)
ÃÃN O
)
ÃÃO P
;
ÃÃP Q
}
ÕÕ 
catch
ŒŒ 
(
ŒŒ 
	Exception
ŒŒ 
)
ŒŒ 
{
œœ 
Trace
œœ 
.
œœ 
	WriteLine
œœ 
(
œœ 
$str
œœ 2
+
œœ3 4
	mySetting
œœ5 >
)
œœ> ?
;
œœ? @
}
œœA B
return
–– 
true
–– 
;
–– 
}
““ 	
private
‘‘ 
static
‘‘ 
bool
‘‘ 
LoadConfig2
‘‘ '
(
‘‘' (
)
‘‘( )
{
’’ 	
string
·· 
fileName
·· 
=
·· 
_userID
·· %
.
··% &
Replace
··& -
(
··- .
$char
··. 1
,
··1 2
$char
··3 6
)
··6 7
+
··8 9
$str
··: J
;
··J K
_configFile
‚‚ 
=
‚‚ 
Path
‚‚ 
.
‚‚ 
Combine
‚‚ &
(
‚‚& '
_settingsFolder
‚‚' 6
,
‚‚6 7
fileName
‚‚8 @
)
‚‚@ A
;
‚‚A B
bool
‰‰ 
ok
‰‰ 
=
‰‰ 
false
‰‰ 
;
‰‰ 
if
ÂÂ 
(
ÂÂ 
!
ÂÂ 
System
ÂÂ 
.
ÂÂ 
IO
ÂÂ 
.
ÂÂ 
File
ÂÂ 
.
ÂÂ  
Exists
ÂÂ  &
(
ÂÂ& '
_configFile
ÂÂ' 2
)
ÂÂ2 3
)
ÂÂ3 4
{
ÊÊ 
Trace
ÁÁ 
.
ÁÁ 
	WriteLine
ÁÁ 
(
ÁÁ  
$str
ÁÁ  Y
,
ÁÁY Z
_configFile
ÁÁ[ f
)
ÁÁf g
;
ÁÁg h
}
ËË 
else
ÈÈ 
{
ÍÍ 
ok
ÏÏ 
=
ÏÏ 

ReadConfig
ÏÏ 
(
ÏÏ  
true
ÏÏ  $
)
ÏÏ$ %
;
ÏÏ% &"
StartConfigListening
ÔÔ $
(
ÔÔ$ %
)
ÔÔ% &
;
ÔÔ& '
}
 
System
ÙÙ 
.
ÙÙ 
Configuration
ÙÙ  
.
ÙÙ  !
AppSettingsReader
ÙÙ! 2
rdr
ÙÙ3 6
;
ÙÙ6 7
try
ıı 
{
ˆˆ 
rdr
˜˜ 
=
˜˜ 
new
˜˜ 
System
˜˜  
.
˜˜  !
Configuration
˜˜! .
.
˜˜. /
AppSettingsReader
˜˜/ @
(
˜˜@ A
)
˜˜A B
;
˜˜B C
}
¯¯ 
catch
˘˘ 
(
˘˘ 
	Exception
˘˘ 
e
˘˘ 
)
˘˘ 
{
˙˙ 
Trace
˚˚ 
.
˚˚ 
	WriteLine
˚˚ 
(
˚˚  
$str
˚˚  8
,
˚˚8 9
e
˚˚: ;
.
˚˚; <
Message
˚˚< C
)
˚˚C D
;
˚˚D E
return
¸¸ 
true
¸¸ 
;
¸¸ 
}
˝˝ 
try
˛˛ 
{
ˇˇ 
_gain
ÄÄ 
=
ÄÄ 
(
ÄÄ 
double
ÄÄ 
)
ÄÄ  
rdr
ÄÄ  #
.
ÄÄ# $
GetValue
ÄÄ$ ,
(
ÄÄ, -
$str
ÄÄ- 3
,
ÄÄ3 4
typeof
ÄÄ5 ;
(
ÄÄ; <
double
ÄÄ< B
)
ÄÄB C
)
ÄÄC D
;
ÄÄD E
}
ÅÅ 
catch
ÇÇ 
(
ÇÇ 
	Exception
ÇÇ 
)
ÇÇ 
{
ÇÇ 
}
ÇÇ- .
if
ÑÑ 
(
ÑÑ 
_siggen
ÑÑ 
==
ÑÑ 
null
ÑÑ 
&&
ÑÑ  "
_writer
ÑÑ# *
!=
ÑÑ+ -
null
ÑÑ. 2
&&
ÑÑ3 5
!
ÑÑ6 7
	_isBypass
ÑÑ7 @
)
ÑÑ@ A
{
ÖÖ 
Trace
ÜÜ 
.
ÜÜ 
	WriteLine
ÜÜ 
(
ÜÜ  
$str
ÜÜ  -
,
ÜÜ- .
_gain
ÜÜ/ 4
)
ÜÜ4 5
;
ÜÜ5 6
SetWriterGain
áá 
(
áá 
)
áá 
;
áá  
}
àà 
return
ää 
ok
ää 
;
ää 
}
ãã 	
private
çç 
static
çç 
void
çç 
SetWriterGain
çç )
(
çç) *
)
çç* +
{
éé 	
if
èè 
(
èè 
_writer
èè 
!=
èè 
null
èè 
)
èè  
{
êê 
if
ëë 
(
ëë 
	_isBypass
ëë 
)
ëë 
{
íí 
_writer
ìì 
.
ìì 
Gain
ìì  
=
ìì! "
double
ìì# )
.
ìì) *
NaN
ìì* -
;
ìì- .
for
îî 
(
îî 
ushort
îî 
c
îî  !
=
îî" #
$num
îî$ %
;
îî% &
c
îî' (
<
îî) *
_writer
îî+ 2
.
îî2 3
NumChannels
îî3 >
;
îî> ?
c
îî@ A
++
îîA C
)
îîC D
{
ïï 
_writer
ññ 
.
ññ  
SetChannelGain
ññ  .
(
ññ. /
c
ññ/ 0
,
ññ0 1
double
ññ2 8
.
ññ8 9
NaN
ññ9 <
)
ññ< =
;
ññ= >
}
óó 
}
òò 
else
ôô 
{
öö 
_writer
õõ 
.
õõ 
Gain
õõ  
=
õõ! "
double
õõ# )
.
õõ) *
NaN
õõ* -
;
õõ- .
double
ùù 
g
ùù 
=
ùù 
MathUtil
ùù '
.
ùù' (
gain
ùù( ,
(
ùù, -
_gain
ùù- 2
)
ùù2 3
;
ùù3 4
bool
üü 
flatLeft
üü !
=
üü" #
IsSigGenNonEQL
üü$ 2
(
üü2 3
)
üü3 4
;
üü4 5
bool
†† 
	flatRight
†† "
=
††# $
IsSigGenNonEQR
††% 3
(
††3 4
)
††4 5
;
††5 6
int
§§ 
chL
§§ 
=
§§ 
$num
§§ 
;
§§  
int
•• 
chR
•• 
=
•• 
$num
•• 
;
••  
double
¶¶ 
fracBal
¶¶ "
=
¶¶# $
_balance
¶¶% -
/
¶¶. /
$num
¶¶0 1
;
¶¶1 2
double
ßß 
gainL
ßß  
=
ßß! "
g
ßß# $
;
ßß$ %
double
®® 
gainR
®®  
=
®®! "
g
®®# $
;
®®$ %
if
©© 
(
©© 
_impulseVolumes
©© '
.
©©' (
Count
©©( -
==
©©. 0
$num
©©1 2
)
©©2 3
{
™™ 
gainL
´´ 
=
´´ 
(
´´  !
_impulseVolumes
´´! 0
[
´´0 1
chL
´´1 4
]
´´4 5
==
´´6 8
$num
´´9 :
?
´´; <
g
´´= >
:
´´? @
(
´´A B
g
´´B C
/
´´D E
_impulseVolumes
´´F U
[
´´U V
chL
´´V Y
]
´´Y Z
)
´´Z [
)
´´[ \
;
´´\ ]
gainR
¨¨ 
=
¨¨ 
(
¨¨  !
_impulseVolumes
¨¨! 0
[
¨¨0 1
chL
¨¨1 4
]
¨¨4 5
==
¨¨6 8
$num
¨¨9 :
?
¨¨; <
g
¨¨= >
:
¨¨? @
(
¨¨A B
g
¨¨B C
/
¨¨D E
_impulseVolumes
¨¨F U
[
¨¨U V
chL
¨¨V Y
]
¨¨Y Z
)
¨¨Z [
)
¨¨[ \
;
¨¨\ ]
}
≠≠ 
else
ÆÆ 
if
ÆÆ 
(
ÆÆ 
_impulseVolumes
ÆÆ ,
.
ÆÆ, -
Count
ÆÆ- 2
>=
ÆÆ3 5
$num
ÆÆ6 7
)
ÆÆ7 8
{
ØØ 
gainL
∞∞ 
=
∞∞ 
(
∞∞  !
_impulseVolumes
∞∞! 0
[
∞∞0 1
chL
∞∞1 4
]
∞∞4 5
==
∞∞6 8
$num
∞∞9 :
?
∞∞; <
g
∞∞= >
:
∞∞? @
(
∞∞A B
g
∞∞B C
/
∞∞D E
_impulseVolumes
∞∞F U
[
∞∞U V
chL
∞∞V Y
]
∞∞Y Z
)
∞∞Z [
)
∞∞[ \
;
∞∞\ ]
gainR
±± 
=
±± 
(
±±  !
_impulseVolumes
±±! 0
[
±±0 1
chR
±±1 4
]
±±4 5
==
±±6 8
$num
±±9 :
?
±±; <
g
±±= >
:
±±? @
(
±±A B
g
±±B C
/
±±D E
_impulseVolumes
±±F U
[
±±U V
chR
±±V Y
]
±±Y Z
)
±±Z [
)
±±[ \
;
±±\ ]
}
≤≤ 
gainL
≥≥ 
*=
≥≥ 
MathUtil
≥≥ %
.
≥≥% &
gain
≥≥& *
(
≥≥* +
-
≥≥+ ,
fracBal
≥≥, 3
)
≥≥3 4
;
≥≥4 5
gainR
¥¥ 
*=
¥¥ 
MathUtil
¥¥ %
.
¥¥% &
gain
¥¥& *
(
¥¥* +
fracBal
¥¥+ 2
)
¥¥2 3
;
¥¥3 4
_writer
∂∂ 
.
∂∂ 
SetChannelGain
∂∂ *
(
∂∂* +
$num
∂∂+ ,
,
∂∂, -
flatLeft
∂∂. 6
?
∂∂7 8
double
∂∂9 ?
.
∂∂? @
NaN
∂∂@ C
:
∂∂D E
gainL
∂∂F K
)
∂∂K L
;
∂∂L M
if
∑∑ 
(
∑∑ 
_writer
∑∑ 
.
∑∑  
NumChannels
∑∑  +
>
∑∑, -
$num
∑∑. /
)
∑∑/ 0
{
∏∏ 
_writer
ππ 
.
ππ  
SetChannelGain
ππ  .
(
ππ. /
$num
ππ/ 0
,
ππ0 1
	flatRight
ππ2 ;
?
ππ< =
double
ππ> D
.
ππD E
NaN
ππE H
:
ππI J
gainR
ππK P
)
ππP Q
;
ππQ R
}
∫∫ 
}
ªª 
}
ºº 
}
ΩΩ 	
private
øø 
static
øø 
bool
øø 

ReadConfig
øø &
(
øø& '
bool
øø' +
	firstTime
øø, 5
)
øø5 6
{
¿¿ 	
try
¬¬ 
{
√√ 
return
ƒƒ 
TryReadConfig
ƒƒ $
(
ƒƒ$ %
	firstTime
ƒƒ% .
)
ƒƒ. /
;
ƒƒ/ 0
}
≈≈ 
catch
∆∆ 
(
∆∆ 
	Exception
∆∆ 
e
∆∆ 
)
∆∆ 
{
«« 
Trace
»» 
.
»» 
	WriteLine
»» 
(
»»  
$str
»»  ?
,
»»? @
	CleanPath
»»A J
(
»»J K
_settingsFolder
»»K Z
,
»»Z [
_configFile
»»\ g
)
»»g h
,
»»h i
e
»»j k
.
»»k l
Message
»»l s
)
»»s t
;
»»t u
return
…… 
false
…… 
;
…… 
}
   
}
ÀÀ 	
static
ÕÕ 
string
ÕÕ 
nodeText
ÕÕ 
(
ÕÕ 
XmlDocument
ÕÕ *
doc
ÕÕ+ .
,
ÕÕ. /
string
ÕÕ0 6
xpath
ÕÕ7 <
)
ÕÕ< =
{
ŒŒ 	
XmlNode
œœ 
node
œœ 
=
œœ 
doc
œœ 
.
œœ 
SelectSingleNode
œœ /
(
œœ/ 0
xpath
œœ0 5
)
œœ5 6
;
œœ6 7
return
–– 
(
–– 
node
–– 
==
–– 
null
––  
)
––  !
?
––" #
null
––$ (
:
––) *
node
––+ /
.
––/ 0
	InnerText
––0 9
;
––9 :
}
—— 	
static
”” 
string
”” 
	nodeValue
”” 
(
””  
XmlDocument
””  +
doc
””, /
,
””/ 0
string
””1 7
xpath
””8 =
)
””= >
{
‘‘ 	
XmlNode
’’ 
node
’’ 
=
’’ 
doc
’’ 
.
’’ 
SelectSingleNode
’’ /
(
’’/ 0
xpath
’’0 5
)
’’5 6
;
’’6 7
return
÷÷ 
(
÷÷ 
node
÷÷ 
==
÷÷ 
null
÷÷  
)
÷÷  !
?
÷÷" #
null
÷÷$ (
:
÷÷) *
node
÷÷+ /
.
÷÷/ 0
Value
÷÷0 5
;
÷÷5 6
}
◊◊ 	
static
ŸŸ 
string
ŸŸ 
nodeValueUpper
ŸŸ $
(
ŸŸ$ %
XmlDocument
ŸŸ% 0
doc
ŸŸ1 4
,
ŸŸ4 5
string
ŸŸ6 <
xpath
ŸŸ= B
)
ŸŸB C
{
⁄⁄ 	
XmlNode
€€ 
node
€€ 
=
€€ 
doc
€€ 
.
€€ 
SelectSingleNode
€€ /
(
€€/ 0
xpath
€€0 5
)
€€5 6
;
€€6 7
return
‹‹ 
(
‹‹ 
node
‹‹ 
==
‹‹ 
null
‹‹  
)
‹‹  !
?
‹‹" #
null
‹‹$ (
:
‹‹) *
node
‹‹+ /
.
‹‹/ 0
Value
‹‹0 5
.
‹‹5 6
ToUpperInvariant
‹‹6 F
(
‹‹F G
)
‹‹G H
;
‹‹H I
}
›› 	
static
ﬂﬂ 
int
ﬂﬂ 
nodeValueInt
ﬂﬂ 
(
ﬂﬂ  
XmlDocument
ﬂﬂ  +
doc
ﬂﬂ, /
,
ﬂﬂ/ 0
string
ﬂﬂ1 7
xpath
ﬂﬂ8 =
)
ﬂﬂ= >
{
‡‡ 	
XmlNode
·· 
node
·· 
=
·· 
doc
·· 
.
·· 
SelectSingleNode
·· /
(
··/ 0
xpath
··0 5
)
··5 6
;
··6 7
return
‚‚ 
(
‚‚ 
node
‚‚ 
==
‚‚ 
null
‚‚  
)
‚‚  !
?
‚‚" #
$num
‚‚$ %
:
‚‚& '
int
‚‚( +
.
‚‚+ ,
Parse
‚‚, 1
(
‚‚1 2
node
‚‚2 6
.
‚‚6 7
Value
‚‚7 <
,
‚‚< =
CultureInfo
‚‚> I
.
‚‚I J
InvariantCulture
‚‚J Z
)
‚‚Z [
;
‚‚[ \
}
„„ 	
static
ÂÂ 
double
ÂÂ 
nodeValueDouble
ÂÂ %
(
ÂÂ% &
XmlDocument
ÂÂ& 1
doc
ÂÂ2 5
,
ÂÂ5 6
string
ÂÂ7 =
xpath
ÂÂ> C
)
ÂÂC D
{
ÊÊ 	
XmlNode
ÁÁ 
node
ÁÁ 
=
ÁÁ 
doc
ÁÁ 
.
ÁÁ 
SelectSingleNode
ÁÁ /
(
ÁÁ/ 0
xpath
ÁÁ0 5
)
ÁÁ5 6
;
ÁÁ6 7
return
ËË 
(
ËË 
node
ËË 
==
ËË 
null
ËË  
)
ËË  !
?
ËË" #
$num
ËË$ %
:
ËË& '
double
ËË( .
.
ËË. /
Parse
ËË/ 4
(
ËË4 5
node
ËË5 9
.
ËË9 :
Value
ËË: ?
,
ËË? @
CultureInfo
ËËA L
.
ËËL M
InvariantCulture
ËËM ]
)
ËË] ^
;
ËË^ _
}
ÈÈ 	
static
ÎÎ 
bool
ÎÎ 
nodeValueBool
ÎÎ !
(
ÎÎ! "
XmlDocument
ÎÎ" -
doc
ÎÎ. 1
,
ÎÎ1 2
string
ÎÎ3 9
xpath
ÎÎ: ?
)
ÎÎ? @
{
ÏÏ 	
XmlNode
ÌÌ 
node
ÌÌ 
=
ÌÌ 
doc
ÌÌ 
.
ÌÌ 
SelectSingleNode
ÌÌ /
(
ÌÌ/ 0
xpath
ÌÌ0 5
)
ÌÌ5 6
;
ÌÌ6 7
if
ÓÓ 
(
ÓÓ 
node
ÓÓ 
==
ÓÓ 
null
ÓÓ 
)
ÓÓ 
{
ÔÔ 
return
 
false
 
;
 
}
ÒÒ 
try
ÚÚ 
{
ÛÛ 
return
ÙÙ 
bool
ÙÙ 
.
ÙÙ 
Parse
ÙÙ !
(
ÙÙ! "
node
ÙÙ" &
.
ÙÙ& '
Value
ÙÙ' ,
)
ÙÙ, -
;
ÙÙ- .
}
ıı 
catch
ˆˆ 
(
ˆˆ 
	Exception
ˆˆ 
)
ˆˆ 
{
ˆˆ 
}
ˆˆ  !
return
˜˜ 
false
˜˜ 
;
˜˜ 
}
¯¯ 	
static
˛˛ 
double
˛˛ !
nodeValuePercentage
˛˛ )
(
˛˛) *
XmlDocument
˛˛* 5
doc
˛˛6 9
,
˛˛9 :
string
˛˛; A
xpath
˛˛B G
,
˛˛G H
double
˛˛I O
defaultValue
˛˛P \
)
˛˛\ ]
{
ˇˇ 	
double
Ä	Ä	 
val
Ä	Ä	 
=
Ä	Ä	 
defaultValue
Ä	Ä	 %
;
Ä	Ä	% &
XmlNode
Å	Å	 
node
Å	Å	 
=
Å	Å	 
doc
Å	Å	 
.
Å	Å	 
SelectSingleNode
Å	Å	 /
(
Å	Å	/ 0
xpath
Å	Å	0 5
)
Å	Å	5 6
;
Å	Å	6 7
if
Ç	Ç	 
(
Ç	Ç	 
node
Ç	Ç	 
!=
Ç	Ç	 
null
Ç	Ç	 
)
Ç	Ç	 
{
É	É	 
try
Ñ	Ñ	 
{
Ö	Ö	 
string
Ü	Ü	 
s
Ü	Ü	 
=
Ü	Ü	 
node
Ü	Ü	 #
.
Ü	Ü	# $
	InnerText
Ü	Ü	$ -
;
Ü	Ü	- .
if
á	á	 
(
á	á	 
s
á	á	 
.
á	á	 
Contains
á	á	 "
(
á	á	" #
$str
á	á	# &
)
á	á	& '
)
á	á	' (
{
à	à	 
s
â	â	 
=
â	â	 
s
â	â	 
.
â	â	 
Remove
â	â	 $
(
â	â	$ %
s
â	â	% &
.
â	â	& '
IndexOf
â	â	' .
(
â	â	. /
$char
â	â	/ 2
)
â	â	2 3
)
â	â	3 4
;
â	â	4 5
val
ä	ä	 
=
ä	ä	 
double
ä	ä	 $
.
ä	ä	$ %
Parse
ä	ä	% *
(
ä	ä	* +
s
ä	ä	+ ,
,
ä	ä	, -
CultureInfo
ä	ä	. 9
.
ä	ä	9 :
InvariantCulture
ä	ä	: J
)
ä	ä	J K
;
ä	ä	K L
}
ã	ã	 
else
å	å	 
{
ç	ç	 
val
é	é	 
=
é	é	 
double
é	é	 $
.
é	é	$ %
Parse
é	é	% *
(
é	é	* +
s
é	é	+ ,
,
é	é	, -
CultureInfo
é	é	. 9
.
é	é	9 :
InvariantCulture
é	é	: J
)
é	é	J K
*
é	é	L M
$num
é	é	N P
;
é	é	P Q
}
è	è	 
}
ê	ê	 
catch
ë	ë	 
(
ë	ë	 
	Exception
ë	ë	  
)
ë	ë	  !
{
ë	ë	" #
}
ë	ë	$ %
}
í	í	 
return
ì	ì	 
val
ì	ì	 
;
ì	ì	 
}
î	î	 	
static
ó	ó	 
bool
ó	ó	 
TryReadConfig
ó	ó	 !
(
ó	ó	! "
bool
ó	ó	" &
	firstTime
ó	ó	' 0
)
ó	ó	0 1
{
ò	ò	 	
lock
ö	ö	 
(
ö	ö	 
_lockReadConfig
ö	ö	 !
)
ö	ö	! "
{
õ	õ	 
XmlNode
ú	ú	 
node
ú	ú	 
;
ú	ú	 
_configDocument
ù	ù	 
.
ù	ù	  
Load
ù	ù	  $
(
ù	ù	$ %
_configFile
ù	ù	% 0
)
ù	ù	0 1
;
ù	ù	1 2
double
û	û	 
_width
û	û	 
;
û	û	 
int
ü	ü	 
oldDepth
ü	ü	 
=
ü	ü	 
_depth
ü	ü	 %
;
ü	ü	% &
string
†	†	 
oldImpulsePath
†	†	 %
=
†	†	& '
_impulsePath
†	†	( 4
;
†	†	4 5
int
°	°	 
oldBands
°	°	 
=
°	°	 
_eqBands
°	°	 '
;
°	°	' (
double
¢	¢	 
oldLoudness
¢	¢	 "
=
¢	¢	# $
_eqLoudness
¢	¢	% 0
;
¢	¢	0 1
double
£	£	 
oldFlatness
£	£	 "
=
£	£	# $
_eqFlatness
£	£	% 0
;
£	£	0 1
string
§	§	 
oldMatrixFilter
§	§	 &
=
§	§	' (
_matrixFilter
§	§	) 6
;
§	§	6 7
string
•	•	 
oldBFormatFilter
•	•	 '
=
•	•	( )
_bformatFilter
•	•	* 8
;
•	•	8 9
FilterProfile
¶	¶	 
	oldValues
¶	¶	 '
=
¶	¶	( )
new
¶	¶	* -
FilterProfile
¶	¶	. ;
(
¶	¶	; <
	_eqValues
¶	¶	< E
)
¶	¶	E F
;
¶	¶	F G
	_isBypass
®	®	 
=
®	®	 
nodeValueBool
®	®	 )
(
®	®	) *
_configDocument
®	®	* 9
,
®	®	9 :
$str
®	®	; ]
)
®	®	] ^
;
®	®	^ _
_siggen
´	´	 
=
´	´	 
null
´	´	 
;
´	´	 
node
¨	¨	 
=
¨	¨	 
_configDocument
¨	¨	 &
.
¨	¨	& '
SelectSingleNode
¨	¨	' 7
(
¨	¨	7 8
$str
¨	¨	8 b
)
¨	¨	b c
;
¨	¨	c d
if
≠	≠	 
(
≠	≠	 
node
≠	≠	 
!=
≠	≠	 
null
≠	≠	  
)
≠	≠	  !
{
Æ	Æ	 
_siggenUseEQ
Ø	Ø	  
=
Ø	Ø	! "
ChannelFlag
Ø	Ø	# .
.
Ø	Ø	. /
NONE
Ø	Ø	/ 3
;
Ø	Ø	3 4
string
∞	∞	 
useEQ
∞	∞	  
=
∞	∞	! "
	nodeValue
∞	∞	# ,
(
∞	∞	, -
_configDocument
∞	∞	- <
,
∞	∞	< =
$str
∞	∞	> o
)
∞	∞	o p
;
∞	∞	p q
if
±	±	 
(
±	±	 
!
±	±	 
String
±	±	 
.
±	±	  
IsNullOrEmpty
±	±	  -
(
±	±	- .
useEQ
±	±	. 3
)
±	±	3 4
)
±	±	4 5
{
≤	≤	 
switch
≥	≥	 
(
≥	≥	  
useEQ
≥	≥	  %
.
≥	≥	% &
ToUpperInvariant
≥	≥	& 6
(
≥	≥	6 7
)
≥	≥	7 8
)
≥	≥	8 9
{
¥	¥	 
case
µ	µ	  
$str
µ	µ	! $
:
µ	µ	$ %
case
∂	∂	  
$str
∂	∂	! &
:
∂	∂	& '
case
∑	∑	  
$str
∑	∑	! '
:
∑	∑	' (
case
∏	∏	  
$str
∏	∏	! '
:
∏	∏	' (
_siggenUseEQ
π	π	  ,
=
π	π	- .
ChannelFlag
π	π	/ :
.
π	π	: ;
BOTH
π	π	; ?
;
π	π	? @
break
∫	∫	  %
;
∫	∫	% &
case
ª	ª	  
$str
ª	ª	! $
:
ª	ª	$ %
_siggenUseEQ
º	º	  ,
=
º	º	- .
ChannelFlag
º	º	/ :
.
º	º	: ;
LEFT
º	º	; ?
;
º	º	? @
break
Ω	Ω	  %
;
Ω	Ω	% &
case
æ	æ	  
$str
æ	æ	! $
:
æ	æ	$ %
_siggenUseEQ
ø	ø	  ,
=
ø	ø	- .
ChannelFlag
ø	ø	/ :
.
ø	ø	: ;
RIGHT
ø	ø	; @
;
ø	ø	@ A
break
¿	¿	  %
;
¿	¿	% &
}
¡	¡	 
}
¬	¬	 
_siggen
ƒ	ƒ	 
=
ƒ	ƒ	 
nodeValueUpper
ƒ	ƒ	 ,
(
ƒ	ƒ	, -
_configDocument
ƒ	ƒ	- <
,
ƒ	ƒ	< =
$str
ƒ	ƒ	> n
)
ƒ	ƒ	n o
;
ƒ	ƒ	o p
if
≈	≈	 
(
≈	≈	 
_siggen
≈	≈	 
!=
≈	≈	  "
null
≈	≈	# '
)
≈	≈	' (
{
∆	∆	 
switch
«	«	 
(
«	«	  
_siggen
«	«	  '
)
«	«	' (
{
»	»	 
case
…	…	  
$str
…	…	! (
:
…	…	( )

_sigparamA
 	 	  *
=
 	 	+ ,
	nodeValue
 	 	- 6
(
 	 	6 7
_configDocument
 	 	7 F
,
 	 	F G
$str
 	 	H u
)
 	 	u v
;
 	 	v w

_sigparamB
À	À	  *
=
À	À	+ ,
	nodeValue
À	À	- 6
(
À	À	6 7
_configDocument
À	À	7 F
,
À	À	F G
$str
À	À	H u
)
À	À	u v
;
À	À	v w
break
Ã	Ã	  %
;
Ã	Ã	% &
case
Õ	Õ	  
$str
Õ	Õ	! (
:
Õ	Õ	( )

_sigparam1
Œ	Œ	  *
=
Œ	Œ	+ ,
nodeValueInt
Œ	Œ	- 9
(
Œ	Œ	9 :
_configDocument
Œ	Œ	: I
,
Œ	Œ	I J
$str
Œ	Œ	K }
)
Œ	Œ	} ~
;
Œ	Œ	~ 
break
œ	œ	  %
;
œ	œ	% &
case
–	–	  
$str
–	–	! '
:
–	–	' (
case
—	—	  
$str
—	—	! '
:
—	—	' (
case
“	“	  
$str
“	“	! )
:
“	“	) *
case
”	”	  
$str
”	”	! +
:
”	”	+ ,
case
‘	‘	  
$str
‘	‘	! +
:
‘	‘	+ ,
case
’	’	  
$str
’	’	! -
:
’	’	- .
case
÷	÷	  
$str
÷	÷	! +
:
÷	÷	+ ,
case
◊	◊	  
$str
◊	◊	! -
:
◊	◊	- .

_sigparam1
ÿ	ÿ	  *
=
ÿ	ÿ	+ ,
nodeValueInt
ÿ	ÿ	- 9
(
ÿ	ÿ	9 :
_configDocument
ÿ	ÿ	: I
,
ÿ	ÿ	I J
$str
ÿ	ÿ	K {
)
ÿ	ÿ	{ |
;
ÿ	ÿ	| }
break
Ÿ	Ÿ	  %
;
Ÿ	Ÿ	% &
case
⁄	⁄	  
$str
⁄	⁄	! (
:
⁄	⁄	( )
break
€	€	  %
;
€	€	% &
case
‹	‹	  
$str
‹	‹	! '
:
‹	‹	' (

_sigparam1
ﬁ	ﬁ	  *
=
ﬁ	ﬁ	+ ,
$num
ﬁ	ﬁ	- .
;
ﬁ	ﬁ	. /
string
ﬂ	ﬂ	  &
mono
ﬂ	ﬂ	' +
=
ﬂ	ﬂ	, -
	nodeValue
ﬂ	ﬂ	. 7
(
ﬂ	ﬂ	7 8
_configDocument
ﬂ	ﬂ	8 G
,
ﬂ	ﬂ	G H
$str
ﬂ	ﬂ	I y
)
ﬂ	ﬂ	y z
;
ﬂ	ﬂ	z {
if
‡	‡	  "
(
‡	‡	# $
!
‡	‡	$ %
String
‡	‡	% +
.
‡	‡	+ ,
IsNullOrEmpty
‡	‡	, 9
(
‡	‡	9 :
mono
‡	‡	: >
)
‡	‡	> ?
)
‡	‡	? @
{
·	·	  !

_sigparam1
‚	‚	$ .
=
‚	‚	/ 0
bool
‚	‚	1 5
.
‚	‚	5 6
Parse
‚	‚	6 ;
(
‚	‚	; <
mono
‚	‚	< @
)
‚	‚	@ A
?
‚	‚	B C
$num
‚	‚	D E
:
‚	‚	F G
$num
‚	‚	H I
;
‚	‚	I J
}
„	„	  !
break
‰	‰	  %
;
‰	‰	% &
case
Â	Â	  
$str
Â	Â	! 2
:
Â	Â	2 3

_sigparam1
Ê	Ê	  *
=
Ê	Ê	+ ,
nodeValueInt
Ê	Ê	- 9
(
Ê	Ê	9 :
_configDocument
Ê	Ê	: I
,
Ê	Ê	I J
$str
Ê	Ê	K |
)
Ê	Ê	| }
;
Ê	Ê	} ~

_sigparam2
Á	Á	  *
=
Á	Á	+ ,
nodeValueInt
Á	Á	- 9
(
Á	Á	9 :
_configDocument
Á	Á	: I
,
Á	Á	I J
$str
Á	Á	K |
)
Á	Á	| }
;
Á	Á	} ~

_sigparam3
Ë	Ë	  *
=
Ë	Ë	+ ,
nodeValueInt
Ë	Ë	- 9
(
Ë	Ë	9 :
_configDocument
Ë	Ë	: I
,
Ë	Ë	I J
$str
Ë	Ë	K |
)
Ë	Ë	| }
;
Ë	Ë	} ~
break
È	È	  %
;
È	È	% &
case
Í	Í	  
$str
Í	Í	! .
:
Í	Í	. /

_sigparam1
Î	Î	  *
=
Î	Î	+ ,
nodeValueInt
Î	Î	- 9
(
Î	Î	9 :
_configDocument
Î	Î	: I
,
Î	Î	I J
$str
Î	Î	K {
)
Î	Î	{ |
;
Î	Î	| }

_sigparam2
Ï	Ï	  *
=
Ï	Ï	+ ,
nodeValueInt
Ï	Ï	- 9
(
Ï	Ï	9 :
_configDocument
Ï	Ï	: I
,
Ï	Ï	I J
$str
Ï	Ï	K }
)
Ï	Ï	} ~
;
Ï	Ï	~ 
break
Ì	Ì	  %
;
Ì	Ì	% &
default
Ó	Ó	 #
:
Ó	Ó	# $
_siggen
Ô	Ô	  '
=
Ô	Ô	( )
null
Ô	Ô	* .
;
Ô	Ô	. /
break
		  %
;
		% &
}
Ò	Ò	 
}
Ú	Ú	 
}
Û	Û	 
node
ˆ	ˆ	 
=
ˆ	ˆ	 
_configDocument
ˆ	ˆ	 &
.
ˆ	ˆ	& '
SelectSingleNode
ˆ	ˆ	' 7
(
ˆ	ˆ	7 8
$str
ˆ	ˆ	8 Y
)
ˆ	ˆ	Y Z
;
ˆ	ˆ	Z [
_impulsePath
˜	˜	 
=
˜	˜	 
node
˜	˜	 #
==
˜	˜	$ &
null
˜	˜	' +
?
˜	˜	, -
$str
˜	˜	. 0
:
˜	˜	1 2
node
˜	˜	3 7
.
˜	˜	7 8
	InnerText
˜	˜	8 A
;
˜	˜	A B
node
˙	˙	 
=
˙	˙	 
_configDocument
˙	˙	 &
.
˙	˙	& '
SelectSingleNode
˙	˙	' 7
(
˙	˙	7 8
$str
˙	˙	8 Y
)
˙	˙	Y Z
;
˙	˙	Z [
_matrixFilter
˚	˚	 
=
˚	˚	 
node
˚	˚	  $
==
˚	˚	% '
null
˚	˚	( ,
?
˚	˚	- .
$str
˚	˚	/ 1
:
˚	˚	2 3
node
˚	˚	4 8
.
˚	˚	8 9
	InnerText
˚	˚	9 B
;
˚	˚	B C
node
˛	˛	 
=
˛	˛	 
_configDocument
˛	˛	 &
.
˛	˛	& '
SelectSingleNode
˛	˛	' 7
(
˛	˛	7 8
$str
˛	˛	8 Z
)
˛	˛	Z [
;
˛	˛	[ \
_bformatFilter
ˇ	ˇ	 
=
ˇ	ˇ	  
node
ˇ	ˇ	! %
==
ˇ	ˇ	& (
null
ˇ	ˇ	) -
?
ˇ	ˇ	. /
$str
ˇ	ˇ	0 2
:
ˇ	ˇ	3 4
node
ˇ	ˇ	5 9
.
ˇ	ˇ	9 :
	InnerText
ˇ	ˇ	: C
;
ˇ	ˇ	C D
node
Å
Å
 
=
Å
Å
 
_configDocument
Å
Å
 &
.
Å
Å
& '
SelectSingleNode
Å
Å
' 7
(
Å
Å
7 8
$str
Å
Å
8 \
)
Å
Å
\ ]
;
Å
Å
] ^
_eqBands
Ç
Ç
 
=
Ç
Ç
 
(
Ç
Ç
 
node
Ç
Ç
  
==
Ç
Ç
! #
null
Ç
Ç
$ (
)
Ç
Ç
( )
?
Ç
Ç
* +
$num
Ç
Ç
, -
:
Ç
Ç
. /
int
Ç
Ç
0 3
.
Ç
Ç
3 4
Parse
Ç
Ç
4 9
(
Ç
Ç
9 :
node
Ç
Ç
: >
.
Ç
Ç
> ?
Value
Ç
Ç
? D
,
Ç
Ç
D E
CultureInfo
Ç
Ç
F Q
.
Ç
Ç
Q R
InvariantCulture
Ç
Ç
R b
)
Ç
Ç
b c
;
Ç
Ç
c d
	_eqValues
Ñ
Ñ
 
.
Ñ
Ñ
 
Clear
Ñ
Ñ
 
(
Ñ
Ñ
  
)
Ñ
Ñ
  !
;
Ñ
Ñ
! "
XmlNodeList
Ö
Ö
 
nodes
Ö
Ö
 !
=
Ö
Ö
" #
_configDocument
Ö
Ö
$ 3
.
Ö
Ö
3 4
SelectNodes
Ö
Ö
4 ?
(
Ö
Ö
? @
$str
Ö
Ö
@ b
)
Ö
Ö
b c
;
Ö
Ö
c d
if
Ü
Ü
 
(
Ü
Ü
 
nodes
Ü
Ü
 
!=
Ü
Ü
 
null
Ü
Ü
 !
)
Ü
Ü
! "
{
á
á
 
foreach
à
à
 
(
à
à
 
XmlNode
à
à
 $
bnode
à
à
% *
in
à
à
+ -
nodes
à
à
. 3
)
à
à
3 4
{
â
â
 
string
ä
ä
 
att
ä
ä
 "
;
ä
ä
" #
att
ã
ã
 
=
ã
ã
 
(
ã
ã
 
(
ã
ã
  

XmlElement
ã
ã
  *
)
ã
ã
* +
bnode
ã
ã
+ 0
)
ã
ã
0 1
.
ã
ã
1 2
GetAttribute
ã
ã
2 >
(
ã
ã
> ?
$str
ã
ã
? E
)
ã
ã
E F
;
ã
ã
F G
double
å
å
 
freq
å
å
 #
=
å
å
$ %
(
å
å
& '
att
å
å
' *
==
å
å
+ -
null
å
å
. 2
)
å
å
2 3
?
å
å
4 5
$num
å
å
6 7
:
å
å
8 9
double
å
å
: @
.
å
å
@ A
Parse
å
å
A F
(
å
å
F G
att
å
å
G J
,
å
å
J K
CultureInfo
å
å
L W
.
å
å
W X
InvariantCulture
å
å
X h
)
å
å
h i
;
å
å
i j
if
ç
ç
 
(
ç
ç
 
freq
ç
ç
  
>=
ç
ç
! #
$num
ç
ç
$ &
&&
ç
ç
' )
freq
ç
ç
* .
<
ç
ç
/ 0
$num
ç
ç
1 6
)
ç
ç
6 7
{
é
é
 
att
è
è
 
=
è
è
  !
(
è
è
" #
(
è
è
# $

XmlElement
è
è
$ .
)
è
è
. /
bnode
è
è
/ 4
)
è
è
4 5
.
è
è
5 6
	InnerText
è
è
6 ?
;
è
è
? @
double
ê
ê
 "
gain
ê
ê
# '
=
ê
ê
( )
(
ê
ê
* +
att
ê
ê
+ .
==
ê
ê
/ 1
null
ê
ê
2 6
)
ê
ê
6 7
?
ê
ê
8 9
$num
ê
ê
: ;
:
ê
ê
< =
double
ê
ê
> D
.
ê
ê
D E
Parse
ê
ê
E J
(
ê
ê
J K
att
ê
ê
K N
,
ê
ê
N O
CultureInfo
ê
ê
P [
.
ê
ê
[ \
InvariantCulture
ê
ê
\ l
)
ê
ê
l m
;
ê
ê
m n
if
ë
ë
 
(
ë
ë
  
gain
ë
ë
  $
<
ë
ë
% &
-
ë
ë
' (
$num
ë
ë
( *
)
ë
ë
* +
gain
ë
ë
, 0
=
ë
ë
1 2
-
ë
ë
3 4
$num
ë
ë
4 6
;
ë
ë
6 7
if
í
í
 
(
í
í
  
gain
í
í
  $
>
í
í
% &
$num
í
í
' )
)
í
í
) *
gain
í
í
+ /
=
í
í
0 1
$num
í
í
2 4
;
í
í
4 5
	_eqValues
ì
ì
 %
.
ì
ì
% &
Add
ì
ì
& )
(
ì
ì
) *
new
ì
ì
* -
FreqGain
ì
ì
. 6
(
ì
ì
6 7
freq
ì
ì
7 ;
,
ì
ì
; <
gain
ì
ì
= A
)
ì
ì
A B
)
ì
ì
B C
;
ì
ì
C D
}
î
î
 
}
ï
ï
 
}
ñ
ñ
 
_eqLoudness
ò
ò
 
=
ò
ò
 !
nodeValuePercentage
ò
ò
 1
(
ò
ò
1 2
_configDocument
ò
ò
2 A
,
ò
ò
A B
$str
ò
ò
C g
,
ò
ò
g h
$num
ò
ò
i j
)
ò
ò
j k
;
ò
ò
k l
_eqFlatness
ö
ö
 
=
ö
ö
 !
nodeValuePercentage
ö
ö
 1
(
ö
ö
1 2
_configDocument
ö
ö
2 A
,
ö
ö
A B
$str
ö
ö
C f
,
ö
ö
f g
$num
ö
ö
h k
)
ö
ö
k l
;
ö
ö
l m
node
ú
ú
 
=
ú
ú
 
_configDocument
ú
ú
 &
.
ú
ú
& '
SelectSingleNode
ú
ú
' 7
(
ú
ú
7 8
$str
ú
ú
8 X
)
ú
ú
X Y
;
ú
ú
Y Z
_width
ù
ù
 
=
ù
ù
 
(
ù
ù
 
node
ù
ù
 
==
ù
ù
 !
null
ù
ù
" &
)
ù
ù
& '
?
ù
ù
( )
$num
ù
ù
* +
:
ù
ù
, -
double
ù
ù
. 4
.
ù
ù
4 5
Parse
ù
ù
5 :
(
ù
ù
: ;
node
ù
ù
; ?
.
ù
ù
? @
	InnerText
ù
ù
@ I
,
ù
ù
I J
CultureInfo
ù
ù
K V
.
ù
ù
V W
InvariantCulture
ù
ù
W g
)
ù
ù
g h
;
ù
ù
h i
double
û
û
 
fracWid
û
û
 
=
û
û
  
_width
û
û
! '
/
û
û
( )
$num
û
û
* +
;
û
û
+ ,
_widthShuffler
ü
ü
 
.
ü
ü
 
	SigmaGain
ü
ü
 (
=
ü
ü
) *
MathUtil
ü
ü
+ 3
.
ü
ü
3 4
gain
ü
ü
4 8
(
ü
ü
8 9
-
ü
ü
9 :
fracWid
ü
ü
: A
)
ü
ü
A B
;
ü
ü
B C
_widthShuffler
†
†
 
.
†
†
 
	DeltaGain
†
†
 (
=
†
†
) *
MathUtil
†
†
+ 3
.
†
†
3 4
gain
†
†
4 8
(
†
†
8 9
fracWid
†
†
9 @
)
†
†
@ A
;
†
†
A B
node
£
£
 
=
£
£
 
_configDocument
£
£
 &
.
£
£
& '
SelectSingleNode
£
£
' 7
(
£
£
7 8
$str
£
£
8 X
)
£
£
X Y
;
£
£
Y Z
_depth
§
§
 
=
§
§
 
(
§
§
 
node
§
§
 
==
§
§
 !
null
§
§
" &
)
§
§
& '
?
§
§
( )
$num
§
§
* +
:
§
§
, -
int
§
§
. 1
.
§
§
1 2
Parse
§
§
2 7
(
§
§
7 8
node
§
§
8 <
.
§
§
< =
	InnerText
§
§
= F
,
§
§
F G
CultureInfo
§
§
H S
.
§
§
S T
InvariantCulture
§
§
T d
)
§
§
d e
;
§
§
e f
node
ß
ß
 
=
ß
ß
 
_configDocument
ß
ß
 &
.
ß
ß
& '
SelectSingleNode
ß
ß
' 7
(
ß
ß
7 8
$str
ß
ß
8 Z
)
ß
ß
Z [
;
ß
ß
[ \
_balance
®
®
 
=
®
®
 
(
®
®
 
node
®
®
  
==
®
®
! #
null
®
®
$ (
)
®
®
( )
?
®
®
* +
$num
®
®
, -
:
®
®
. /
double
®
®
0 6
.
®
®
6 7
Parse
®
®
7 <
(
®
®
< =
node
®
®
= A
.
®
®
A B
	InnerText
®
®
B K
,
®
®
K L
CultureInfo
®
®
M X
.
®
®
X Y
InvariantCulture
®
®
Y i
)
®
®
i j
;
®
®
j k
SetWriterGain
©
©
 
(
©
©
 
)
©
©
 
;
©
©
  
node
´
´
 
=
´
´
 
_configDocument
´
´
 &
.
´
´
& '
SelectSingleNode
´
´
' 7
(
´
´
7 8
$str
´
´
8 W
)
´
´
W X
;
´
´
X Y
_skew
¨
¨
 
=
¨
¨
 
(
¨
¨
 
node
¨
¨
 
==
¨
¨
  
null
¨
¨
! %
)
¨
¨
% &
?
¨
¨
' (
$num
¨
¨
) *
:
¨
¨
+ ,
int
¨
¨
- 0
.
¨
¨
0 1
Parse
¨
¨
1 6
(
¨
¨
6 7
node
¨
¨
7 ;
.
¨
¨
; <
	InnerText
¨
¨
< E
,
¨
¨
E F
CultureInfo
¨
¨
G R
.
¨
¨
R S
InvariantCulture
¨
¨
S c
)
¨
¨
c d
;
¨
¨
d e
_skewSkewer
≠
≠
 
.
≠
≠
 
Skew
≠
≠
  
=
≠
≠
! "
_skew
≠
≠
# (
;
≠
≠
( )
	_ambiType
≤
≤
 
=
≤
≤
 
	nodeValue
≤
≤
 %
(
≤
≤
% &
_configDocument
≤
≤
& 5
,
≤
≤
5 6
$str
≤
≤
7 g
)
≤
≤
g h
;
≤
≤
h i
if
≥
≥
 
(
≥
≥
 
!
≥
≥
 
String
≥
≥
 
.
≥
≥
 
IsNullOrEmpty
≥
≥
 )
(
≥
≥
) *
	_ambiType
≥
≥
* 3
)
≥
≥
3 4
&&
≥
≥
5 7
	_ambiType
≥
≥
8 A
.
≥
≥
A B
ToUpperInvariant
≥
≥
B R
(
≥
≥
R S
)
≥
≥
S T
==
≥
≥
U W
$str
≥
≥
X `
)
≥
≥
` a
{
¥
¥
 
_aftenNeeded
µ
µ
  
=
µ
µ
! "
true
µ
µ
# '
;
µ
µ
' (
}
∂
∂
 
_ambiCardioid
∑
∑
 
=
∑
∑
 
nodeValueDouble
∑
∑
  /
(
∑
∑
/ 0
_configDocument
∑
∑
0 ?
,
∑
∑
? @
$str
∑
∑
A u
)
∑
∑
u v
;
∑
∑
v w
_ambiMicAngle
∏
∏
 
=
∏
∏
 
nodeValueDouble
∏
∏
  /
(
∏
∏
/ 0
_configDocument
∏
∏
0 ?
,
∏
∏
? @
$str
∏
∏
A r
)
∏
∏
r s
;
∏
∏
s t
_ambiRotateX
∫
∫
 
=
∫
∫
 
nodeValueDouble
∫
∫
 .
(
∫
∫
. /
_configDocument
∫
∫
/ >
,
∫
∫
> ?
$str
∫
∫
@ s
)
∫
∫
s t
;
∫
∫
t u
_ambiRotateY
ª
ª
 
=
ª
ª
 
nodeValueDouble
ª
ª
 .
(
ª
ª
. /
_configDocument
ª
ª
/ >
,
ª
ª
> ?
$str
ª
ª
@ s
)
ª
ª
s t
;
ª
ª
t u
_ambiRotateZ
º
º
 
=
º
º
 
nodeValueDouble
º
º
 .
(
º
º
. /
_configDocument
º
º
/ >
,
º
º
> ?
$str
º
º
@ s
)
º
º
s t
;
º
º
t u
_ambiMatrixFile
¿
¿
 
=
¿
¿
  !
nodeText
¿
¿
" *
(
¿
¿
* +
_configDocument
¿
¿
+ :
,
¿
¿
: ;
$str
¿
¿
< l
)
¿
¿
l m
;
¿
¿
m n
if
¬
¬
 
(
¬
¬
 
!
¬
¬
 
	firstTime
¬
¬
 
)
¬
¬
 
{
√
√
 
bool
ƒ
ƒ
 
	eqChanged
ƒ
ƒ
 "
=
ƒ
ƒ
# $
false
ƒ
ƒ
% *
;
ƒ
ƒ
* +
if
≈
≈
 
(
≈
≈
 
(
≈
≈
 
_eqBands
≈
≈
 !
!=
≈
≈
" $
oldBands
≈
≈
% -
)
≈
≈
- .
||
≈
≈
/ 1
(
≈
≈
2 3
_eqLoudness
≈
≈
3 >
!=
≈
≈
? A
oldLoudness
≈
≈
B M
)
≈
≈
M N
||
≈
≈
O Q
(
≈
≈
R S
_eqFlatness
≈
≈
S ^
!=
≈
≈
_ a
oldFlatness
≈
≈
b m
)
≈
≈
m n
)
≈
≈
n o
{
∆
∆
 
	eqChanged
«
«
 !
=
«
«
" #
true
«
«
$ (
;
«
«
( )
}
»
»
 
else
…
…
 
{
 
 
 
for
À
À
 
(
À
À
 
int
À
À
  
n
À
À
! "
=
À
À
# $
$num
À
À
% &
;
À
À
& '
n
À
À
( )
<
À
À
* +
	_eqValues
À
À
, 5
.
À
À
5 6
Count
À
À
6 ;
;
À
À
; <
n
À
À
= >
++
À
À
> @
)
À
À
@ A
{
Ã
Ã
 
if
Œ
Œ
 
(
Œ
Œ
  
	_eqValues
Œ
Œ
  )
[
Œ
Œ
) *
n
Œ
Œ
* +
]
Œ
Œ
+ ,
.
Œ
Œ
, -
Gain
Œ
Œ
- 1
!=
Œ
Œ
2 4
	oldValues
Œ
Œ
5 >
[
Œ
Œ
> ?
n
Œ
Œ
? @
]
Œ
Œ
@ A
.
Œ
Œ
A B
Gain
Œ
Œ
B F
)
Œ
Œ
F G
{
œ
œ
 
	eqChanged
–
–
  )
=
–
–
* +
true
–
–
, 0
;
–
–
0 1
break
—
—
  %
;
—
—
% &
}
“
“
 
}
”
”
 
}
‘
‘
 
if
’
’
 
(
’
’
 
	eqChanged
’
’
 !
||
’
’
" $
(
’
’
% &
oldImpulsePath
’
’
& 4
!=
’
’
5 7
_impulsePath
’
’
8 D
)
’
’
D E
)
’
’
E F
{
÷
÷
 
LoadImpulse
ÿ
ÿ
 #
(
ÿ
ÿ
# $
)
ÿ
ÿ
$ %
;
ÿ
ÿ
% &
}
Ÿ
Ÿ
 
if
⁄
⁄
 
(
⁄
⁄
 
(
⁄
⁄
 
oldMatrixFilter
⁄
⁄
 (
!=
⁄
⁄
) +
_matrixFilter
⁄
⁄
, 9
)
⁄
⁄
9 :
||
⁄
⁄
; =
(
⁄
⁄
> ?
_depth
⁄
⁄
? E
!=
⁄
⁄
F H
oldDepth
⁄
⁄
I Q
)
⁄
⁄
Q R
)
⁄
⁄
R S
{
€
€
 
LoadMatrixFilter
‹
‹
 (
(
‹
‹
( )
)
‹
‹
) *
;
‹
‹
* +
}
›
›
 
if
ﬁ
ﬁ
 
(
ﬁ
ﬁ
 
oldBFormatFilter
ﬁ
ﬁ
 (
!=
ﬁ
ﬁ
) +
_bformatFilter
ﬁ
ﬁ
, :
)
ﬁ
ﬁ
: ;
{
ﬂ
ﬂ
 
LoadBFormatFilter
‡
‡
 )
(
‡
‡
) *
)
‡
‡
* +
;
‡
‡
+ ,
}
·
·
 
}
‚
‚
 
return
„
„
 
true
„
„
 
;
„
„
 
}
‰
‰
 
}
Â
Â
 	
static
Í
Í
 
	ISoundObj
Í
Í
 
AftenProcess
Í
Í
 %
(
Í
Í
% &
	ISoundObj
Í
Í
& /
input
Í
Í
0 5
)
Í
Í
5 6
{
Î
Î
 	
string
Ì
Ì
 
exeName
Ì
Ì
 
=
Ì
Ì
 
	_aftenExe
Ì
Ì
 &
;
Ì
Ì
& '
if
Ó
Ó
 
(
Ó
Ó
 
File
Ó
Ó
 
.
Ó
Ó
 
Exists
Ó
Ó
 
(
Ó
Ó
 
Path
Ó
Ó
  
.
Ó
Ó
  !
Combine
Ó
Ó
! (
(
Ó
Ó
( )
_pluginFolder
Ó
Ó
) 6
,
Ó
Ó
6 7
	_aftenExe
Ó
Ó
8 A
+
Ó
Ó
B C
$str
Ó
Ó
D J
)
Ó
Ó
J K
)
Ó
Ó
K L
)
Ó
Ó
L M
{
Ô
Ô
 
exeName


 
=


 
$str


 
+


  
Path


! %
.


% &
Combine


& -
(


- .
_pluginFolder


. ;
,


; <
	_aftenExe


= F
+


G H
$str


I O
)


O P
+


Q R
$str


S W
;


W X
}
Ò
Ò
 
else
Ú
Ú
 
if
Ú
Ú
 
(
Ú
Ú
 
File
Ú
Ú
 
.
Ú
Ú
 
Exists
Ú
Ú
  
(
Ú
Ú
  !
Path
Ú
Ú
! %
.
Ú
Ú
% &
Combine
Ú
Ú
& -
(
Ú
Ú
- .
_pluginFolder
Ú
Ú
. ;
,
Ú
Ú
; <
	_aftenExe
Ú
Ú
= F
)
Ú
Ú
F G
)
Ú
Ú
G H
)
Ú
Ú
H I
{
Û
Û
 
exeName
Ù
Ù
 
=
Ù
Ù
 
Path
Ù
Ù
 
.
Ù
Ù
 
Combine
Ù
Ù
 &
(
Ù
Ù
& '
_pluginFolder
Ù
Ù
' 4
,
Ù
Ù
4 5
	_aftenExe
Ù
Ù
6 ?
)
Ù
Ù
? @
;
Ù
Ù
@ A
}
ı
ı
 "
SPDIFWrappedExternal
˜
˜
  
aften
˜
˜
! &
=
˜
˜
' (
new
˜
˜
) ,"
SPDIFWrappedExternal
˜
˜
- A
(
˜
˜
A B
exeName
˜
˜
B I
,
˜
˜
I J
	_aftenFmt
˜
˜
K T
)
˜
˜
T U
;
˜
˜
U V
aften
¯
¯
 
.
¯
¯
 
Input
¯
¯
 
=
¯
¯
 
input
¯
¯
 
;
¯
¯
  
aften
˘
˘
 
.
˘
˘
 
Dither
˘
˘
 
=
˘
˘
 
_dither
˘
˘
 "
;
˘
˘
" #
aften
˙
˙
 
.
˙
˙
 
Format
˙
˙
 
=
˙
˙
 

WaveFormat
˙
˙
 %
.
˙
˙
% &
PCM
˙
˙
& )
;
˙
˙
) *
aften
˚
˚
 
.
˚
˚
 
BitsPerSample
˚
˚
 
=
˚
˚
  !
$num
˚
˚
" $
;
˚
˚
$ %
return
˛
˛
 
aften
˛
˛
 
;
˛
˛
 
}
ˇ
ˇ
 	
static
ÇÇ 
void
ÇÇ 
LoadImpulse
ÇÇ 
(
ÇÇ  
)
ÇÇ  !
{
ÉÉ 	
DateTime
ÑÑ 
dtStart
ÑÑ 
=
ÑÑ 
DateTime
ÑÑ '
.
ÑÑ' (
Now
ÑÑ( +
;
ÑÑ+ ,
string
ÖÖ 
theImpulsePath
ÖÖ !
=
ÖÖ" #
null
ÖÖ$ (
;
ÖÖ( )
string
ÜÜ 
theEQImpulseName
ÜÜ #
=
ÜÜ$ %
null
ÜÜ& *
;
ÜÜ* +
	ISoundObj
áá 
main
áá 
=
áá 
GetMainImpulse
áá +
(
áá+ ,
out
áá, /
theImpulsePath
áá0 >
)
áá> ?
;
áá? @
uint
àà 
sr
àà 
=
àà 
(
àà 
main
àà 
==
àà 
null
àà #
?
àà$ %
_inputSampleRate
àà& 6
:
àà7 8
main
àà9 =
.
àà= >

SampleRate
àà> H
)
ààH I
;
ààI J
if
ââ 
(
ââ 
sr
ââ 
==
ââ 
$num
ââ 
)
ââ 
{
ää 
if
ãã 
(
ãã 
_debug
ãã 
)
ãã 
{
ãã 
Trace
ãã #
.
ãã# $
	WriteLine
ãã$ -
(
ãã- .
$str
ãã. E
)
ããE F
;
ããF G
}
ããH I
sr
åå 
=
åå 
$num
åå 
;
åå 
}
çç 
	ISoundObj
éé 
eq
éé 
=
éé 
GetEQImpulse
éé '
(
éé' (
main
éé( ,
,
éé, -
sr
éé. 0
,
éé0 1
out
éé2 5
theEQImpulseName
éé6 F
)
ééF G
;
ééG H
	ISoundObj
èè 
combinedFilter
èè $
=
èè% &
null
èè' +
;
èè+ ,
if
ëë 
(
ëë 
main
ëë 
==
ëë 
null
ëë 
&&
ëë 
eq
ëë  "
!=
ëë# %
null
ëë& *
)
ëë* +
{
íí 
combinedFilter
ìì 
=
ìì  
eq
ìì! #
;
ìì# $
}
îî 
else
ïï 
if
ïï 
(
ïï 
main
ïï 
!=
ïï 
null
ïï !
&&
ïï" $
eq
ïï% '
==
ïï( *
null
ïï+ /
)
ïï/ 0
{
ññ 
combinedFilter
óó 
=
óó  
main
óó! %
;
óó% &
}
òò 
else
ôô 
if
ôô 
(
ôô 
main
ôô 
!=
ôô 
null
ôô !
&&
ôô" $
eq
ôô% '
!=
ôô( *
null
ôô+ /
)
ôô/ 0
{
öö 
string
úú 

tempString
úú !
=
úú" #
theEQImpulseName
úú$ 4
+
úú5 6
$str
úú7 :
+
úú; <
theImpulsePath
úú= K
;
úúK L
string
ùù 

filterName
ùù !
=
ùù" #
$str
ùù$ (
+
ùù) *

tempString
ùù+ 5
.
ùù5 6
GetHashCode
ùù6 A
(
ùùA B
)
ùùB C
.
ùùC D
ToString
ùùD L
(
ùùL M
$str
ùùM R
)
ùùR S
.
ùùS T
ToUpperInvariant
ùùT d
(
ùùd e
)
ùùe f
;
ùùf g
string
ûû 

filterFile
ûû !
=
ûû" #
Path
ûû$ (
.
ûû( )
Combine
ûû) 0
(
ûû0 1
_tempFolder
ûû1 <
,
ûû< =

filterName
ûû> H
+
ûûI J
$str
ûûK T
)
ûûT U
;
ûûU V
if
üü 
(
üü 
_debug
üü 
)
üü 
{
†† 
Trace
°° 
.
°° 
	WriteLine
°° #
(
°°# $

filterName
°°$ .
)
°°. /
;
°°/ 0
}
¢¢ 
if
££ 
(
££ 
File
££ 
.
££ 
Exists
££ 
(
££  

filterFile
££  *
)
££* +
)
££+ ,
{
§§ 
try
•• 
{
¶¶ 
combinedFilter
®® &
=
®®' (
new
®®) ,

WaveReader
®®- 7
(
®®7 8

filterFile
®®8 B
)
®®B C
;
®®C D
}
©© 
catch
™™ 
(
™™ 
	Exception
™™ $
e
™™% &
)
™™& '
{
´´ 
if
¨¨ 
(
¨¨ 
_debug
¨¨ "
)
¨¨" #
{
≠≠ 
Trace
ÆÆ !
.
ÆÆ! "
	WriteLine
ÆÆ" +
(
ÆÆ+ ,
$str
ÆÆ, <
+
ÆÆ= >
e
ÆÆ? @
.
ÆÆ@ A
Message
ÆÆA H
)
ÆÆH I
;
ÆÆI J
}
ØØ 
}
∞∞ 
}
±± 
if
≥≥ 
(
≥≥ 
combinedFilter
≥≥ "
==
≥≥# %
null
≥≥& *
)
≥≥* +
{
¥¥ 
FastConvolver
∑∑ !
temp
∑∑" &
=
∑∑' (
new
∑∑) ,
FastConvolver
∑∑- :
(
∑∑: ;
)
∑∑; <
;
∑∑< =
temp
∏∏ 
.
∏∏ 

partitions
∏∏ #
=
∏∏$ %
$num
∏∏& '
;
∏∏' (
temp
ππ 
.
ππ 
impulse
ππ  
=
ππ! "
eq
ππ# %
;
ππ% &
temp
∫∫ 
.
∫∫ 
Input
∫∫ 
=
∫∫  
main
∫∫! %
;
∫∫% &
combinedFilter
ªª "
=
ªª# $
temp
ªª% )
;
ªª) *
try
ΩΩ 
{
ææ 
temp
¿¿ 
.
¿¿ 
Reset
¿¿ "
(
¿¿" #
)
¿¿# $
;
¿¿$ %

WaveWriter
¡¡ "

tempWriter
¡¡# -
=
¡¡. /
new
¡¡0 3

WaveWriter
¡¡4 >
(
¡¡> ?

filterFile
¡¡? I
)
¡¡I J
;
¡¡J K

tempWriter
¬¬ "
.
¬¬" #
Format
¬¬# )
=
¬¬* +

WaveFormat
¬¬, 6
.
¬¬6 7

IEEE_FLOAT
¬¬7 A
;
¬¬A B

tempWriter
√√ "
.
√√" #
BitsPerSample
√√# 0
=
√√1 2
$num
√√3 5
;
√√5 6

tempWriter
ƒƒ "
.
ƒƒ" #
Input
ƒƒ# (
=
ƒƒ) *
temp
ƒƒ+ /
;
ƒƒ/ 0

tempWriter
≈≈ "
.
≈≈" #
Run
≈≈# &
(
≈≈& '
)
≈≈' (
;
≈≈( )

tempWriter
∆∆ "
.
∆∆" #
Close
∆∆# (
(
∆∆( )
)
∆∆) *
;
∆∆* +
if
»» 
(
»» 
_debug
»» "
)
»»" #
{
…… 
temp
ÀÀ  
.
ÀÀ  !
Reset
ÀÀ! &
(
ÀÀ& '
)
ÀÀ' (
;
ÀÀ( )

tempWriter
ÃÃ &
=
ÃÃ' (
new
ÃÃ) ,

WaveWriter
ÃÃ- 7
(
ÃÃ7 8

filterFile
ÃÃ8 B
+
ÃÃC D
$str
ÃÃE K
)
ÃÃK L
;
ÃÃL M

tempWriter
ÕÕ &
.
ÕÕ& '
Format
ÕÕ' -
=
ÕÕ. /

WaveFormat
ÕÕ0 :
.
ÕÕ: ;
PCM
ÕÕ; >
;
ÕÕ> ?

tempWriter
ŒŒ &
.
ŒŒ& '
BitsPerSample
ŒŒ' 4
=
ŒŒ5 6
$num
ŒŒ7 9
;
ŒŒ9 :

tempWriter
œœ &
.
œœ& '
Gain
œœ' +
=
œœ, -
$num
œœ. 1
;
œœ1 2

tempWriter
–– &
.
––& '
Dither
––' -
=
––. /

DitherType
––0 :
.
––: ;
NONE
––; ?
;
––? @

tempWriter
—— &
.
——& '
Input
——' ,
=
——- .
temp
——/ 3
;
——3 4

tempWriter
““ &
.
““& '
Run
““' *
(
““* +
)
““+ ,
;
““, -

tempWriter
”” &
.
””& '
Close
””' ,
(
””, -
)
””- .
;
””. /
}
‘‘ 
}
’’ 
catch
÷÷ 
(
÷÷ 
	Exception
÷÷ $
e
÷÷% &
)
÷÷& '
{
◊◊ 
if
ÿÿ 
(
ÿÿ 
_debug
ÿÿ "
)
ÿÿ" #
{
ŸŸ 
Trace
⁄⁄ !
.
⁄⁄! "
	WriteLine
⁄⁄" +
(
⁄⁄+ ,
$str
⁄⁄, <
+
⁄⁄= >
e
⁄⁄? @
.
⁄⁄@ A
Message
⁄⁄A H
)
⁄⁄H I
;
⁄⁄I J
}
€€ 
}
‹‹ 
}
›› 
}
ﬁﬁ 
_MainConvolver
‡‡ 
.
‡‡ 
impulse
‡‡ "
=
‡‡# $
combinedFilter
‡‡% 3
;
‡‡3 4
if
‚‚ 
(
‚‚ 
combinedFilter
‚‚ 
!=
‚‚ !
null
‚‚" &
)
‚‚& '
{
„„ 
_impulseVolumes
ÂÂ 
.
ÂÂ  
Clear
ÂÂ  %
(
ÂÂ% &
)
ÂÂ& '
;
ÂÂ' (
for
ÊÊ 
(
ÊÊ 
ushort
ÊÊ 
j
ÊÊ 
=
ÊÊ 
$num
ÊÊ  !
;
ÊÊ! "
j
ÊÊ# $
<
ÊÊ% &
combinedFilter
ÊÊ' 5
.
ÊÊ5 6
NumChannels
ÊÊ6 A
;
ÊÊA B
j
ÊÊC D
++
ÊÊD F
)
ÊÊF G
{
ÁÁ 
double
ËË 
v
ËË 
=
ËË 
Loudness
ËË '
.
ËË' (
WeightedVolume
ËË( 6
(
ËË6 7
combinedFilter
ËË7 E
.
ËËE F
Channel
ËËF M
(
ËËM N
j
ËËN O
)
ËËO P
)
ËËP Q
;
ËËQ R
_impulseVolumes
ÈÈ #
.
ÈÈ# $
Add
ÈÈ$ '
(
ÈÈ' (
v
ÈÈ( )
)
ÈÈ) *
;
ÈÈ* +
if
ÍÍ 
(
ÍÍ 
_debug
ÍÍ 
)
ÍÍ 
{
ÎÎ 
Trace
ÏÏ 
.
ÏÏ 
	WriteLine
ÏÏ '
(
ÏÏ' (
$str
ÏÏ( 4
,
ÏÏ4 5
j
ÏÏ6 7
,
ÏÏ7 8
v
ÏÏ9 :
)
ÏÏ: ;
;
ÏÏ; <
}
ÌÌ 
}
ÓÓ 
}
ÔÔ 
combinedFilter
 
=
 
null
 !
;
! "
if
ÚÚ 
(
ÚÚ 
_debug
ÚÚ 
)
ÚÚ 
{
ÛÛ 
TimeSpan
ÙÙ 
ts
ÙÙ 
=
ÙÙ 
DateTime
ÙÙ &
.
ÙÙ& '
Now
ÙÙ' *
.
ÙÙ* +
Subtract
ÙÙ+ 3
(
ÙÙ3 4
dtStart
ÙÙ4 ;
)
ÙÙ; <
;
ÙÙ< =
Trace
ıı 
.
ıı 
	WriteLine
ıı 
(
ıı  
$str
ıı  -
+
ıı. /
ts
ıı0 2
.
ıı2 3
TotalMilliseconds
ıı3 D
)
ııD E
;
ııE F
}
ˆˆ 
}
˜˜ 	
static
˘˘ 
SoundObj
˘˘ 
GetMainImpulse
˘˘ &
(
˘˘& '
out
˘˘' *
string
˘˘+ 1

actualPath
˘˘2 <
)
˘˘< =
{
˙˙ 	
DateTime
˚˚ 
dtStart
˚˚ 
=
˚˚ 
DateTime
˚˚ '
.
˚˚' (
Now
˚˚( +
;
˚˚+ ,
if
¸¸ 
(
¸¸ 
_impulsePath
¸¸ 
==
¸¸ 
$str
¸¸  "
)
¸¸" #
_impulsePath
¸¸$ 0
=
¸¸1 2
null
¸¸3 7
;
¸¸7 8
if
˝˝ 
(
˝˝ 
_impulsePath
˝˝ 
==
˝˝ 
$str
˝˝  #
)
˝˝# $
_impulsePath
˝˝% 1
=
˝˝2 3
null
˝˝4 8
;
˝˝8 9
if
˛˛ 
(
˛˛ 
_matrixFilter
˛˛ 
==
˛˛  
$str
˛˛! #
)
˛˛# $
_matrixFilter
˛˛% 2
=
˛˛3 4
null
˛˛5 9
;
˛˛9 :
if
ˇˇ 
(
ˇˇ 
_matrixFilter
ˇˇ 
==
ˇˇ  
$str
ˇˇ! $
)
ˇˇ$ %
_matrixFilter
ˇˇ& 3
=
ˇˇ4 5
null
ˇˇ6 :
;
ˇˇ: ;
if
ÄÄ 
(
ÄÄ 
_bformatFilter
ÄÄ 
==
ÄÄ !
$str
ÄÄ" $
)
ÄÄ$ %
_bformatFilter
ÄÄ& 4
=
ÄÄ5 6
null
ÄÄ7 ;
;
ÄÄ; <
if
ÅÅ 
(
ÅÅ 
_bformatFilter
ÅÅ 
==
ÅÅ !
$str
ÅÅ" %
)
ÅÅ% &
_bformatFilter
ÅÅ' 5
=
ÅÅ6 7
null
ÅÅ8 <
;
ÅÅ< =
Trace
ÇÇ 
.
ÇÇ 
	WriteLine
ÇÇ 
(
ÇÇ 
$str
ÇÇ 5
,
ÇÇ5 6
	CleanPath
ÇÇ7 @
(
ÇÇ@ A
_dataFolder
ÇÇA L
,
ÇÇL M
_impulsePath
ÇÇN Z
)
ÇÇZ [
,
ÇÇ[ \
	CleanPath
ÇÇ] f
(
ÇÇf g
_dataFolder
ÇÇg r
,
ÇÇr s
_matrixFilterÇÇt Å
)ÇÇÅ Ç
)ÇÇÇ É
;ÇÇÉ Ñ

WaveReader
ÖÖ 
impulseReader
ÖÖ $
=
ÖÖ% &
null
ÖÖ' +
;
ÖÖ+ ,
SoundObj
ÜÜ 

impulseObj
ÜÜ 
=
ÜÜ  !
null
ÜÜ" &
;
ÜÜ& '

actualPath
áá 
=
áá 
null
áá 
;
áá 
if
ââ 
(
ââ 
!
ââ 
String
ââ 
.
ââ 
IsNullOrEmpty
ââ %
(
ââ% &
_impulsePath
ââ& 2
)
ââ2 3
)
ââ3 4
{
ää 
impulseReader
ãã 
=
ãã )
GetAppropriateImpulseReader
ãã  ;
(
ãã; <
_impulsePath
ãã< H
,
ããH I
out
ããJ M

actualPath
ããN X
)
ããX Y
;
ããY Z
}
åå 
if
çç 
(
çç 
impulseReader
çç 
!=
çç  
null
çç! %
)
çç% &
{
éé 
if
èè 
(
èè 
impulseReader
èè !
.
èè! "

Iterations
èè" ,
>
èè- .
_maxImpulseLength
èè/ @
)
èè@ A
{
êê 
int
ìì 
hwid
ìì 
=
ìì 
_maxImpulseLength
ìì 0
/
ìì1 2
$num
ìì3 4
;
ìì4 5
int
îî 
qwid
îî 
=
îî 
_maxImpulseLength
îî 0
/
îî1 2
$num
îî3 4
;
îî4 5
SoundBuffer
ïï 
buff
ïï  $
=
ïï% &
new
ïï' *
SoundBuffer
ïï+ 6
(
ïï6 7
impulseReader
ïï7 D
)
ïïD E
;
ïïE F
buff
ññ 
.
ññ 
ReadAll
ññ  
(
ññ  !
)
ññ! "
;
ññ" #
int
óó 
center
óó 
=
óó  
buff
óó! %
.
óó% &
MaxPos
óó& ,
(
óó, -
)
óó- .
;
óó. /
BlackmanHarris
òò "
wind
òò# '
;
òò' (
int
ôô 
startpos
ôô  
;
ôô  !
if
öö 
(
öö 
center
öö 
<
öö  
hwid
öö! %
)
öö% &
{
õõ 
wind
úú 
=
úú 
new
úú "
BlackmanHarris
úú# 1
(
úú1 2
center
úú2 8
,
úú8 9
qwid
úú: >
,
úú> ?
qwid
úú@ D
)
úúD E
;
úúE F
startpos
ùù  
=
ùù! "
$num
ùù# $
;
ùù$ %
}
ûû 
else
üü 
{
†† 
wind
°° 
=
°° 
new
°° "
BlackmanHarris
°°# 1
(
°°1 2
hwid
°°2 6
,
°°6 7
qwid
°°8 <
,
°°< =
qwid
°°> B
)
°°B C
;
°°C D
startpos
¢¢  
=
¢¢! "
center
¢¢# )
-
¢¢* +
hwid
¢¢, 0
;
¢¢0 1
}
££ 
wind
•• 
.
•• 
Input
•• 
=
••  
buff
••! %
.
••% &
Subset
••& ,
(
••, -
startpos
••- 5
,
••5 6
_maxImpulseLength
••7 H
)
••H I
;
••I J

impulseObj
¶¶ 
=
¶¶  
wind
¶¶! %
;
¶¶% &
}
ßß 
else
®® 
{
©© 

impulseObj
™™ 
=
™™  
impulseReader
™™! .
;
™™. /
}
´´ 
}
¨¨ 
if
ÆÆ 
(
ÆÆ 
_debug
ÆÆ 
)
ÆÆ 
{
ØØ 
TimeSpan
∞∞ 
ts
∞∞ 
=
∞∞ 
DateTime
∞∞ &
.
∞∞& '
Now
∞∞' *
.
∞∞* +
Subtract
∞∞+ 3
(
∞∞3 4
dtStart
∞∞4 ;
)
∞∞; <
;
∞∞< =
Trace
±± 
.
±± 
	WriteLine
±± 
(
±±  
$str
±±  1
+
±±2 3
ts
±±4 6
.
±±6 7
TotalMilliseconds
±±7 H
)
±±H I
;
±±I J
}
≤≤ 
return
≥≥ 

impulseObj
≥≥ 
;
≥≥ 
}
¥¥ 	
static
∑∑ 
SoundObj
∑∑ 
GetEQImpulse
∑∑ $
(
∑∑$ %
	ISoundObj
∑∑% .
mainImpulse
∑∑/ :
,
∑∑: ;
uint
∑∑< @

sampleRate
∑∑A K
,
∑∑K L
out
∑∑M P
string
∑∑Q W

filterName
∑∑X b
)
∑∑b c
{
∏∏ 	
DateTime
ππ 
dtStart
ππ 
=
ππ 
DateTime
ππ '
.
ππ' (
Now
ππ( +
;
ππ+ ,
SoundObj
∫∫ 
filterImpulse
∫∫ "
=
∫∫# $
null
∫∫% )
;
∫∫) *
string
ΩΩ 
filterDescription
ΩΩ $
=
ΩΩ% &
$str
ΩΩ' +
+
ΩΩ, -
_eqBands
ΩΩ. 6
+
ΩΩ7 8
$str
ΩΩ9 <
+
ΩΩ= >
_inputSampleRate
ΩΩ? O
+
ΩΩP Q
$str
ΩΩR U
+
ΩΩV W
_eqLoudness
ΩΩX c
+
ΩΩd e
$str
ΩΩf i
+
ΩΩj k 
FlatnessFilterPath
ΩΩl ~
(
ΩΩ~ 
_impulsePathΩΩ ã
,ΩΩã å

sampleRateΩΩç ó
,ΩΩó ò
_eqFlatnessΩΩô §
)ΩΩ§ •
;ΩΩ• ¶
bool
øø 
nothingToDo
øø 
=
øø 
(
øø  
_eqLoudness
øø  +
==
øø, .
$num
øø/ 0
)
øø0 1
;
øø1 2
nothingToDo
¿¿ 
&=
¿¿ 
(
¿¿ 
_impulsePath
¿¿ (
==
¿¿) +
null
¿¿, 0
)
¿¿0 1
||
¿¿2 4
(
¿¿5 6
_eqFlatness
¿¿6 A
==
¿¿B D
$num
¿¿E H
)
¿¿H I
;
¿¿I J
List
¬¬ 
<
¬¬ 
string
¬¬ 
>
¬¬ 
fgd
¬¬ 
=
¬¬ 
new
¬¬ "
List
¬¬# '
<
¬¬' (
string
¬¬( .
>
¬¬. /
(
¬¬/ 0
)
¬¬0 1
;
¬¬1 2
foreach
√√ 
(
√√ 
FreqGain
√√ 
fg
√√  
in
√√! #
	_eqValues
√√$ -
)
√√- .
{
ƒƒ 
fgd
≈≈ 
.
≈≈ 
Add
≈≈ 
(
≈≈ 
fg
≈≈ 
.
≈≈ 
Freq
≈≈ 
+
≈≈  !
$str
≈≈" %
+
≈≈& '
fg
≈≈( *
.
≈≈* +
Gain
≈≈+ /
)
≈≈/ 0
;
≈≈0 1
nothingToDo
∆∆ 
&=
∆∆ 
(
∆∆  
fg
∆∆  "
.
∆∆" #
Gain
∆∆# '
==
∆∆( *
$num
∆∆+ ,
)
∆∆, -
;
∆∆- .
}
«« 
filterDescription
»» 
=
»» 
filterDescription
»»  1
+
»»2 3
String
»»4 :
.
»»: ;
Join
»»; ?
(
»»? @
$str
»»@ C
,
»»C D
fgd
»»E H
.
»»H I
ToArray
»»I P
(
»»P Q
)
»»Q R
)
»»R S
;
»»S T
filterDescription
…… 
=
…… 
filterDescription
……  1
+
……2 3
$str
……4 :
+
……; <
_impulsePath
……= I
;
……I J

filterName
ÃÃ 
=
ÃÃ 
$str
ÃÃ 
+
ÃÃ 
filterDescription
ÃÃ  1
.
ÃÃ1 2
GetHashCode
ÃÃ2 =
(
ÃÃ= >
)
ÃÃ> ?
.
ÃÃ? @
ToString
ÃÃ@ H
(
ÃÃH I
$str
ÃÃI N
)
ÃÃN O
.
ÃÃO P
ToUpperInvariant
ÃÃP `
(
ÃÃ` a
)
ÃÃa b
;
ÃÃb c
if
ÕÕ 
(
ÕÕ 
nothingToDo
ÕÕ 
)
ÕÕ 
{
ŒŒ 
Trace
œœ 
.
œœ 
	WriteLine
œœ 
(
œœ  
$str
œœ  )
)
œœ) *
;
œœ* +
	WriteJSON
–– 
(
–– 
	_eqValues
–– #
,
––# $
null
––% )
,
––) *
null
––+ /
)
––/ 0
;
––0 1
return
—— 
null
—— 
;
—— 
}
““ 
else
”” 
{
‘‘ 
Trace
’’ 
.
’’ 
	WriteLine
’’ 
(
’’  

filterName
’’  *
)
’’* +
;
’’+ ,
}
÷÷ 
string
◊◊ 

filterFile
◊◊ 
=
◊◊ 
Path
◊◊  $
.
◊◊$ %
Combine
◊◊% ,
(
◊◊, -
_tempFolder
◊◊- 8
,
◊◊8 9

filterName
◊◊: D
+
◊◊E F
$str
◊◊G P
)
◊◊P Q
;
◊◊Q R
if
⁄⁄ 
(
⁄⁄ 
File
⁄⁄ 
.
⁄⁄ 
Exists
⁄⁄ 
(
⁄⁄ 

filterFile
⁄⁄ &
)
⁄⁄& '
)
⁄⁄' (
{
€€ 
try
‹‹ 
{
›› 
filterImpulse
ﬂﬂ !
=
ﬂﬂ" #
new
ﬂﬂ$ '

WaveReader
ﬂﬂ( 2
(
ﬂﬂ2 3

filterFile
ﬂﬂ3 =
)
ﬂﬂ= >
;
ﬂﬂ> ?
}
‡‡ 
catch
·· 
(
·· 
	Exception
··  
e
··! "
)
··" #
{
‚‚ 
if
„„ 
(
„„ 
_debug
„„ 
)
„„ 
{
‰‰ 
Trace
ÂÂ 
.
ÂÂ 
	WriteLine
ÂÂ '
(
ÂÂ' (
$str
ÂÂ( 9
+
ÂÂ: ;
e
ÂÂ< =
.
ÂÂ= >
Message
ÂÂ> E
)
ÂÂE F
;
ÂÂF G
}
ÊÊ 
}
ÁÁ 
}
ËË 
if
ÈÈ 
(
ÈÈ 
filterImpulse
ÈÈ 
==
ÈÈ  
null
ÈÈ! %
)
ÈÈ% &
{
ÍÍ 
SoundObj
ÏÏ 
eqFilter
ÏÏ !
=
ÏÏ" #
new
ÏÏ$ '
FilterImpulse
ÏÏ( 5
(
ÏÏ5 6
$num
ÏÏ6 7
,
ÏÏ7 8
	_eqValues
ÏÏ9 B
,
ÏÏB C!
FilterInterpolation
ÏÏD W
.
ÏÏW X
COSINE
ÏÏX ^
,
ÏÏ^ _
_inputSampleRate
ÏÏ` p
)
ÏÏp q
;
ÏÏq r
filterImpulse
ÌÌ 
=
ÌÌ 
eqFilter
ÌÌ  (
;
ÌÌ( )
	ISoundObj
ÔÔ 
qtFilter
ÔÔ "
=
ÔÔ# $ 
GetQuietnessFilter
ÔÔ% 7
(
ÔÔ7 8
_inputSampleRate
ÔÔ8 H
,
ÔÔH I
_eqLoudness
ÔÔJ U
)
ÔÔU V
;
ÔÔV W
if
 
(
 
qtFilter
 
!=
 
null
  $
)
$ %
{
ÒÒ 
FastConvolver
ÛÛ !
tmpConvolver
ÛÛ" .
=
ÛÛ/ 0
new
ÛÛ1 4
FastConvolver
ÛÛ5 B
(
ÛÛB C
)
ÛÛC D
;
ÛÛD E
tmpConvolver
ÙÙ  
.
ÙÙ  !

partitions
ÙÙ! +
=
ÙÙ, -
$num
ÙÙ. /
;
ÙÙ/ 0
tmpConvolver
ıı  
.
ıı  !
impulse
ıı! (
=
ıı) *
qtFilter
ıı+ 3
;
ıı3 4
tmpConvolver
ˆˆ  
.
ˆˆ  !
Input
ˆˆ! &
=
ˆˆ' (
eqFilter
ˆˆ) 1
;
ˆˆ1 2
filterImpulse
˜˜ !
=
˜˜" #
tmpConvolver
˜˜$ 0
;
˜˜0 1
}
¯¯ 
	ISoundObj
˙˙ 
ftFilter
˙˙ "
=
˙˙# $
GetFlatnessFilter
˙˙% 6
(
˙˙6 7
_impulsePath
˙˙7 C
,
˙˙C D
mainImpulse
˙˙E P
,
˙˙P Q
_eqFlatness
˙˙R ]
)
˙˙] ^
;
˙˙^ _
if
˚˚ 
(
˚˚ 
ftFilter
˚˚ 
!=
˚˚ 
null
˚˚  $
)
˚˚$ %
{
¸¸ 
FastConvolver
˛˛ !
tmpConvolver2
˛˛" /
=
˛˛0 1
new
˛˛2 5
FastConvolver
˛˛6 C
(
˛˛C D
)
˛˛D E
;
˛˛E F
tmpConvolver2
ˇˇ !
.
ˇˇ! "

partitions
ˇˇ" ,
=
ˇˇ- .
$num
ˇˇ/ 0
;
ˇˇ0 1
tmpConvolver2
ÄÄ !
.
ÄÄ! "
impulse
ÄÄ" )
=
ÄÄ* +
filterImpulse
ÄÄ, 9
;
ÄÄ9 :
tmpConvolver2
ÅÅ !
.
ÅÅ! "
Input
ÅÅ" '
=
ÅÅ( )
ftFilter
ÅÅ* 2
;
ÅÅ2 3
filterImpulse
ÇÇ !
=
ÇÇ" #
tmpConvolver2
ÇÇ$ 1
;
ÇÇ1 2
}
ÉÉ 
try
áá 
{
àà 

WaveWriter
ää 
wri
ää "
=
ää# $
new
ää% (

WaveWriter
ää) 3
(
ää3 4

filterFile
ää4 >
)
ää> ?
;
ää? @
wri
ãã 
.
ãã 
Input
ãã 
=
ãã 
filterImpulse
ãã  -
;
ãã- .
wri
åå 
.
åå 
Format
åå 
=
åå  

WaveFormat
åå! +
.
åå+ ,

IEEE_FLOAT
åå, 6
;
åå6 7
wri
çç 
.
çç 
BitsPerSample
çç %
=
çç& '
$num
çç( *
;
çç* +
wri
éé 
.
éé 
Run
éé 
(
éé 
)
éé 
;
éé 
wri
èè 
.
èè 
Close
èè 
(
èè 
)
èè 
;
èè  
if
ëë 
(
ëë 
_debug
ëë 
)
ëë 
{
íí 
wri
îî 
=
îî 
new
îî !

WaveWriter
îî" ,
(
îî, -

filterFile
îî- 7
+
îî8 9
$str
îî: @
)
îî@ A
;
îîA B
wri
ïï 
.
ïï 
Input
ïï !
=
ïï" #
filterImpulse
ïï$ 1
;
ïï1 2
wri
ññ 
.
ññ 
Format
ññ "
=
ññ# $

WaveFormat
ññ% /
.
ññ/ 0
PCM
ññ0 3
;
ññ3 4
wri
óó 
.
óó 
BitsPerSample
óó )
=
óó* +
$num
óó, .
;
óó. /
wri
òò 
.
òò 
Normalization
òò )
=
òò* +
-
òò, -
$num
òò- 0
;
òò0 1
wri
ôô 
.
ôô 
Dither
ôô "
=
ôô# $

DitherType
ôô% /
.
ôô/ 0
NONE
ôô0 4
;
ôô4 5
wri
öö 
.
öö 
Run
öö 
(
öö  
)
öö  !
;
öö! "
wri
õõ 
.
õõ 
Close
õõ !
(
õõ! "
)
õõ" #
;
õõ# $
}
úú 
	WriteJSON
üü 
(
üü 
	_eqValues
üü '
,
üü' (
filterImpulse
üü) 6
,
üü6 7

filterName
üü8 B
)
üüB C
;
üüC D
}
†† 
catch
°° 
(
°° 
	Exception
°°  
e
°°! "
)
°°" #
{
¢¢ 
if
££ 
(
££ 
_debug
££ 
)
££ 
{
§§ 
Trace
•• 
.
•• 
	WriteLine
•• '
(
••' (
$str
••( 9
+
••: ;
e
••< =
.
••= >
Message
••> E
)
••E F
;
••F G
}
¶¶ 
}
ßß 
}
®® 
filterImpulse
©© 
.
©© 
Reset
©© 
(
©©  
)
©©  !
;
©©! "
if
™™ 
(
™™ 
_debug
™™ 
)
™™ 
{
´´ 
TimeSpan
¨¨ 
ts
¨¨ 
=
¨¨ 
DateTime
¨¨ &
.
¨¨& '
Now
¨¨' *
.
¨¨* +
Subtract
¨¨+ 3
(
¨¨3 4
dtStart
¨¨4 ;
)
¨¨; <
;
¨¨< =
Trace
≠≠ 
.
≠≠ 
	WriteLine
≠≠ 
(
≠≠  
$str
≠≠  /
+
≠≠0 1
ts
≠≠2 4
.
≠≠4 5
TotalMilliseconds
≠≠5 F
)
≠≠F G
;
≠≠G H
}
ÆÆ 
CopyJSON
±± 
(
±± 

filterName
±± 
)
±±  
;
±±  !
return
≥≥ 
filterImpulse
≥≥  
;
≥≥  !
}
¥¥ 	
static
∑∑ 
void
∑∑ 
LoadMatrixFilter
∑∑ $
(
∑∑$ %
)
∑∑% &
{
∏∏ 	
SoundObj
ππ 
im
ππ 
=
ππ 
GetMatrixImpulse
ππ *
(
ππ* +
)
ππ+ ,
;
ππ, -
if
∫∫ 
(
∫∫ 
im
∫∫ 
!=
∫∫ 
null
∫∫ 
)
∫∫ 
{
ªª 
_MatrixConvolver
ºº  
.
ºº  !

partitions
ºº! +
=
ºº, -
$num
ºº. /
;
ºº/ 0
_depthSkewer
ΩΩ 
.
ΩΩ 
Input
ΩΩ "
=
ΩΩ# $
im
ΩΩ% '
;
ΩΩ' (
_depthSkewer
ææ 
.
ææ 
Skew
ææ !
=
ææ" #
_depth
ææ$ *
;
ææ* +
_MatrixConvolver
øø  
.
øø  !
impulse
øø! (
=
øø) *
_depthSkewer
øø+ 7
;
øø7 8
}
¿¿ 
}
¡¡ 	
static
√√ 
SoundObj
√√ 
GetMatrixImpulse
√√ (
(
√√( )
)
√√) *
{
ƒƒ 	
Shuffler
»» 
filterShuffler
»» #
=
»»$ %
new
»»& )
Shuffler
»»* 2
(
»»2 3
)
»»3 4
;
»»4 5
if
   
(
   
!
   
String
   
.
   
IsNullOrEmpty
   %
(
  % &
_matrixFilter
  & 3
)
  3 4
)
  4 5
{
ÀÀ 
string
ÃÃ 
ignore
ÃÃ 
;
ÃÃ 

WaveReader
ÕÕ 
matrixReader
ÕÕ '
=
ÕÕ( ))
GetAppropriateImpulseReader
ÕÕ* E
(
ÕÕE F
_matrixFilter
ÕÕF S
,
ÕÕS T
out
ÕÕU X
ignore
ÕÕY _
)
ÕÕ_ `
;
ÕÕ` a
if
ŒŒ 
(
ŒŒ 
matrixReader
ŒŒ  
!=
ŒŒ! #
null
ŒŒ$ (
)
ŒŒ( )
{
œœ 
filterShuffler
–– "
.
––" #
Input
––# (
=
––) *
matrixReader
––+ 7
;
––7 8
double
”” 
matrixVolume
”” '
=
””( )
Loudness
””* 2
.
””2 3
WeightedVolume
””3 A
(
””A B
filterShuffler
””B P
)
””P Q
;
””Q R
if
‘‘ 
(
‘‘ 
Math
‘‘ 
.
‘‘ 
Abs
‘‘  
(
‘‘  !
$num
‘‘! "
-
‘‘# $
matrixVolume
‘‘% 1
)
‘‘1 2
>
‘‘3 4
$num
‘‘5 :
)
‘‘: ;
{
’’ 
for
◊◊ 
(
◊◊ 
int
◊◊  
j
◊◊! "
=
◊◊# $
$num
◊◊% &
;
◊◊& '
j
◊◊( )
<
◊◊* +
_impulseVolumes
◊◊, ;
.
◊◊; <
Count
◊◊< A
;
◊◊A B
j
◊◊C D
++
◊◊D F
)
◊◊F G
{
ÿÿ 
_impulseVolumes
ŸŸ +
[
ŸŸ+ ,
j
ŸŸ, -
]
ŸŸ- .
*=
ŸŸ/ 1
matrixVolume
ŸŸ2 >
;
ŸŸ> ?
}
⁄⁄ 
}
€€ 
}
‹‹ 
}
›› 
return
ﬂﬂ 
filterShuffler
ﬂﬂ !
;
ﬂﬂ! "
}
‡‡ 	
private
ÈÈ 
static
ÈÈ 
void
ÈÈ 
CopyJSON
ÈÈ $
(
ÈÈ$ %
string
ÈÈ% +

filterName
ÈÈ, 6
)
ÈÈ6 7
{
ÍÍ 	
if
ÎÎ 
(
ÎÎ 
_debug
ÎÎ 
)
ÎÎ 
{
ÏÏ 
Trace
ÌÌ 
.
ÌÌ 
	WriteLine
ÌÌ 
(
ÌÌ  
$str
ÌÌ  .
,
ÌÌ. /

filterName
ÌÌ0 :
)
ÌÌ: ;
;
ÌÌ; <
}
ÓÓ 
string
ÔÔ 
jsonFile
ÔÔ 
=
ÔÔ 
Path
ÔÔ "
.
ÔÔ" #
Combine
ÔÔ# *
(
ÔÔ* +
_tempFolder
ÔÔ+ 6
,
ÔÔ6 7

filterName
ÔÔ8 B
+
ÔÔC D
$str
ÔÔE L
)
ÔÔL M
;
ÔÔM N
string
 
currFile
 
=
 
Path
 "
.
" #
Combine
# *
(
* +
_tempFolder
+ 6
,
6 7
_userID
8 ?
.
? @
Replace
@ G
(
G H
$char
H K
,
K L
$char
M P
)
P Q
+
R S
$str
T c
)
c d
;
d e
if
ÒÒ 
(
ÒÒ 
File
ÒÒ 
.
ÒÒ 
Exists
ÒÒ 
(
ÒÒ 
jsonFile
ÒÒ $
)
ÒÒ$ %
)
ÒÒ% &
{
ÚÚ 
try
ÛÛ 
{
ÙÙ 
File
ıı 
.
ıı 
Copy
ıı 
(
ıı 
jsonFile
ıı &
,
ıı& '
currFile
ıı( 0
,
ıı0 1
true
ıı2 6
)
ıı6 7
;
ıı7 8
}
ˆˆ 
catch
˜˜ 
(
˜˜ 
	Exception
˜˜  
)
˜˜  !
{
˜˜" #
}
˜˜$ %
}
¯¯ 
}
˘˘ 	
private
ÄÄ 
static
ÄÄ 
void
ÄÄ 
	WriteJSON
ÄÄ %
(
ÄÄ% &
FilterProfile
ÄÄ& 3
eqValues
ÄÄ4 <
,
ÄÄ< =
	ISoundObj
ÄÄ> G
filterImpulse
ÄÄH U
,
ÄÄU V
string
ÄÄW ]

filterName
ÄÄ^ h
)
ÄÄh i
{
ÅÅ 	
FilterProfile
ÇÇ 
lfg
ÇÇ 
;
ÇÇ 
if
ÉÉ 
(
ÉÉ 
filterImpulse
ÉÉ 
==
ÉÉ  
null
ÉÉ! %
&&
ÉÉ& (

filterName
ÉÉ) 3
==
ÉÉ4 6
null
ÉÉ7 ;
)
ÉÉ; <
{
ÑÑ 

filterName
áá 
=
áá 
_userID
áá $
.
áá$ %
Replace
áá% ,
(
áá, -
$char
áá- 0
,
áá0 1
$char
áá2 5
)
áá5 6
+
áá7 8
$str
áá9 C
;
ááC D
lfg
àà 
=
àà 
new
àà 
FilterProfile
àà '
(
àà' (
)
àà( )
;
àà) *
lfg
ââ 
.
ââ 
Add
ââ 
(
ââ 
new
ââ 
FreqGain
ââ $
(
ââ$ %
$num
ââ% '
,
ââ' (
$num
ââ) *
)
ââ* +
)
ââ+ ,
;
ââ, -
lfg
ää 
.
ää 
Add
ää 
(
ää 
new
ää 
FreqGain
ää $
(
ää$ %
$num
ää% *
,
ää* +
$num
ää, -
)
ää- .
)
ää. /
;
ää/ 0
if
ãã 
(
ãã 
_debug
ãã 
)
ãã 
{
åå 
Trace
çç 
.
çç 
	WriteLine
çç #
(
çç# $
$str
çç$ :
,
çç: ;

filterName
çç< F
)
ççF G
;
ççG H
}
éé 
}
èè 
else
êê 
{
ëë 
if
íí 
(
íí 
_debug
íí 
)
íí 
{
ìì 
Trace
îî 
.
îî 
	WriteLine
îî #
(
îî# $
$str
îî$ 3
,
îî3 4

filterName
îî5 ?
)
îî? @
;
îî@ A
}
ïï 
lfg
öö 
=
öö 
new
öö 
FilterProfile
öö '
(
öö' (
filterImpulse
öö( 5
,
öö5 6
$num
öö7 :
)
öö: ;
;
öö; <
}
õõ 
string
ûû 
jsonFile
ûû 
=
ûû 
Path
ûû "
.
ûû" #
Combine
ûû# *
(
ûû* +
_tempFolder
ûû+ 6
,
ûû6 7

filterName
ûû8 B
+
ûûC D
$str
ûûE L
)
ûûL M
;
ûûM N

FileStream
üü 
fs
üü 
=
üü 
new
üü 

FileStream
üü  *
(
üü* +
jsonFile
üü+ 3
,
üü3 4
FileMode
üü5 =
.
üü= >
Create
üü> D
)
üüD E
;
üüE F
StreamWriter
†† 
sw
†† 
=
†† 
new
†† !
StreamWriter
††" .
(
††. /
fs
††/ 1
)
††1 2
;
††2 3
sw
°° 
.
°° 
	WriteLine
°° 
(
°° 
$str
°° 
)
°° 
;
°° 
sw
¢¢ 
.
¢¢ 
Write
¢¢ 
(
¢¢ 
eqValues
¢¢ 
.
¢¢ 
ToJSONString
¢¢ *
(
¢¢* +
$str
¢¢+ /
,
¢¢/ 0
$str
¢¢1 L
)
¢¢L M
+
¢¢N O
$str
¢¢P S
)
¢¢S T
;
¢¢T U
sw
££ 
.
££ 
Write
££ 
(
££ 
lfg
££ 
.
££ 
ToJSONString
££ %
(
££% &
$str
££& .
,
££. /
$str
££0 [
)
££[ \
)
££\ ]
;
££] ^
sw
§§ 
.
§§ 
	WriteLine
§§ 
(
§§ 
$str
§§ 
)
§§ 
;
§§ 
sw
•• 
.
•• 
Close
•• 
(
•• 
)
•• 
;
•• 
fs
¶¶ 
.
¶¶ 
Close
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
}
ßß 	
static
¨¨ 
void
¨¨ 
LoadBFormatFilter
¨¨ %
(
¨¨% &
)
¨¨& '
{
≠≠ 	
}
∞∞ 	
static
≤≤ 
	ISoundObj
≤≤ 
DecodeBFormat
≤≤ &
(
≤≤& '
	ISoundObj
≤≤' 0
source
≤≤1 7
)
≤≤7 8
{
≥≥ 	
if
¥¥ 
(
¥¥ 
String
¥¥ 
.
¥¥ 
IsNullOrEmpty
¥¥ $
(
¥¥$ %
	_ambiType
¥¥% .
)
¥¥. /
||
¥¥0 2
	_ambiType
¥¥3 <
==
¥¥= ?
$str
¥¥@ C
)
¥¥C D
{
µµ 
	_ambiType
∂∂ 
=
∂∂ 
$str
∂∂ !
;
∂∂! "
}
∑∑ 
if
ππ 
(
ππ 
_ambiRotateX
ππ 
!=
ππ 
$num
ππ  !
||
ππ" $
_ambiRotateY
ππ% 1
!=
ππ2 4
$num
ππ5 6
||
ππ7 9
_ambiRotateZ
ππ: F
!=
ππG I
$num
ππJ K
)
ππK L
{
∫∫ 
source
ºº 
=
ºº 
RotateBFormat
ºº &
(
ºº& '
source
ºº' -
)
ºº- .
;
ºº. /
}
ΩΩ 
switch
øø 
(
øø 
	_ambiType
øø 
.
øø 
ToUpperInvariant
øø .
(
øø. /
)
øø/ 0
)
øø0 1
{
¿¿ 
case
¡¡ 
$str
¡¡ 
:
¡¡ 
return
¬¬ "
DecodeBFormatCrossed
¬¬ /
(
¬¬/ 0
source
¬¬0 6
)
¬¬6 7
;
¬¬7 8
case
ƒƒ 
$str
ƒƒ 
:
ƒƒ  
return
≈≈ #
DecodeBFormatBlumlein
≈≈ 0
(
≈≈0 1
source
≈≈1 7
)
≈≈7 8
;
≈≈8 9
case
«« 
$str
«« 
:
««  
return
»» #
DecodeBFormatBinaural
»» 0
(
»»0 1
source
»»1 7
)
»»7 8
;
»»8 9
case
   
$str
   
:
   
return
ÀÀ !
DecodeBFormatMatrix
ÀÀ .
(
ÀÀ. /
source
ÀÀ/ 5
)
ÀÀ5 6
;
ÀÀ6 7
case
ÕÕ 
$str
ÕÕ 
:
ÕÕ 
default
ŒŒ 
:
ŒŒ 
return
œœ 
DecodeBFormatUHJ
œœ +
(
œœ+ ,
source
œœ, 2
)
œœ2 3
;
œœ3 4
}
–– 
}
““ 	
static
’’ 
	ISoundObj
’’ 
RotateBFormat
’’ &
(
’’& '
	ISoundObj
’’' 0
source
’’1 7
)
’’7 8
{
÷÷ 	
	ISoundObj
ÿÿ 
channelW
ÿÿ 
=
ÿÿ  
new
ÿÿ! $
SingleChannel
ÿÿ% 2
(
ÿÿ2 3
source
ÿÿ3 9
,
ÿÿ9 :
$num
ÿÿ; <
)
ÿÿ< =
;
ÿÿ= >
	ISoundObj
ŸŸ 
channelX
ŸŸ 
=
ŸŸ  
new
ŸŸ! $
SingleChannel
ŸŸ% 2
(
ŸŸ2 3
source
ŸŸ3 9
,
ŸŸ9 :
$num
ŸŸ; <
,
ŸŸ< =
true
ŸŸ> B
)
ŸŸB C
;
ŸŸC D
	ISoundObj
⁄⁄ 
channelY
⁄⁄ 
=
⁄⁄  
new
⁄⁄! $
SingleChannel
⁄⁄% 2
(
⁄⁄2 3
source
⁄⁄3 9
,
⁄⁄9 :
$num
⁄⁄; <
,
⁄⁄< =
true
⁄⁄> B
)
⁄⁄B C
;
⁄⁄C D
	ISoundObj
€€ 
channelZ
€€ 
=
€€  
new
€€! $
SingleChannel
€€% 2
(
€€2 3
source
€€3 9
,
€€9 :
$num
€€; <
,
€€< =
true
€€> B
)
€€B C
;
€€C D
double
›› 
rx
›› 
=
›› 
MathUtil
››  
.
››  !
Radians
››! (
(
››( )
_ambiRotateX
››) 5
)
››5 6
;
››6 7
double
ﬁﬁ 
ry
ﬁﬁ 
=
ﬁﬁ 
MathUtil
ﬁﬁ  
.
ﬁﬁ  !
Radians
ﬁﬁ! (
(
ﬁﬁ( )
_ambiRotateY
ﬁﬁ) 5
)
ﬁﬁ5 6
;
ﬁﬁ6 7
double
ﬂﬂ 
rz
ﬂﬂ 
=
ﬂﬂ 
MathUtil
ﬂﬂ  
.
ﬂﬂ  !
Radians
ﬂﬂ! (
(
ﬂﬂ( )
_ambiRotateZ
ﬂﬂ) 5
)
ﬂﬂ5 6
;
ﬂﬂ6 7
Mixer
‚‚ 
X
‚‚ 
=
‚‚ 
new
‚‚ 
Mixer
‚‚ 
(
‚‚  
)
‚‚  !
;
‚‚! "
Mixer
„„ 
Y
„„ 
=
„„ 
new
„„ 
Mixer
„„ 
(
„„  
)
„„  !
;
„„! "
Mixer
‰‰ 
Z
‰‰ 
=
‰‰ 
new
‰‰ 
Mixer
‰‰ 
(
‰‰  
)
‰‰  !
;
‰‰! "
X
˘˘ 
.
˘˘ 
Add
˘˘ 
(
˘˘ 
channelX
˘˘ 
,
˘˘ 
Math
˘˘  
.
˘˘  !
Cos
˘˘! $
(
˘˘$ %
ry
˘˘% '
)
˘˘' (
*
˘˘) *
Math
˘˘+ /
.
˘˘/ 0
Cos
˘˘0 3
(
˘˘3 4
rz
˘˘4 6
)
˘˘6 7
)
˘˘7 8
;
˘˘8 9
X
˙˙ 
.
˙˙ 
Add
˙˙ 
(
˙˙ 
channelY
˙˙ 
,
˙˙ 
-
˙˙ 
Math
˙˙ !
.
˙˙! "
Sin
˙˙" %
(
˙˙% &
rz
˙˙& (
)
˙˙( )
)
˙˙) *
;
˙˙* +
X
˚˚ 
.
˚˚ 
Add
˚˚ 
(
˚˚ 
channelZ
˚˚ 
,
˚˚ 
-
˚˚ 
Math
˚˚ !
.
˚˚! "
Sin
˚˚" %
(
˚˚% &
ry
˚˚& (
)
˚˚( )
)
˚˚) *
;
˚˚* +
Y
˝˝ 
.
˝˝ 
Add
˝˝ 
(
˝˝ 
channelX
˝˝ 
,
˝˝ 
Math
˝˝  
.
˝˝  !
Sin
˝˝! $
(
˝˝$ %
rz
˝˝% '
)
˝˝' (
)
˝˝( )
;
˝˝) *
Y
˛˛ 
.
˛˛ 
Add
˛˛ 
(
˛˛ 
channelY
˛˛ 
,
˛˛ 
Math
˛˛  
.
˛˛  !
Cos
˛˛! $
(
˛˛$ %
rx
˛˛% '
)
˛˛' (
*
˛˛) *
Math
˛˛+ /
.
˛˛/ 0
Cos
˛˛0 3
(
˛˛3 4
rz
˛˛4 6
)
˛˛6 7
)
˛˛7 8
;
˛˛8 9
Y
ˇˇ 
.
ˇˇ 
Add
ˇˇ 
(
ˇˇ 
channelZ
ˇˇ 
,
ˇˇ 
-
ˇˇ 
Math
ˇˇ !
.
ˇˇ! "
Sin
ˇˇ" %
(
ˇˇ% &
rx
ˇˇ& (
)
ˇˇ( )
)
ˇˇ) *
;
ˇˇ* +
Z
ÅÅ 
.
ÅÅ 
Add
ÅÅ 
(
ÅÅ 
channelX
ÅÅ 
,
ÅÅ 
Math
ÅÅ  
.
ÅÅ  !
Sin
ÅÅ! $
(
ÅÅ$ %
ry
ÅÅ% '
)
ÅÅ' (
)
ÅÅ( )
;
ÅÅ) *
Z
ÇÇ 
.
ÇÇ 
Add
ÇÇ 
(
ÇÇ 
channelY
ÇÇ 
,
ÇÇ 
Math
ÇÇ  
.
ÇÇ  !
Sin
ÇÇ! $
(
ÇÇ$ %
rz
ÇÇ% '
)
ÇÇ' (
)
ÇÇ( )
;
ÇÇ) *
Z
ÉÉ 
.
ÉÉ 
Add
ÉÉ 
(
ÉÉ 
channelZ
ÉÉ 
,
ÉÉ 
Math
ÉÉ  
.
ÉÉ  !
Cos
ÉÉ! $
(
ÉÉ$ %
rz
ÉÉ% '
)
ÉÉ' (
*
ÉÉ) *
Math
ÉÉ+ /
.
ÉÉ/ 0
Cos
ÉÉ0 3
(
ÉÉ3 4
ry
ÉÉ4 6
)
ÉÉ6 7
)
ÉÉ7 8
;
ÉÉ8 9
ChannelSplicer
ÖÖ 
ret
ÖÖ 
=
ÖÖ  
new
ÖÖ! $
ChannelSplicer
ÖÖ% 3
(
ÖÖ3 4
)
ÖÖ4 5
;
ÖÖ5 6
ret
ÜÜ 
.
ÜÜ 
Add
ÜÜ 
(
ÜÜ 
channelW
ÜÜ 
)
ÜÜ 
;
ÜÜ 
ret
áá 
.
áá 
Add
áá 
(
áá 
X
áá 
)
áá 
;
áá 
ret
àà 
.
àà 
Add
àà 
(
àà 
Y
àà 
)
àà 
;
àà 
ret
ââ 
.
ââ 
Add
ââ 
(
ââ 
Z
ââ 
)
ââ 
;
ââ 
return
ãã 
ret
ãã 
;
ãã 
}
åå 	
static
èè 
	ISoundObj
èè !
DecodeBFormatMatrix
èè ,
(
èè, -
	ISoundObj
èè- 6
source
èè7 =
)
èè= >
{
êê 	
throw
íí 
new
íí %
NotImplementedException
íí -
(
íí- .
)
íí. /
;
íí/ 0
}
ìì 	
static
ññ 
	ISoundObj
ññ "
DecodeBFormatCrossed
ññ -
(
ññ- .
	ISoundObj
ññ. 7
source
ññ8 >
)
ññ> ?
{
óó 	
	ISoundObj
†† 
channelW
†† 
=
††  
new
††! $
SingleChannel
††% 2
(
††2 3
source
††3 9
,
††9 :
$num
††; <
)
††< =
;
††= >
	ISoundObj
°° 
channelX
°° 
=
°°  
new
°°! $
SingleChannel
°°% 2
(
°°2 3
source
°°3 9
,
°°9 :
$num
°°; <
,
°°< =
true
°°> B
)
°°B C
;
°°C D
	ISoundObj
¢¢ 
channelY
¢¢ 
=
¢¢  
new
¢¢! $
SingleChannel
¢¢% 2
(
¢¢2 3
source
¢¢3 9
,
¢¢9 :
$num
¢¢; <
,
¢¢< =
true
¢¢> B
)
¢¢B C
;
¢¢C D
double
≠≠ 
mulX
≠≠ 
=
≠≠ 
Math
≠≠ 
.
≠≠ 
Cos
≠≠ "
(
≠≠" #
MathUtil
≠≠# +
.
≠≠+ ,
Radians
≠≠, 3
(
≠≠3 4
_ambiMicAngle
≠≠4 A
/
≠≠B C
$num
≠≠D E
)
≠≠E F
)
≠≠F G
;
≠≠G H
double
ÆÆ 
mulY
ÆÆ 
=
ÆÆ 
Math
ÆÆ 
.
ÆÆ 
Sin
ÆÆ "
(
ÆÆ" #
MathUtil
ÆÆ# +
.
ÆÆ+ ,
Radians
ÆÆ, 3
(
ÆÆ3 4
_ambiMicAngle
ÆÆ4 A
/
ÆÆB C
$num
ÆÆD E
)
ÆÆE F
)
ÆÆF G
;
ÆÆG H
Mixer
≤≤ 
mixerL
≤≤ 
=
≤≤ 
new
≤≤ 
Mixer
≤≤ $
(
≤≤$ %
)
≤≤% &
;
≤≤& '
mixerL
≥≥ 
.
≥≥ 
Add
≥≥ 
(
≥≥ 
channelW
≥≥ 
,
≥≥  
_ambiCardioid
≥≥! .
*
≥≥/ 0
MathUtil
≥≥1 9
.
≥≥9 :
INVSQRT2
≥≥: B
)
≥≥B C
;
≥≥C D
mixerL
¥¥ 
.
¥¥ 
Add
¥¥ 
(
¥¥ 
channelX
¥¥ 
,
¥¥  
mulX
¥¥! %
)
¥¥% &
;
¥¥& '
mixerL
µµ 
.
µµ 
Add
µµ 
(
µµ 
channelY
µµ 
,
µµ  
mulY
µµ! %
)
µµ% &
;
µµ& '
Mixer
∑∑ 
mixerR
∑∑ 
=
∑∑ 
new
∑∑ 
Mixer
∑∑ $
(
∑∑$ %
)
∑∑% &
;
∑∑& '
mixerR
∏∏ 
.
∏∏ 
Add
∏∏ 
(
∏∏ 
channelW
∏∏ 
,
∏∏  
_ambiCardioid
∏∏! .
*
∏∏/ 0
MathUtil
∏∏1 9
.
∏∏9 :
INVSQRT2
∏∏: B
)
∏∏B C
;
∏∏C D
mixerR
ππ 
.
ππ 
Add
ππ 
(
ππ 
channelX
ππ 
,
ππ  
mulX
ππ! %
)
ππ% &
;
ππ& '
mixerR
∫∫ 
.
∫∫ 
Add
∫∫ 
(
∫∫ 
channelY
∫∫ 
,
∫∫  
-
∫∫! "
mulY
∫∫" &
)
∫∫& '
;
∫∫' (
ChannelSplicer
ΩΩ 
stereo
ΩΩ !
=
ΩΩ" #
new
ΩΩ$ '
ChannelSplicer
ΩΩ( 6
(
ΩΩ6 7
)
ΩΩ7 8
;
ΩΩ8 9
stereo
ææ 
.
ææ 
Add
ææ 
(
ææ 
mixerL
ææ 
)
ææ 
;
ææ 
stereo
øø 
.
øø 
Add
øø 
(
øø 
mixerR
øø 
)
øø 
;
øø 
return
¿¿ 
stereo
¿¿ 
;
¿¿ 
}
¡¡ 	
static
√√ 
	ISoundObj
√√ #
DecodeBFormatBlumlein
√√ .
(
√√. /
	ISoundObj
√√/ 8
source
√√9 ?
)
√√? @
{
ƒƒ 	

TwoChannel
…… 
xy
…… 
=
…… 
new
…… 

TwoChannel
……  *
(
……* +
source
……+ 1
,
……1 2
$num
……3 4
,
……4 5
$num
……6 7
)
……7 8
;
……8 9
Shuffler
   
blum
   
=
   
new
   
Shuffler
    (
(
  ( )
)
  ) *
;
  * +
blum
ÀÀ 
.
ÀÀ 
	DeltaGain
ÀÀ 
=
ÀÀ 
$num
ÀÀ  
;
ÀÀ  !
blum
ÃÃ 
.
ÃÃ 
	SigmaGain
ÃÃ 
=
ÃÃ 
$num
ÃÃ  
;
ÃÃ  !
blum
ÕÕ 
.
ÕÕ 
Input
ÕÕ 
=
ÕÕ 
xy
ÕÕ 
;
ÕÕ 
return
ŒŒ 
blum
ŒŒ 
;
ŒŒ 
}
œœ 	
static
—— 
	ISoundObj
—— #
DecodeBFormatBinaural
—— .
(
——. /
	ISoundObj
——/ 8
source
——9 ?
)
——? @
{
““ 	
	ISoundObj
÷÷ 
input
÷÷ 
=
÷÷ 
source
÷÷ $
;
÷÷$ %
uint
◊◊ 
sr
◊◊ 
=
◊◊ 
input
◊◊ 
.
◊◊ 

SampleRate
◊◊ &
;
◊◊& '
if
⁄⁄ 
(
⁄⁄ 
!
⁄⁄ 
String
⁄⁄ 
.
⁄⁄ 
IsNullOrEmpty
⁄⁄ %
(
⁄⁄% &
_bformatFilter
⁄⁄& 4
)
⁄⁄4 5
)
⁄⁄5 6
{
€€ 
string
‹‹ 
ignore
‹‹ 
;
‹‹ 

WaveReader
›› 
rdr
›› 
=
››  )
GetAppropriateImpulseReader
››! <
(
››< =
_bformatFilter
››= K
,
››K L
out
››M P
ignore
››Q W
)
››W X
;
››X Y
FastConvolver
ﬁﬁ 
ambiConvolver
ﬁﬁ +
=
ﬁﬁ, -
new
ﬁﬁ. 1
FastConvolver
ﬁﬁ2 ?
(
ﬁﬁ? @
source
ﬁﬁ@ F
,
ﬁﬁF G
rdr
ﬁﬁH K
)
ﬁﬁK L
;
ﬁﬁL M
input
ﬂﬂ 
=
ﬂﬂ 
ambiConvolver
ﬂﬂ %
;
ﬂﬂ% &
}
‡‡ 
IEnumerator
„„ 
<
„„ 
ISample
„„ 
>
„„  
src
„„! $
=
„„% &
input
„„' ,
.
„„, -
Samples
„„- 4
;
„„4 5
CallbackSource
‰‰ 
bin
‰‰ 
=
‰‰  
new
‰‰! $
CallbackSource
‰‰% 3
(
‰‰3 4
$num
‰‰4 5
,
‰‰5 6
sr
‰‰7 9
,
‰‰9 :
delegate
‰‰; C
(
‰‰D E
long
‰‰E I
j
‰‰J K
)
‰‰K L
{
ÂÂ 
if
ÊÊ 
(
ÊÊ 
src
ÊÊ 
.
ÊÊ 
MoveNext
ÊÊ  
(
ÊÊ  !
)
ÊÊ! "
)
ÊÊ" #
{
ÁÁ 
ISample
ËË 
s
ËË 
=
ËË 
src
ËË  #
.
ËË# $
Current
ËË$ +
;
ËË+ ,
double
ÈÈ 
w
ÈÈ 
=
ÈÈ 
s
ÈÈ  
[
ÈÈ  !
$num
ÈÈ! "
]
ÈÈ" #
;
ÈÈ# $
double
ÍÍ 
x
ÍÍ 
=
ÍÍ 
s
ÍÍ  
[
ÍÍ  !
$num
ÍÍ! "
]
ÍÍ" #
;
ÍÍ# $
double
ÎÎ 
y
ÎÎ 
=
ÎÎ 
s
ÎÎ  
[
ÎÎ  !
$num
ÎÎ! "
]
ÎÎ" #
;
ÎÎ# $
double
ÏÏ 
z
ÏÏ 
=
ÏÏ 
s
ÏÏ  
[
ÏÏ  !
$num
ÏÏ! "
]
ÏÏ" #
;
ÏÏ# $
double
ÌÌ 
wFactor
ÌÌ "
=
ÌÌ# $
-
ÌÌ% &
$num
ÌÌ& )
;
ÌÌ) *
double
ÓÓ 
left
ÓÓ 
=
ÓÓ  !
x
ÓÓ" #
+
ÓÓ$ %
y
ÓÓ& '
+
ÓÓ( )
z
ÓÓ* +
+
ÓÓ, -
(
ÓÓ. /
wFactor
ÓÓ/ 6
*
ÓÓ7 8
w
ÓÓ9 :
)
ÓÓ: ;
;
ÓÓ; <
double
ÔÔ 
right
ÔÔ  
=
ÔÔ! "
x
ÔÔ# $
-
ÔÔ% &
y
ÔÔ' (
+
ÔÔ) *
z
ÔÔ+ ,
+
ÔÔ- .
(
ÔÔ/ 0
wFactor
ÔÔ0 7
*
ÔÔ8 9
w
ÔÔ: ;
)
ÔÔ; <
;
ÔÔ< =
ISample
 
sample
 "
=
# $
new
% (
Sample2
) 0
(
0 1
left
1 5
,
5 6
right
7 <
)
< =
;
= >
return
ÒÒ 
sample
ÒÒ !
;
ÒÒ! "
}
ÚÚ 
return
ÛÛ 
null
ÛÛ 
;
ÛÛ 
}
ÙÙ 
)
ÙÙ 
;
ÙÙ 
return
ˆˆ 
bin
ˆˆ 
;
ˆˆ 
}
˜˜ 	
static
˙˙ 
	ISoundObj
˙˙ 
DecodeBFormatUHJ
˙˙ )
(
˙˙) *
	ISoundObj
˙˙* 3
source
˙˙4 :
)
˙˙: ;
{
˚˚ 	
	ISoundObj
¸¸ 
input
¸¸ 
=
¸¸ 
source
¸¸ $
;
¸¸$ %
uint
˝˝ 
sr
˝˝ 
=
˝˝ 
input
˝˝ 
.
˝˝ 

SampleRate
˝˝ &
;
˝˝& '
	ISoundObj
ÉÉ 
channelW
ÉÉ 
=
ÉÉ  
new
ÉÉ! $
SingleChannel
ÉÉ% 2
(
ÉÉ2 3
input
ÉÉ3 8
,
ÉÉ8 9
$num
ÉÉ: ;
)
ÉÉ; <
;
ÉÉ< =
	ISoundObj
ÑÑ 
channelX
ÑÑ 
=
ÑÑ  
new
ÑÑ! $
SingleChannel
ÑÑ% 2
(
ÑÑ2 3
input
ÑÑ3 8
,
ÑÑ8 9
$num
ÑÑ: ;
,
ÑÑ; <
true
ÑÑ= A
)
ÑÑA B
;
ÑÑB C
	ISoundObj
ÖÖ 
channelY
ÖÖ 
=
ÖÖ  
new
ÖÖ! $
SingleChannel
ÖÖ% 2
(
ÖÖ2 3
input
ÖÖ3 8
,
ÖÖ8 9
$num
ÖÖ: ;
,
ÖÖ; <
true
ÖÖ= A
)
ÖÖA B
;
ÖÖB C
int
çç 
len
çç 
=
çç 
$num
çç 
;
çç 
PhaseMultiplier
éé 
xl
éé 
=
éé  
new
éé! $
PhaseMultiplier
éé% 4
(
éé4 5
new
éé5 8
Complex
éé9 @
(
éé@ A
$num
ééA J
,
ééJ K
$num
ééL V
)
ééV W
,
ééW X
len
ééY \
,
éé\ ]
sr
éé^ `
)
éé` a
;
ééa b
PhaseMultiplier
èè 
wl
èè 
=
èè  
new
èè! $
PhaseMultiplier
èè% 4
(
èè4 5
new
èè5 8
Complex
èè9 @
(
èè@ A
$num
èèA J
,
èèJ K
-
èèL M
$num
èèM W
)
èèW X
,
èèX Y
len
èèZ ]
,
èè] ^
sr
èè_ a
)
èèa b
;
èèb c
PhaseMultiplier
êê 
yl
êê 
=
êê  
new
êê! $
PhaseMultiplier
êê% 4
(
êê4 5
new
êê5 8
Complex
êê9 @
(
êê@ A
$num
êêA J
,
êêJ K
$num
êêL V
)
êêV W
,
êêW X
len
êêY \
,
êê\ ]
sr
êê^ `
)
êê` a
;
êêa b
PhaseMultiplier
ëë 
xr
ëë 
=
ëë  
new
ëë! $
PhaseMultiplier
ëë% 4
(
ëë4 5
new
ëë5 8
Complex
ëë9 @
(
ëë@ A
$num
ëëA J
,
ëëJ K
-
ëëL M
$num
ëëM W
)
ëëW X
,
ëëX Y
len
ëëZ ]
,
ëë] ^
sr
ëë_ a
)
ëëa b
;
ëëb c
PhaseMultiplier
íí 
wr
íí 
=
íí  
new
íí! $
PhaseMultiplier
íí% 4
(
íí4 5
new
íí5 8
Complex
íí9 @
(
íí@ A
$num
ííA J
,
ííJ K
$num
ííL V
)
ííV W
,
ííW X
len
ííY \
,
íí\ ]
sr
íí^ `
)
íí` a
;
íía b
PhaseMultiplier
ìì 
yr
ìì 
=
ìì  
new
ìì! $
PhaseMultiplier
ìì% 4
(
ìì4 5
new
ìì5 8
Complex
ìì9 @
(
ìì@ A
-
ììA B
$num
ììB K
,
ììK L
$num
ììM W
)
ììW X
,
ììX Y
len
ììZ ]
,
ìì] ^
sr
ìì_ a
)
ììa b
;
ììb c
FastConvolver
ññ 
cwl
ññ 
=
ññ 
new
ññ  #
FastConvolver
ññ$ 1
(
ññ1 2
channelW
ññ2 :
,
ññ: ;
wl
ññ< >
)
ññ> ?
;
ññ? @
FastConvolver
óó 
cxl
óó 
=
óó 
new
óó  #
FastConvolver
óó$ 1
(
óó1 2
channelX
óó2 :
,
óó: ;
xl
óó< >
)
óó> ?
;
óó? @
FastConvolver
òò 
cyl
òò 
=
òò 
new
òò  #
FastConvolver
òò$ 1
(
òò1 2
channelY
òò2 :
,
òò: ;
yl
òò< >
)
òò> ?
;
òò? @
FastConvolver
ôô 
cwr
ôô 
=
ôô 
new
ôô  #
FastConvolver
ôô$ 1
(
ôô1 2
channelW
ôô2 :
,
ôô: ;
wr
ôô< >
)
ôô> ?
;
ôô? @
FastConvolver
öö 
cxr
öö 
=
öö 
new
öö  #
FastConvolver
öö$ 1
(
öö1 2
channelX
öö2 :
,
öö: ;
xr
öö< >
)
öö> ?
;
öö? @
FastConvolver
õõ 
cyr
õõ 
=
õõ 
new
õõ  #
FastConvolver
õõ$ 1
(
õõ1 2
channelY
õõ2 :
,
õõ: ;
yr
õõ< >
)
õõ> ?
;
õõ? @
Mixer
ûû 
mixerL
ûû 
=
ûû 
new
ûû 
Mixer
ûû $
(
ûû$ %
)
ûû% &
;
ûû& '
mixerL
üü 
.
üü 
Add
üü 
(
üü 
cwl
üü 
,
üü 
$num
üü 
)
üü  
;
üü  !
mixerL
†† 
.
†† 
Add
†† 
(
†† 
cxl
†† 
,
†† 
$num
†† 
)
††  
;
††  !
mixerL
°° 
.
°° 
Add
°° 
(
°° 
cyl
°° 
,
°° 
$num
°° 
)
°°  
;
°°  !
Mixer
££ 
mixerR
££ 
=
££ 
new
££ 
Mixer
££ $
(
££$ %
)
££% &
;
££& '
mixerR
§§ 
.
§§ 
Add
§§ 
(
§§ 
cwr
§§ 
,
§§ 
$num
§§ 
)
§§  
;
§§  !
mixerR
•• 
.
•• 
Add
•• 
(
•• 
cxr
•• 
,
•• 
$num
•• 
)
••  
;
••  !
mixerR
¶¶ 
.
¶¶ 
Add
¶¶ 
(
¶¶ 
cyr
¶¶ 
,
¶¶ 
$num
¶¶ 
)
¶¶  
;
¶¶  !
ChannelSplicer
©© 
uhj
©© 
=
©©  
new
©©! $
ChannelSplicer
©©% 3
(
©©3 4
)
©©4 5
;
©©5 6
uhj
™™ 
.
™™ 
Add
™™ 
(
™™ 
mixerL
™™ 
)
™™ 
;
™™ 
uhj
´´ 
.
´´ 
Add
´´ 
(
´´ 
mixerR
´´ 
)
´´ 
;
´´ 
return
≠≠ 
uhj
≠≠ 
;
≠≠ 
}
ÆÆ 	
private
≥≥ 
static
≥≥ 
	ISoundObj
≥≥   
GetQuietnessFilter
≥≥! 3
(
≥≥3 4
uint
≥≥4 8
nSampleRate
≥≥9 D
,
≥≥D E
double
≥≥F L

nQuietness
≥≥M W
)
≥≥W X
{
¥¥ 	
if
µµ 
(
µµ 

nQuietness
µµ 
==
µµ 
$num
µµ 
)
µµ  
{
∂∂ 
return
∑∑ 
null
∑∑ 
;
∑∑ 
}
∏∏ 
DateTime
ºº 
dtStart
ºº 
=
ºº 
DateTime
ºº '
.
ºº' (
Now
ºº( +
;
ºº+ ,
FilterProfile
ΩΩ 
spl
ΩΩ 
=
ΩΩ 
Loudness
ΩΩ  (
.
ΩΩ( )
DifferentialSPL
ΩΩ) 8
(
ΩΩ8 9
$num
ΩΩ9 ;
,
ΩΩ; <
$num
ΩΩ= ?
+
ΩΩ@ A
(
ΩΩB C

nQuietness
ΩΩC M
/
ΩΩN O
$num
ΩΩP Q
)
ΩΩQ R
)
ΩΩR S
;
ΩΩS T
	ISoundObj
ææ 
filterImpulse
ææ #
=
ææ$ %
new
ææ& )
FilterImpulse
ææ* 7
(
ææ7 8
$num
ææ8 <
,
ææ< =
spl
ææ> A
,
ææA B!
FilterInterpolation
ææC V
.
ææV W
COSINE
ææW ]
,
ææ] ^
nSampleRate
ææ_ j
)
ææj k
;
ææk l
if
øø 
(
øø 
_debug
øø 
)
øø 
{
¿¿ 
TimeSpan
¡¡ 
ts
¡¡ 
=
¡¡ 
DateTime
¡¡ &
.
¡¡& '
Now
¡¡' *
.
¡¡* +
Subtract
¡¡+ 3
(
¡¡3 4
dtStart
¡¡4 ;
)
¡¡; <
;
¡¡< =
Trace
¬¬ 
.
¬¬ 
	WriteLine
¬¬ 
(
¬¬  
$str
¬¬  7
+
¬¬8 9
ts
¬¬: <
.
¬¬< =
TotalMilliseconds
¬¬= N
)
¬¬N O
;
¬¬O P
string
≈≈ 
sPath
≈≈ 
=
≈≈ 
Path
≈≈ #
.
≈≈# $
Combine
≈≈$ +
(
≈≈+ ,
_tempFolder
≈≈, 7
,
≈≈7 8
$str
≈≈9 >
+
≈≈? @

nQuietness
≈≈A K
)
≈≈K L
;
≈≈L M

WaveWriter
∆∆ 
wri
∆∆ 
=
∆∆  
new
∆∆! $

WaveWriter
∆∆% /
(
∆∆/ 0
sPath
∆∆0 5
+
∆∆6 7
$str
∆∆8 >
)
∆∆> ?
;
∆∆? @
wri
«« 
.
«« 
Input
«« 
=
«« 
filterImpulse
«« )
;
««) *
wri
»» 
.
»» 
Format
»» 
=
»» 

WaveFormat
»» '
.
»»' (
PCM
»»( +
;
»»+ ,
wri
…… 
.
…… 
BitsPerSample
…… !
=
……" #
$num
……$ &
;
……& '
wri
   
.
   
Normalization
   !
=
  " #
-
  $ %
$num
  % (
;
  ( )
wri
ÀÀ 
.
ÀÀ 
Dither
ÀÀ 
=
ÀÀ 

DitherType
ÀÀ '
.
ÀÀ' (
NONE
ÀÀ( ,
;
ÀÀ, -
wri
ÃÃ 
.
ÃÃ 
Run
ÃÃ 
(
ÃÃ 
)
ÃÃ 
;
ÃÃ 
wri
ÕÕ 
.
ÕÕ 
Close
ÕÕ 
(
ÕÕ 
)
ÕÕ 
;
ÕÕ 
ts
œœ 
=
œœ 
DateTime
œœ 
.
œœ 
Now
œœ !
.
œœ! "
Subtract
œœ" *
(
œœ* +
dtStart
œœ+ 2
)
œœ2 3
;
œœ3 4
Trace
–– 
.
–– 
	WriteLine
–– 
(
––  
$str
––  5
+
––6 7
ts
––8 :
.
––: ;
TotalMilliseconds
––; L
)
––L M
;
––M N
}
—— 
return
““ 
filterImpulse
““  
;
““  !
}
”” 	
private
ÿÿ 
static
ÿÿ 
string
ÿÿ  
FlatnessFilterName
ÿÿ 0
(
ÿÿ0 1
string
ÿÿ1 7
impulsePath
ÿÿ8 C
,
ÿÿC D
uint
ÿÿE I

sampleRate
ÿÿJ T
,
ÿÿT U
double
ÿÿV \
	nFlatness
ÿÿ] f
)
ÿÿf g
{
ŸŸ 	
string
ﬁﬁ 
hashKey
ﬁﬁ 
=
ﬁﬁ 
$str
ﬁﬁ 
;
ﬁﬁ  
if
ﬂﬂ 
(
ﬂﬂ 
impulsePath
ﬂﬂ 
!=
ﬂﬂ 
null
ﬂﬂ #
)
ﬂﬂ# $
{
‡‡ 
string
·· 
s
·· 
=
·· 
impulsePath
·· &
;
··& '
s
‚‚ 
+=
‚‚ 
File
‚‚ 
.
‚‚ !
GetLastWriteTimeUtc
‚‚ -
(
‚‚- .
impulsePath
‚‚. 9
)
‚‚9 :
.
‚‚: ;
Ticks
‚‚; @
.
‚‚@ A
ToString
‚‚A I
(
‚‚I J
)
‚‚J K
;
‚‚K L
hashKey
„„ 
=
„„ 
s
„„ 
.
„„ 
GetHashCode
„„ '
(
„„' (
)
„„( )
.
„„) *
ToString
„„* 2
(
„„2 3
$str
„„3 8
)
„„8 9
.
„„9 :
ToUpperInvariant
„„: J
(
„„J K
)
„„K L
;
„„L M
}
‰‰ 
string
ÂÂ 
filterNameBase
ÂÂ !
=
ÂÂ" #
$str
ÂÂ$ (
+
ÂÂ) *
hashKey
ÂÂ+ 2
+
ÂÂ3 4
$str
ÂÂ5 8
+
ÂÂ9 :

sampleRate
ÂÂ; E
;
ÂÂE F
return
ÊÊ 
filterNameBase
ÊÊ !
+
ÊÊ" #
$str
ÊÊ$ '
+
ÊÊ( )
	nFlatness
ÊÊ* 3
;
ÊÊ3 4
}
ÁÁ 	
private
ÈÈ 
static
ÈÈ 
string
ÈÈ  
FlatnessFilterPath
ÈÈ 0
(
ÈÈ0 1
string
ÈÈ1 7
impulsePath
ÈÈ8 C
,
ÈÈC D
uint
ÈÈE I

sampleRate
ÈÈJ T
,
ÈÈT U
double
ÈÈV \
	nFlatness
ÈÈ] f
)
ÈÈf g
{
ÍÍ 	
string
ÎÎ 
filterFileBase
ÎÎ !
=
ÎÎ" #
Path
ÎÎ$ (
.
ÎÎ( )
Combine
ÎÎ) 0
(
ÎÎ0 1
_tempFolder
ÎÎ1 <
,
ÎÎ< = 
FlatnessFilterName
ÎÎ> P
(
ÎÎP Q
impulsePath
ÎÎQ \
,
ÎÎ\ ]

sampleRate
ÎÎ^ h
,
ÎÎh i
	nFlatness
ÎÎj s
)
ÎÎs t
)
ÎÎt u
;
ÎÎu v
string
ÏÏ 

filterFile
ÏÏ 
=
ÏÏ 
filterFileBase
ÏÏ  .
+
ÏÏ/ 0
$str
ÏÏ1 :
;
ÏÏ: ;
return
ÌÌ 

filterFile
ÌÌ 
;
ÌÌ 
}
ÓÓ 	
private
 
static
 
	ISoundObj
  
GetFlatnessFilter
! 2
(
2 3
string
3 9
impulsePath
: E
,
E F
	ISoundObj
G P

impulseObj
Q [
,
[ \
double
] c
	nFlatness
d m
)
m n
{
ÒÒ 	
	ISoundObj
ÚÚ 
filter
ÚÚ 
=
ÚÚ 
null
ÚÚ #
;
ÚÚ# $
if
ÛÛ 
(
ÛÛ 

impulseObj
ÛÛ 
!=
ÛÛ 
null
ÛÛ "
&&
ÛÛ# %
impulsePath
ÛÛ& 1
!=
ÛÛ2 4
null
ÛÛ5 9
&&
ÛÛ: <
	nFlatness
ÛÛ= F
!=
ÛÛG I
$num
ÛÛJ M
)
ÛÛM N
{
ÙÙ 
uint
ıı 
sr
ıı 
=
ıı 

impulseObj
ıı $
.
ıı$ %

SampleRate
ıı% /
;
ıı/ 0
if
ˆˆ 
(
ˆˆ 
_debug
ˆˆ 
)
ˆˆ 
{
˜˜ 
Trace
¯¯ 
.
¯¯ 
	WriteLine
¯¯ #
(
¯¯# $ 
FlatnessFilterName
¯¯$ 6
(
¯¯6 7
impulsePath
¯¯7 B
,
¯¯B C
sr
¯¯D F
,
¯¯F G
	nFlatness
¯¯H Q
)
¯¯Q R
)
¯¯R S
;
¯¯S T
}
˘˘ 
string
¸¸ 
sFile
¸¸ 
=
¸¸  
FlatnessFilterPath
¸¸ 1
(
¸¸1 2
impulsePath
¸¸2 =
,
¸¸= >
sr
¸¸? A
,
¸¸A B
	nFlatness
¸¸C L
)
¸¸L M
;
¸¸M N
if
˝˝ 
(
˝˝ 
File
˝˝ 
.
˝˝ 
Exists
˝˝ 
(
˝˝  
sFile
˝˝  %
)
˝˝% &
)
˝˝& '
{
˛˛ 
try
ˇˇ 
{
ÄÄ 
filter
ÅÅ 
=
ÅÅ  
new
ÅÅ! $

WaveReader
ÅÅ% /
(
ÅÅ/ 0
sFile
ÅÅ0 5
)
ÅÅ5 6
;
ÅÅ6 7
}
ÇÇ 
catch
ÉÉ 
(
ÉÉ 
	Exception
ÉÉ $
e
ÉÉ% &
)
ÉÉ& '
{
ÑÑ 
if
ÖÖ 
(
ÖÖ 
_debug
ÖÖ "
)
ÖÖ" #
{
ÜÜ 
Trace
áá !
.
áá! "
	WriteLine
áá" +
(
áá+ ,
$str
áá, A
+
ááB C
e
ááD E
.
ááE F
Message
ááF M
)
ááM N
;
ááN O
}
àà 
}
ââ 
}
ää 
if
ãã 
(
ãã 
filter
ãã 
==
ãã 
null
ãã "
)
ãã" #
{
åå 
return
éé $
GenerateFlatnessFilter
éé 1
(
éé1 2
impulsePath
éé2 =
,
éé= >

impulseObj
éé? I
,
ééI J
	nFlatness
ééK T
)
ééT U
;
ééU V
}
èè 
}
êê 
return
ëë 
filter
ëë 
;
ëë 
}
íí 	
private
ïï 
static
ïï 
	ISoundObj
ïï  $
GenerateFlatnessFilter
ïï! 7
(
ïï7 8
string
ïï8 >
impulsePath
ïï? J
,
ïïJ K
	ISoundObj
ïïL U

impulseObj
ïïV `
,
ïï` a
double
ïïb h
	nFlatness
ïïi r
)
ïïr s
{
ññ 	
DateTime
úú 
dtStart
úú 
=
úú 
DateTime
úú '
.
úú' (
Now
úú( +
;
úú+ ,
	ISoundObj
ùù 
filterImpulse
ùù #
=
ùù$ %
null
ùù& *
;
ùù* +
uint
ûû 
nSR
ûû 
=
ûû 

impulseObj
ûû !
.
ûû! "

SampleRate
ûû" ,
;
ûû, -
uint
üü 
nSR2
üü 
=
üü 
nSR
üü 
/
üü 
$num
üü 
;
üü  
string
†† 
sPath
†† 
=
††  
FlatnessFilterPath
†† -
(
††- .
impulsePath
††. 9
,
††9 :
nSR
††; >
,
††> ?
	nFlatness
††@ I
)
††I J
;
††J K
double
§§ 
detail
§§ 
=
§§ 
(
§§ 
	nFlatness
§§ &
/
§§' (
$num
§§) +
)
§§+ ,
+
§§- .
$num
§§/ 3
;
§§3 4
FilterProfile
ßß 
lfg
ßß 
=
ßß 
new
ßß  #
FilterProfile
ßß$ 1
(
ßß1 2

impulseObj
ßß2 <
,
ßß< =
detail
ßß> D
)
ßßD E
;
ßßE F
lfg
™™ 
=
™™ 
lfg
™™ 
*
™™ 
(
™™ 
(
™™ 
$num
™™ 
-
™™ 
	nFlatness
™™  )
)
™™) *
/
™™+ ,
$num
™™- 0
)
™™0 1
;
™™1 2
lfg
≠≠ 
=
≠≠ 
lfg
≠≠ 
.
≠≠ 
Inverse
≠≠ 
(
≠≠ 
$num
≠≠  
)
≠≠  !
;
≠≠! "
lfg
∞∞ 
.
∞∞ 
Add
∞∞ 
(
∞∞ 
new
∞∞ 
FreqGain
∞∞  
(
∞∞  !
nSR2
∞∞! %
-
∞∞& '
$num
∞∞( +
,
∞∞+ ,
$num
∞∞- .
)
∞∞. /
)
∞∞/ 0
;
∞∞0 1
filterImpulse
≥≥ 
=
≥≥ 
new
≥≥ 
FilterImpulse
≥≥  -
(
≥≥- .
$num
≥≥. 2
,
≥≥2 3
lfg
≥≥4 7
,
≥≥7 8!
FilterInterpolation
≥≥9 L
.
≥≥L M
COSINE
≥≥M S
,
≥≥S T
nSR
≥≥U X
)
≥≥X Y
;
≥≥Y Z
try
µµ 
{
∂∂ 

WaveWriter
∏∏ 
wri
∏∏ 
=
∏∏  
new
∏∏! $

WaveWriter
∏∏% /
(
∏∏/ 0
sPath
∏∏0 5
)
∏∏5 6
;
∏∏6 7
wri
ππ 
.
ππ 
Input
ππ 
=
ππ 
filterImpulse
ππ )
;
ππ) *
wri
∫∫ 
.
∫∫ 
Format
∫∫ 
=
∫∫ 

WaveFormat
∫∫ '
.
∫∫' (

IEEE_FLOAT
∫∫( 2
;
∫∫2 3
wri
ªª 
.
ªª 
BitsPerSample
ªª !
=
ªª" #
$num
ªª$ &
;
ªª& '
wri
ºº 
.
ºº 
Run
ºº 
(
ºº 
)
ºº 
;
ºº 
wri
ΩΩ 
.
ΩΩ 
Close
ΩΩ 
(
ΩΩ 
)
ΩΩ 
;
ΩΩ 
if
øø 
(
øø 
_debug
øø 
)
øø 
{
¿¿ 
wri
¬¬ 
=
¬¬ 
new
¬¬ 

WaveWriter
¬¬ (
(
¬¬( )
sPath
¬¬) .
+
¬¬/ 0
$str
¬¬1 7
)
¬¬7 8
;
¬¬8 9
wri
√√ 
.
√√ 
Input
√√ 
=
√√ 
filterImpulse
√√  -
;
√√- .
wri
ƒƒ 
.
ƒƒ 
Format
ƒƒ 
=
ƒƒ  

WaveFormat
ƒƒ! +
.
ƒƒ+ ,
PCM
ƒƒ, /
;
ƒƒ/ 0
wri
≈≈ 
.
≈≈ 
BitsPerSample
≈≈ %
=
≈≈& '
$num
≈≈( *
;
≈≈* +
wri
∆∆ 
.
∆∆ 
Normalization
∆∆ %
=
∆∆& '
-
∆∆( )
$num
∆∆) ,
;
∆∆, -
wri
«« 
.
«« 
Dither
«« 
=
««  

DitherType
««! +
.
««+ ,
NONE
««, 0
;
««0 1
wri
»» 
.
»» 
Run
»» 
(
»» 
)
»» 
;
»» 
wri
…… 
.
…… 
Close
…… 
(
…… 
)
…… 
;
……  
}
   
}
ÀÀ 
catch
ÃÃ 
(
ÃÃ 
	Exception
ÃÃ 
e
ÃÃ 
)
ÃÃ 
{
ÕÕ 
if
ŒŒ 
(
ŒŒ 
_debug
ŒŒ 
)
ŒŒ 
{
œœ 
Trace
–– 
.
–– 
	WriteLine
–– #
(
––# $
$str
––$ >
+
––? @
e
––A B
.
––B C
Message
––C J
)
––J K
;
––K L
}
—— 
}
““ 

impulseObj
‘‘ 
.
‘‘ 
Reset
‘‘ 
(
‘‘ 
)
‘‘ 
;
‘‘ 
if
’’ 
(
’’ 
_debug
’’ 
)
’’ 
{
÷÷ 
TimeSpan
◊◊ 
ts
◊◊ 
=
◊◊ 
DateTime
◊◊ &
.
◊◊& '
Now
◊◊' *
.
◊◊* +
Subtract
◊◊+ 3
(
◊◊3 4
dtStart
◊◊4 ;
)
◊◊; <
;
◊◊< =
Trace
ÿÿ 
.
ÿÿ 
	WriteLine
ÿÿ 
(
ÿÿ  
$str
ÿÿ  9
+
ÿÿ: ;
ts
ÿÿ< >
.
ÿÿ> ?
TotalMilliseconds
ÿÿ? P
)
ÿÿP Q
;
ÿÿQ R
}
ŸŸ 
return
⁄⁄ 
filterImpulse
⁄⁄  
;
⁄⁄  !
}
€€ 	
static
ﬁﬁ 
string
ﬁﬁ %
GetResampledImpulsePath
ﬁﬁ -
(
ﬁﬁ- .
string
ﬁﬁ. 4
filePath
ﬁﬁ5 =
)
ﬁﬁ= >
{
ﬂﬂ 	
string
ÊÊ 
newName
ÊÊ 
=
ÊÊ 
	CleanPath
ÊÊ &
(
ÊÊ& '
_dataFolder
ÊÊ' 2
,
ÊÊ2 3
filePath
ÊÊ4 <
)
ÊÊ< =
;
ÊÊ= >
foreach
ÁÁ 
(
ÁÁ 
char
ÁÁ 
c
ÁÁ 
in
ÁÁ 
System
ÁÁ %
.
ÁÁ% &
IO
ÁÁ& (
.
ÁÁ( )
Path
ÁÁ) -
.
ÁÁ- .%
GetInvalidFileNameChars
ÁÁ. E
(
ÁÁE F
)
ÁÁF G
)
ÁÁG H
{
ËË 
newName
ÈÈ 
=
ÈÈ 
newName
ÈÈ !
.
ÈÈ! "
Replace
ÈÈ" )
(
ÈÈ) *
c
ÈÈ* +
,
ÈÈ+ ,
$char
ÈÈ- 0
)
ÈÈ0 1
;
ÈÈ1 2
}
ÍÍ 
string
ÎÎ 
prefix
ÎÎ 
=
ÎÎ 
_inputSampleRate
ÎÎ ,
+
ÎÎ- .
$str
ÎÎ/ 2
;
ÎÎ2 3
if
ÏÏ 
(
ÏÏ 
File
ÏÏ 
.
ÏÏ 
Exists
ÏÏ 
(
ÏÏ 
filePath
ÏÏ $
)
ÏÏ$ %
)
ÏÏ% &
{
ÌÌ 
prefix
ÓÓ 
=
ÓÓ 
prefix
ÓÓ 
+
ÓÓ  !
File
ÓÓ" &
.
ÓÓ& '!
GetLastWriteTimeUtc
ÓÓ' :
(
ÓÓ: ;
filePath
ÓÓ; C
)
ÓÓC D
.
ÓÓD E
GetHashCode
ÓÓE P
(
ÓÓP Q
)
ÓÓQ R
.
ÓÓR S
ToString
ÓÓS [
(
ÓÓ[ \
$str
ÓÓ\ a
)
ÓÓa b
.
ÓÓb c
ToUpperInvariant
ÓÓc s
(
ÓÓs t
)
ÓÓt u
+
ÓÓv w
$str
ÓÓx {
;
ÓÓ{ |
}
ÔÔ 
newName
 
=
 
prefix
 
+
 
newName
 &
;
& '
return
ÒÒ 
Path
ÒÒ 
.
ÒÒ 
Combine
ÒÒ 
(
ÒÒ  
_tempFolder
ÒÒ  +
,
ÒÒ+ ,
newName
ÒÒ- 4
)
ÒÒ4 5
;
ÒÒ5 6
}
ÛÛ 	
static
ıı 

WaveReader
ıı )
GetAppropriateImpulseReader
ıı 5
(
ıı5 6
string
ıı6 <
filePath
ıı= E
,
ııE F
out
ııG J
string
ııK Q

actualPath
ııR \
)
ıı\ ]
{
ˆˆ 	
return
˜˜ ,
TryGetAppropriateImpulseReader
˜˜ 1
(
˜˜1 2
filePath
˜˜2 :
,
˜˜: ;
true
˜˜< @
,
˜˜@ A
out
˜˜B E

actualPath
˜˜F P
)
˜˜P Q
;
˜˜Q R
}
¯¯ 	
static
˙˙ 

WaveReader
˙˙ ,
TryGetAppropriateImpulseReader
˙˙ 8
(
˙˙8 9
string
˙˙9 ?
filePath
˙˙@ H
,
˙˙H I
bool
˙˙J N
allowResample
˙˙O \
,
˙˙\ ]
out
˙˙^ a
string
˙˙b h

actualPath
˙˙i s
)
˙˙s t
{
˚˚ 	

WaveReader
¸¸ 
rdr
¸¸ 
=
¸¸ 
null
¸¸ !
;
¸¸! "
bool
˝˝  
isExtensibleFormat
˝˝ #
=
˝˝$ %
false
˝˝& +
;
˝˝+ ,

WaveFormat
˛˛ 
format
˛˛ 
=
˛˛ 

WaveFormat
˛˛  *
.
˛˛* +
ANY
˛˛+ .
;
˛˛. /
bool
ˇˇ 
needResample
ˇˇ 
=
ˇˇ 
false
ˇˇ  %
;
ˇˇ% &
string
ÄÄ 
resamplePath
ÄÄ 
=
ÄÄ  !%
GetResampledImpulsePath
ÄÄ" 9
(
ÄÄ9 :
filePath
ÄÄ: B
)
ÄÄB C
;
ÄÄC D

actualPath
ÅÅ 
=
ÅÅ 
null
ÅÅ 
;
ÅÅ 
if
ÑÑ 
(
ÑÑ 
File
ÑÑ 
.
ÑÑ 
Exists
ÑÑ 
(
ÑÑ 
filePath
ÑÑ $
)
ÑÑ$ %
)
ÑÑ% &
{
ÖÖ 
try
ÜÜ 
{
áá 
rdr
àà 
=
àà 
new
àà 

WaveReader
àà (
(
àà( )
filePath
àà) 1
)
àà1 2
;
àà2 3

actualPath
ââ 
=
ââ  
filePath
ââ! )
;
ââ) *
if
ää 
(
ää 
rdr
ää 
.
ää 

SampleRate
ää &
!=
ää' )
$num
ää* +
&&
ää, .
rdr
ää/ 2
.
ää2 3

SampleRate
ää3 =
!=
ää> @
_inputSampleRate
ääA Q
)
ääQ R
{
ãã 
Trace
åå 
.
åå 
	WriteLine
åå '
(
åå' (
$str
åå( W
,
ååW X
	CleanPath
ååY b
(
ååb c
_dataFolder
ååc n
,
åån o
filePath
ååp x
)
ååx y
,
ååy z
rdr
åå{ ~
.
åå~ 

SampleRateåå â
,ååâ ä 
_inputSampleRateååã õ
)ååõ ú
;ååú ù 
isExtensibleFormat
çç *
=
çç+ ,
(
çç- .
rdr
çç. 1
.
çç1 2
FormatEx
çç2 :
!=
çç; =
null
çç> B
)
ççB C
;
ççC D
format
éé 
=
éé  
rdr
éé! $
.
éé$ %
Format
éé% +
;
éé+ ,
rdr
èè 
.
èè 
Close
èè !
(
èè! "
)
èè" #
;
èè# $
rdr
êê 
=
êê 
null
êê "
;
êê" #

actualPath
ëë "
=
ëë# $
null
ëë% )
;
ëë) *
needResample
íí $
=
íí% &
true
íí' +
;
íí+ ,
}
ìì 
}
îî 
catch
ïï 
(
ïï 
	Exception
ïï  
e
ïï! "
)
ïï" #
{
ññ 
Trace
óó 
.
óó 
	WriteLine
óó #
(
óó# $
$str
óó$ 8
,
óó8 9
	CleanPath
óó: C
(
óóC D
_dataFolder
óóD O
,
óóO P
filePath
óóQ Y
)
óóY Z
,
óóZ [
e
óó\ ]
.
óó] ^
Message
óó^ e
)
óóe f
;
óóf g
}
òò 
}
ôô 
else
öö 
{
õõ 
Trace
úú 
.
úú 
	WriteLine
úú 
(
úú  
$str
úú  :
,
úú: ;
	CleanPath
úú< E
(
úúE F
_dataFolder
úúF Q
,
úúQ R
filePath
úúS [
)
úú[ \
)
úú\ ]
;
úú] ^
}
ùù 
if
üü 
(
üü 
rdr
üü 
==
üü 
null
üü 
)
üü 
{
†† 
if
¢¢ 
(
¢¢ 
File
¢¢ 
.
¢¢ 
Exists
¢¢ 
(
¢¢  
resamplePath
¢¢  ,
)
¢¢, -
)
¢¢- .
{
££ 
try
§§ 
{
•• 
rdr
¶¶ 
=
¶¶ 
new
¶¶ !

WaveReader
¶¶" ,
(
¶¶, -
resamplePath
¶¶- 9
)
¶¶9 :
;
¶¶: ;
if
ßß 
(
ßß 
rdr
ßß 
.
ßß  

SampleRate
ßß  *
!=
ßß+ -
$num
ßß. /
&&
ßß0 2
rdr
ßß3 6
.
ßß6 7

SampleRate
ßß7 A
!=
ßßB D
_inputSampleRate
ßßE U
)
ßßU V
{
®® 
Trace
™™ !
.
™™! "
	WriteLine
™™" +
(
™™+ ,
$str
™™, [
,
™™[ \
	CleanPath
™™] f
(
™™f g
_dataFolder
™™g r
,
™™r s
resamplePath™™t Ä
)™™Ä Å
,™™Å Ç
rdr™™É Ü
.™™Ü á

SampleRate™™á ë
,™™ë í 
_inputSampleRate™™ì £
)™™£ §
;™™§ •
rdr
´´ 
.
´´  
Close
´´  %
(
´´% &
)
´´& '
;
´´' (
rdr
¨¨ 
=
¨¨  !
null
¨¨" &
;
¨¨& '
}
≠≠ 
else
ÆÆ 
{
ØØ 

actualPath
∞∞ &
=
∞∞' (
resamplePath
∞∞) 5
;
∞∞5 6
Trace
±± !
.
±±! "
	WriteLine
±±" +
(
±±+ ,
$str
±±, Q
,
±±Q R
	CleanPath
±±S \
(
±±\ ]
_dataFolder
±±] h
,
±±h i
resamplePath
±±j v
)
±±v w
)
±±w x
;
±±x y
needResample
≤≤ (
=
≤≤) *
false
≤≤+ 0
;
≤≤0 1
}
≥≥ 
}
¥¥ 
catch
µµ 
(
µµ 
	Exception
µµ $
e
µµ% &
)
µµ& '
{
∂∂ 
Trace
∑∑ 
.
∑∑ 
	WriteLine
∑∑ '
(
∑∑' (
$str
∑∑( <
,
∑∑< =
	CleanPath
∑∑> G
(
∑∑G H
_dataFolder
∑∑H S
,
∑∑S T
resamplePath
∑∑U a
)
∑∑a b
,
∑∑b c
e
∑∑d e
.
∑∑e f
Message
∑∑f m
)
∑∑m n
;
∑∑n o
}
∏∏ 
}
ππ 
else
∫∫ 
if
∫∫ 
(
∫∫ 
allowResample
∫∫ &
)
∫∫& '
{
ªª 
Trace
ºº 
.
ºº 
	WriteLine
ºº #
(
ºº# $
$str
ºº$ >
,
ºº> ?
	CleanPath
ºº@ I
(
ººI J
_dataFolder
ººJ U
,
ººU V
resamplePath
ººW c
)
ººc d
)
ººd e
;
ººe f
}
ΩΩ 
}
ææ 
if
¿¿ 
(
¿¿ 
needResample
¿¿ 
&&
¿¿ 
allowResample
¿¿  -
)
¿¿- .
{
¡¡ 
if
œœ 
(
œœ  
isExtensibleFormat
œœ &
)
œœ& '
{
–– 
rdr
‘‘ 
=
‘‘ 
new
‘‘ 

WaveReader
‘‘ (
(
‘‘( )
filePath
‘‘) 1
)
‘‘1 2
;
‘‘2 3
string
’’ 
newFile
’’ "
=
’’# $
$str
’’% )
+
’’* +
filePath
’’, 4
.
’’4 5
GetHashCode
’’5 @
(
’’@ A
)
’’A B
.
’’B C
ToString
’’C K
(
’’K L
$str
’’L Q
)
’’Q R
.
’’R S
ToUpperInvariant
’’S c
(
’’c d
)
’’d e
+
’’f g
$str
’’h n
;
’’n o
string
÷÷ 
newPath
÷÷ "
=
÷÷# $
Path
÷÷% )
.
÷÷) *
Combine
÷÷* 1
(
÷÷1 2
_tempFolder
÷÷2 =
,
÷÷= >
newFile
÷÷? F
)
÷÷F G
;
÷÷G H

WaveWriter
◊◊ 

tempWriter
◊◊ )
=
◊◊* +
new
◊◊, /

WaveWriter
◊◊0 :
(
◊◊: ;
newPath
◊◊; B
)
◊◊B C
;
◊◊C D

tempWriter
ÿÿ 
.
ÿÿ 
Input
ÿÿ $
=
ÿÿ% &
rdr
ÿÿ' *
;
ÿÿ* +

tempWriter
ŸŸ 
.
ŸŸ 
Format
ŸŸ %
=
ŸŸ& '
rdr
ŸŸ( +
.
ŸŸ+ ,
Format
ŸŸ, 2
;
ŸŸ2 3

tempWriter
⁄⁄ 
.
⁄⁄ 
BitsPerSample
⁄⁄ ,
=
⁄⁄- .
rdr
⁄⁄/ 2
.
⁄⁄2 3
BitsPerSample
⁄⁄3 @
;
⁄⁄@ A

tempWriter
€€ 
.
€€ 
Normalization
€€ ,
=
€€- .
-
€€/ 0
$num
€€0 1
;
€€1 2

tempWriter
‹‹ 
.
‹‹ 
Run
‹‹ "
(
‹‹" #
)
‹‹# $
;
‹‹$ %

tempWriter
›› 
.
›› 
Close
›› $
(
››$ %
)
››% &
;
››& '
rdr
ﬁﬁ 
.
ﬁﬁ 
Close
ﬁﬁ 
(
ﬁﬁ 
)
ﬁﬁ 
;
ﬁﬁ  
rdr
ﬂﬂ 
=
ﬂﬂ 
null
ﬂﬂ 
;
ﬂﬂ 
filePath
‡‡ 
=
‡‡ 
newPath
‡‡ &
;
‡‡& '
}
·· 
string
‰‰ 
exeName
‰‰ 
=
‰‰  
_soxExe
‰‰! (
;
‰‰( )
if
ÂÂ 
(
ÂÂ 
File
ÂÂ 
.
ÂÂ 
Exists
ÂÂ 
(
ÂÂ  
Path
ÂÂ  $
.
ÂÂ$ %
Combine
ÂÂ% ,
(
ÂÂ, -
_pluginFolder
ÂÂ- :
,
ÂÂ: ;
_soxExe
ÂÂ< C
+
ÂÂD E
$str
ÂÂF L
)
ÂÂL M
)
ÂÂM N
)
ÂÂN O
{
ÊÊ 
exeName
ÁÁ 
=
ÁÁ 
$str
ÁÁ "
+
ÁÁ# $
Path
ÁÁ% )
.
ÁÁ) *
Combine
ÁÁ* 1
(
ÁÁ1 2
_pluginFolder
ÁÁ2 ?
,
ÁÁ? @
_soxExe
ÁÁA H
+
ÁÁI J
$str
ÁÁK Q
)
ÁÁQ R
+
ÁÁS T
$str
ÁÁU Y
;
ÁÁY Z
}
ËË 
else
ÈÈ 
if
ÈÈ 
(
ÈÈ 
File
ÈÈ 
.
ÈÈ 
Exists
ÈÈ $
(
ÈÈ$ %
Path
ÈÈ% )
.
ÈÈ) *
Combine
ÈÈ* 1
(
ÈÈ1 2
_pluginFolder
ÈÈ2 ?
,
ÈÈ? @
_soxExe
ÈÈA H
)
ÈÈH I
)
ÈÈI J
)
ÈÈJ K
{
ÍÍ 
exeName
ÎÎ 
=
ÎÎ 
Path
ÎÎ "
.
ÎÎ" #
Combine
ÎÎ# *
(
ÎÎ* +
_pluginFolder
ÎÎ+ 8
,
ÎÎ8 9
_soxExe
ÎÎ: A
)
ÎÎA B
;
ÎÎB C
}
ÏÏ 
string
ÔÔ 
soxArgs
ÔÔ 
=
ÔÔ  
String
ÔÔ! '
.
ÔÔ' (
Format
ÔÔ( .
(
ÔÔ. /
_soxFmt
ÔÔ/ 6
,
ÔÔ6 7
filePath
ÔÔ8 @
,
ÔÔ@ A
_inputSampleRate
ÔÔB R
,
ÔÔR S
resamplePath
ÔÔT `
)
ÔÔ` a
;
ÔÔa b
Trace
ÒÒ 
.
ÒÒ 
	WriteLine
ÒÒ 
(
ÒÒ  
$str
ÒÒ  0
,
ÒÒ0 1
exeName
ÒÒ2 9
,
ÒÒ9 :
soxArgs
ÒÒ; B
)
ÒÒB C
;
ÒÒC D
System
ÛÛ 
.
ÛÛ 
Diagnostics
ÛÛ "
.
ÛÛ" #
Process
ÛÛ# *

soxProcess
ÛÛ+ 5
=
ÛÛ6 7
new
ÛÛ8 ;
System
ÛÛ< B
.
ÛÛB C
Diagnostics
ÛÛC N
.
ÛÛN O
Process
ÛÛO V
(
ÛÛV W
)
ÛÛW X
;
ÛÛX Y
System
ÙÙ 
.
ÙÙ 
Diagnostics
ÙÙ "
.
ÙÙ" #
ProcessStartInfo
ÙÙ# 3
soxInfo
ÙÙ4 ;
=
ÙÙ< =
new
ÙÙ> A
System
ÙÙB H
.
ÙÙH I
Diagnostics
ÙÙI T
.
ÙÙT U
ProcessStartInfo
ÙÙU e
(
ÙÙe f
)
ÙÙf g
;
ÙÙg h
soxInfo
ıı 
.
ıı 
	Arguments
ıı !
=
ıı" #
soxArgs
ıı$ +
;
ıı+ ,
soxInfo
ˆˆ 
.
ˆˆ 
FileName
ˆˆ  
=
ˆˆ! "
exeName
ˆˆ# *
;
ˆˆ* +
soxInfo
˜˜ 
.
˜˜ 
UseShellExecute
˜˜ '
=
˜˜( )
false
˜˜* /
;
˜˜/ 0
soxInfo
¯¯ 
.
¯¯ #
RedirectStandardError
¯¯ -
=
¯¯. /
true
¯¯0 4
;
¯¯4 5

soxProcess
˙˙ 
.
˙˙ 
	StartInfo
˙˙ $
=
˙˙% &
soxInfo
˙˙' .
;
˙˙. /
try
˚˚ 
{
¸¸ 

soxProcess
˝˝ 
.
˝˝ 
Start
˝˝ $
(
˝˝$ %
)
˝˝% &
;
˝˝& '
string
ÄÄ 
err
ÄÄ 
=
ÄÄ  

soxProcess
ÄÄ! +
.
ÄÄ+ ,
StandardError
ÄÄ, 9
.
ÄÄ9 :
	ReadToEnd
ÄÄ: C
(
ÄÄC D
)
ÄÄD E
;
ÄÄE F

soxProcess
ÅÅ 
.
ÅÅ 
WaitForExit
ÅÅ *
(
ÅÅ* +
$num
ÅÅ+ .
)
ÅÅ. /
;
ÅÅ/ 0
if
ÇÇ 
(
ÇÇ 

soxProcess
ÇÇ "
.
ÇÇ" #
	HasExited
ÇÇ# ,
)
ÇÇ, -
{
ÉÉ 
int
ÑÑ 
n
ÑÑ 
=
ÑÑ 

soxProcess
ÑÑ  *
.
ÑÑ* +
ExitCode
ÑÑ+ 3
;
ÑÑ3 4
if
ÖÖ 
(
ÖÖ 
n
ÖÖ 
!=
ÖÖ  
$num
ÖÖ! "
)
ÖÖ" #
{
ÜÜ 
Trace
áá !
.
áá! "
	WriteLine
áá" +
(
áá+ ,
$str
áá, O
,
ááO P
err
ááQ T
)
ááT U
;
ááU V
}
àà 
else
ââ 
{
ää 
Trace
ãã !
.
ãã! "
	WriteLine
ãã" +
(
ãã+ ,
$str
ãã, G
)
ããG H
;
ããH I
rdr
åå 
=
åå  !,
TryGetAppropriateImpulseReader
åå" @
(
åå@ A
resamplePath
ååA M
,
ååM N
false
ååO T
,
ååT U
out
ååV Y

actualPath
ååZ d
)
ååd e
;
ååe f
}
çç 
}
éé 
}
èè 
catch
êê 
(
êê 
	Exception
êê  
e
êê! "
)
êê" #
{
ëë 
Trace
íí 
.
íí 
	WriteLine
íí #
(
íí# $
$str
íí$ C
,
ííC D
e
ííE F
.
ííF G
Message
ííG N
)
ííN O
;
ííO P
}
ìì 
}
îî 
if
ïï 
(
ïï 
rdr
ïï 
==
ïï 
null
ïï 
)
ïï 
{
ññ 
Trace
óó 
.
óó 
	WriteLine
óó 
(
óó  
$str
óó  B
,
óóB C
filePath
óóD L
)
óóL M
;
óóM N
}
òò 
return
ôô 
rdr
ôô 
;
ôô 
}
öö 	
private
ùù 
static
ùù 
void
ùù 
CleanUp
ùù #
(
ùù# $
)
ùù$ %
{
ûû 	
try
üü 
{
†† 
string
§§ 
verFile
§§ 
=
§§  
$str
§§! +
+
§§, -
DSPUtil
§§. 5
.
§§5 6
DSPUtil
§§6 =
.
§§= >
VERSION
§§> E
.
§§E F
ToString
§§F N
(
§§N O
)
§§O P
.
§§P Q
Replace
§§Q X
(
§§X Y
$char
§§Y \
,
§§\ ]
$char
§§^ a
)
§§a b
+
§§c d
$str
§§e k
;
§§k l
string
•• 
verPath
•• 
=
••  
Path
••! %
.
••% &
Combine
••& -
(
••- .
_tempFolder
••. 9
,
••9 :
verFile
••; B
)
••B C
;
••C D
if
¶¶ 
(
¶¶ 
!
¶¶ 
File
¶¶ 
.
¶¶ 
Exists
¶¶  
(
¶¶  !
verPath
¶¶! (
)
¶¶( )
)
¶¶) *
{
ßß 
foreach
®® 
(
®® 
string
®® #
s
®®$ %
in
®®& (
	Directory
®®) 2
.
®®2 3
GetFiles
®®3 ;
(
®®; <
_tempFolder
®®< G
)
®®G H
)
®®H I
{
©© 
File
™™ 
.
™™ 
Delete
™™ #
(
™™# $
s
™™$ %
)
™™% &
;
™™& '
}
´´ 
File
¨¨ 
.
¨¨ 
WriteAllText
¨¨ %
(
¨¨% &
verPath
¨¨& -
,
¨¨- .
new
¨¨/ 2
DateTime
¨¨3 ;
(
¨¨; <
)
¨¨< =
.
¨¨= >
ToString
¨¨> F
(
¨¨F G
)
¨¨G H
)
¨¨H I
;
¨¨I J
}
≠≠ 
}
ÆÆ 
catch
ØØ 
(
ØØ 
	Exception
ØØ 
e
ØØ 
)
ØØ 
{
∞∞ 
Trace
±± 
.
±± 
	WriteLine
±± 
(
±±  
$str
±±  4
+
±±5 6
e
±±7 8
.
±±8 9
Message
±±9 @
)
±±@ A
;
±±A B
}
≤≤ 
}
≥≥ 	
private
µµ 
static
µµ 
void
µµ 
Show
µµ  
(
µµ  !
string
µµ! '
hdr
µµ( +
,
µµ+ ,
string
µµ- 3
msg
µµ4 7
,
µµ7 8
int
µµ9 <
secs
µµ= A
)
µµA B
{
∂∂ 	

ThreadPool
∑∑ 
.
∑∑ 
QueueUserWorkItem
∑∑ (
(
∑∑( )
delegate
∑∑) 1
(
∑∑2 3
object
∑∑3 9
o
∑∑: ;
)
∑∑; <
{
∏∏ 
SlimCLI
ππ 
server
ππ 
=
ππ  
new
ππ! $
SlimCLI
ππ% ,
(
ππ, -
)
ππ- .
;
ππ. /

SlimPlayer
∫∫ 
player
∫∫ !
=
∫∫" #
new
∫∫$ '

SlimPlayer
∫∫( 2
(
∫∫2 3
server
∫∫3 9
,
∫∫9 :
_userID
∫∫; B
)
∫∫B C
;
∫∫C D
try
ªª 
{
ºº 
server
ΩΩ 
.
ΩΩ 
Open
ΩΩ 
(
ΩΩ  
)
ΩΩ  !
;
ΩΩ! "
player
ææ 
.
ææ 
Show
ææ 
(
ææ  
hdr
ææ  #
,
ææ# $
msg
ææ% (
,
ææ( )
secs
ææ* .
)
ææ. /
;
ææ/ 0
}
øø 
catch
¿¿ 
(
¿¿ 
	Exception
¿¿  
)
¿¿  !
{
¡¡ 
}
√√ 
finally
ƒƒ 
{
≈≈ 
server
∆∆ 
.
∆∆ 
Close
∆∆  
(
∆∆  !
)
∆∆! "
;
∆∆" #
}
«« 
}
»» 
)
»» 
;
»» 
}
…… 	
}
   
}ÃÃ 